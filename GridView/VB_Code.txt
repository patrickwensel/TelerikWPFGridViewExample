StartOf_Aggregates\AggregatesViewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Aggregates
    Public Class AggregatesViewModel
        Inherits ViewModelBase

        Private showGroupHeaderColumnAggregates As Boolean

        Public Property ShowGroupHeaderColumnAggregates As Boolean
            Get
                Return showGroupHeaderColumnAggregates
            End Get
            Set(ByVal value As Boolean)

                If showGroupHeaderColumnAggregates <> value Then
                    showGroupHeaderColumnAggregates = value
                    OnPropertyChanged("ShowGroupHeaderColumnAggregates")
                End If
            End Set
        End Property

        Private showHeaderAggregates As Boolean

        Public Property ShowHeaderAggregates As Boolean
            Get
                Return showHeaderAggregates
            End Get
            Set(ByVal value As Boolean)

                If showHeaderAggregates <> value Then
                    showHeaderAggregates = value
                    OnPropertyChanged("ShowHeaderAggregates")
                End If
            End Set
        End Property

        Private selectedAlignment As ColumnAggregatesAlignment = ColumnAggregatesAlignment.NoAlignment

        Public Property SelectedAlignment As ColumnAggregatesAlignment
            Get
                Return Me.selectedAlignment
            End Get
            Set(ByVal value As ColumnAggregatesAlignment)

                If Me.selectedAlignment <> value Then
                    Me.selectedAlignment = value
                    Me.OnPropertyChanged("SelectedAlignment")
                End If
            End Set
        End Property

        Private alignmentOptions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property AlignmentOptions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If alignmentOptions Is Nothing Then
                    alignmentOptions = Telerik.Windows.Data.EnumDataSource.FromType(Of ColumnAggregatesAlignment)()
                End If

                Return alignmentOptions
            End Get
        End Property
    End Class
End Namespace

EndOf_Aggregates\AggregatesViewModel.vb
StartOf_Aggregates\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Aggregates
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Aggregates\Example.xaml.vb
StartOf_CellEditTemplate\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CellEditTemplate
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CellEditTemplate\Example.xaml.vb
StartOf_ClickEvents\ClassNameConverter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data

Namespace Telerik.Windows.Examples.GridView.ClickEvents
    Public Class ClassNameConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Return If(value IsNot Nothing, value.[GetType]().Name, value)
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Return value
        End Function
    End Class
End Namespace

EndOf_ClickEvents\ClassNameConverter.vb
StartOf_ClickEvents\ConfigurationPanelBehavior.vb
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports System.Collections.ObjectModel
Imports System
Imports System.Windows

Namespace Telerik.Windows.Examples.GridView.ClickEvents
    Public Class ConfigurationPanelBehavior
        Inherits ViewModelBase

        Private grid As RadGridView = Nothing
        Private panel As FrameworkElement = Nothing
        Public Shared ReadOnly PanelProperty As DependencyProperty = DependencyProperty.RegisterAttached("Panel", GetType(FrameworkElement), GetType(ConfigurationPanelBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnPanelPropertyChanged)))

        Public Shared Sub SetPanel(ByVal dependencyObject As DependencyObject, ByVal panel As FrameworkElement)
            dependencyObject.SetValue(PanelProperty, panel)
        End Sub

        Public Shared Function GetPanel(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(PanelProperty), FrameworkElement)
        End Function

        Private Shared Sub OnPanelPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim panel As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If grid IsNot Nothing AndAlso panel IsNot Nothing Then
                Dim behavior As ConfigurationPanelBehavior = New ConfigurationPanelBehavior(grid, panel)
                behavior.Attach()
            End If
        End Sub

        Private Sub Attach()
            If grid IsNot Nothing Then
                Me.grid.RowActivated += AddressOf OnRowActivated
                Me.grid.[AddHandler](GridViewCellBase.CellDoubleClickEvent, New EventHandler(Of RadRoutedEventArgs)(AddressOf OnCellDoubleClick), True)
            End If
        End Sub

        Public Sub New(ByVal grid As RadGridView, ByVal panel As FrameworkElement)
            Me.grid = grid
            Me.panel = panel
            Me.ActivatedRows = New ObservableCollection(Of MyBusinessObject)()
            AddHandler Me.panel.LayoutUpdated, New EventHandler(AddressOf panel_LayoutUpdated)
        End Sub

        Private Sub panel_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            If panel IsNot Nothing AndAlso panel.DataContext <> Me Then
                Me.panel.DataContext = Me
            End If
        End Sub

        Private _clickedCell As GridViewCellBase

        Public Property ClickedCell As GridViewCellBase
            Get
                Return _clickedCell
            End Get
            Set(ByVal value As GridViewCellBase)
                _clickedCell = value
                OnPropertyChanged("ClickedCell")
            End Set
        End Property

        Private _activatedRows As ObservableCollection(Of MyBusinessObject)

        Public Property ActivatedRows As ObservableCollection(Of MyBusinessObject)
            Get
                Return _activatedRows
            End Get
            Set(ByVal value As ObservableCollection(Of MyBusinessObject))
                _activatedRows = value
                OnPropertyChanged("ActivatedRows")
            End Set
        End Property

        Private Sub OnCellDoubleClick(ByVal sender As Object, ByVal args As RadRoutedEventArgs)
            Dim cell As GridViewCellBase = TryCast(args.OriginalSource, GridViewCellBase)

            If cell IsNot Nothing Then
                Me.ClickedCell = cell
            End If
        End Sub

        Private Sub OnRowActivated(ByVal sender As Object, ByVal e As RowEventArgs)
            Me.ActivatedRows.Insert(0, TryCast(e.Row.DataContext, MyBusinessObject))
        End Sub
    End Class
End Namespace

EndOf_ClickEvents\ConfigurationPanelBehavior.vb
StartOf_ClickEvents\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ClickEvents
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ClickEvents\Example.xaml.vb
StartOf_Columns\WPF\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Columns
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Columns\WPF\Example.xaml.vb
StartOf_ColumnTypes\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ColumnTypes
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ColumnTypes\Example.xaml.vb
StartOf_ComboBoxColumn\Employee.vb
Imports System

Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Class Employee
        Public Property Name As String
    End Class

    Public Class Position
        Public Property Description As String
        Public Property Employee As Employee
    End Class
End Namespace

EndOf_ComboBoxColumn\Employee.vb
StartOf_ComboBoxColumn\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ComboBoxColumn\Example.xaml.vb
StartOf_ComboBoxColumn\Location.vb
Imports System

Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Class Country
        Public Property ID As Integer
        Public Property Name As String
        Public Property Capital As String
        Public Property Continent As String
    End Class

    Public Class Location
        Public Property ID As Integer
        Public Property CountryID As Integer?
        Public Property Description As String
    End Class
End Namespace

EndOf_ComboBoxColumn\Location.vb
StartOf_ComboBoxColumn\MyModel.vb
Imports System.Collections.ObjectModel
Imports System.Linq
Imports Telerik.Windows.Controls
Imports System.Collections
Imports System.Collections.Generic
Imports System
Imports System.Windows.Data
Imports System.Windows
Imports Telerik.Windows.Data
Imports System.ComponentModel
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Class MyModel
        Inherits ViewModelBase

        Private ReadOnly countryNames As String()
        Private ReadOnly capitalNames As String()
        Private ReadOnly continentNames As String()

        Public Sub New()
            countryNames = New String(10) {"USA", "Canada", "Mexico", "Italy", "Germany", "France", "Belgium", "Russia", "Spain", "Portugal", "Greece"}
            capitalNames = New String(10) {"Washington", "Ottawa", "Mexico City", "Rome", "Berlin", "Paris", "Brussels", "Moscow", "Madrid", "Lisbon", "Athens"}
            continentNames = New String(10) {"North America", "North America", "North America", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe"}
        End Sub

        Private _data As IEnumerable

        Public Property Data As IEnumerable
            Get

                If _data Is Nothing Then
                    _data = GetData()
                End If

                Return _data
            End Get
        End Property

        Private _columns As ObservableCollection(Of GridViewColumn)

        Public Property Columns As ObservableCollection(Of GridViewColumn)
            Get

                If _columns Is Nothing Then
                    _columns = New ObservableCollection(Of GridViewColumn)()
                End If

                Return _columns
            End Get
        End Property

        Private _type As EnumMemberViewModel

        Public Property Type As EnumMemberViewModel
            Get
                Return _type
            End Get
            Set(ByVal value As EnumMemberViewModel)

                If _type <> value Then
                    _type = value
                    _data = Nothing
                    OnPropertyChanged("Type")
                    OnPropertyChanged("Data")
                End If
            End Set
        End Property

        Private _descriptionHeader As String

        Public Property DescriptionHeader As String
            Get
                Return _descriptionHeader
            End Get
            Set(ByVal value As String)

                If _descriptionHeader <> value Then
                    _descriptionHeader = value
                    OnPropertyChanged("DescriptionHeader")
                End If
            End Set
        End Property

        Private _description As String

        Public Property Description As String
            Get
                Return _description
            End Get
            Set(ByVal value As String)

                If _description <> value Then
                    _description = value
                    OnPropertyChanged("Description")
                End If
            End Set
        End Property

        Private Function GetData() As IEnumerable
            If Type Is Nothing Then Return Nothing

            Select Case CType(Type.Value, ColumnType)
                Case ColumnType.GridViewMultiColumnComboBoxColumn
                    Description = "This is a demonstration of the GridViewMultiColumnComboBoxColumn."
                    DescriptionHeader = "GridViewMultiColumnComboBoxColumn"
                    Columns.Clear()
                    Dim locations As List(Of Location) = New List(Of Location)()

                    For i As Integer = 0 To 10 - 1
                        Dim location As Location = New Location()
                        location.ID = i
                        location.CountryID = i
                        location.Description = "Description" & i
                        locations.Add(location)
                    Next

                    Dim countries As List(Of Country) = New List(Of Country)()

                    For i As Integer = 0 To 10 - 1
                        Dim country As Country = New Country()
                        country.ID = i
                        country.Name = countryNames(i)
                        country.Capital = capitalNames(i)
                        country.Continent = continentNames(i)
                        countries.Add(country)
                    Next

                    Dim comboColumn As GridViewMultiColumnComboBoxColumn = New GridViewMultiColumnComboBoxColumn()
                    comboColumn.Header = "Country ID & Name"
                    comboColumn.DataMemberBinding = New Binding("CountryID")
                    comboColumn.SelectedValuePath = "ID"
                    comboColumn.DisplayMemberPath = "Name"
                    comboColumn.ItemsSource = countries
                    comboColumn.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    comboColumn.DropDownWidth = 330
                    comboColumn.DropDownHeight = 250
                    Columns.Add(comboColumn)
                    Dim column As GridViewDataColumn = New GridViewDataColumn()
                    column.DataMemberBinding = New Binding("Description")
                    column.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(column)
                    Return locations
                Case ColumnType.ComboBoxColumnBoundToString
                    Description = "This is a demonstration of GridViewComboBoxColumn bound to a list of strings."
                    DescriptionHeader = "ComboBoxColumn bound to string"
                    Columns.Clear()
                    Dim products As List(Of Product) = New List(Of Product)()

                    For i As Integer = 0 To 10 - 1
                        Dim product As Product = New Product()
                        product.ID = i
                        product.ProductName = String.Format("Product{0}", i)
                        products.Add(product)
                    Next

                    Dim column As GridViewComboBoxColumn = New GridViewComboBoxColumn()
                    column.DataMemberBinding = New Binding("ProductName")
                    column.ItemsSource = From p In products Select p.ProductName
                    column.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(column)
                    Return products
                Case ColumnType.ComboBoxColumnBoundToObjectWithoutSelectedValueMemberPath
                    Description = "This is a demonstration of GridViewComboBoxColumn bound to a list of objects without SelectedValueMemberPath set."
                    DescriptionHeader = "ComboBoxColumn bound to Objects"
                    Columns.Clear()
                    Dim employees As List(Of Employee) = New List(Of Employee)()

                    For i As Integer = 0 To 10 - 1
                        Dim employee As Employee = New Employee()
                        employee.Name = String.Format("Name{0}", i)
                        employees.Add(employee)
                    Next

                    Dim positions As List(Of Position) = New List(Of Position)()

                    For i As Integer = 0 To 10 - 1
                        Dim position As Position = New Position()
                        position.Description = String.Format("Description{0}", i)
                        position.Employee = employees(i)
                        positions.Add(position)
                    Next

                    Dim comboColumn As GridViewComboBoxColumn = New GridViewComboBoxColumn()
                    comboColumn.DataMemberBinding = New Binding("Employee")
                    comboColumn.DisplayMemberPath = "Name"
                    comboColumn.ItemsSource = employees
                    comboColumn.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(comboColumn)
                    Dim column As GridViewDataColumn = New GridViewDataColumn()
                    column.DataMemberBinding = New Binding("Description")
                    column.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(column)
                    Return positions
                Case ColumnType.ComboBoxColumnBoundToEnum
                    Description = "This is a demonstration of GridViewComboBoxColumn bound to a list of enum."
                    DescriptionHeader = "ComboBoxColumn bound to Enum"
                    Columns.Clear()
                    Dim persons As List(Of Person) = New List(Of Person)()
                    Dim person As Person = New Person()
                    person.ID = 1
                    person.Gender = Gender.Male
                    persons.Add(person)
                    person = New Person()
                    person.ID = 2
                    person.Gender = Gender.Female
                    persons.Add(person)
                    Dim AvailableGenders As List(Of Gender) = New List(Of Gender)()
                    AvailableGenders.Add(Gender.Male)
                    AvailableGenders.Add(Gender.Female)
                    Dim comboColumn As GridViewComboBoxColumn = New GridViewComboBoxColumn()
                    comboColumn.DataMemberBinding = New Binding("Gender")
                    comboColumn.ItemsSource = AvailableGenders
                    comboColumn.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(comboColumn)
                    Return persons
                Case ColumnType.ComboBoxColumnBoundToObjectWithSelectedValueMemberPath
                    Description = "This is a demonstration of GridViewComboBoxColumn bound to a list of objects with SelectedValueMemberPath set."
                    DescriptionHeader = "ComboBoxColumn bound to Objects"
                    Columns.Clear()
                    Dim locations As List(Of Location) = New List(Of Location)()

                    For i As Integer = 0 To 10 - 1
                        Dim location As Location = New Location()
                        location.ID = i
                        location.CountryID = i
                        locations.Add(location)
                    Next

                    Dim countries As List(Of Country) = New List(Of Country)()

                    For i As Integer = 0 To 10 - 1
                        Dim country As Country = New Country()
                        country.ID = i
                        country.Name = countryNames(i)
                        countries.Add(country)
                    Next

                    Dim comboColumn As GridViewComboBoxColumn = New GridViewComboBoxColumn()
                    comboColumn.DataMemberBinding = New Binding("CountryID")
                    comboColumn.SelectedValueMemberPath = "ID"
                    comboColumn.DisplayMemberPath = "Name"
                    comboColumn.ItemsSource = countries
                    comboColumn.Width = New GridViewLength(1, GridViewLengthUnitType.Star)
                    Columns.Add(comboColumn)
                    Return locations
            End Select

            Return Nothing
        End Function

        Private _columnTypes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property ColumnTypes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _columnTypes Is Nothing Then
                    _columnTypes = Telerik.Windows.Data.EnumDataSource.FromType(Of ColumnType)()
                    Type = _columnTypes.FirstOrDefault()
                End If

                Return _columnTypes
            End Get
        End Property
    End Class

    Public Enum ColumnType
        <Description("MultiColumnComboBoxColumn")>
        GridViewMultiColumnComboBoxColumn <Description("ComboBoxColumn bound to string")>
        ComboBoxColumnBoundToString <Description("ComboBoxColumn bound to enum")>
        ComboBoxColumnBoundToEnum <Description("ComboBoxColumn bound to object without SelectedValueMemberPath")>
        ComboBoxColumnBoundToObjectWithoutSelectedValueMemberPath <Description("ComboBoxColumn bound to object with SelectedValueMemberPath")>
        ComboBoxColumnBoundToObjectWithSelectedValueMemberPath
    End Enum
End Namespace

EndOf_ComboBoxColumn\MyModel.vb
StartOf_ComboBoxColumn\Person.vb
Imports System

Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Enum Gender
        Male
        Female
    End Enum

    Public Class Person
        Public Property ID As Integer
        Public Property Gender As Gender
    End Class
End Namespace

EndOf_ComboBoxColumn\Person.vb
StartOf_ComboBoxColumn\Product.vb
Imports System

Namespace Telerik.Windows.Examples.GridView.ComboBoxColumn
    Public Class Product
        Public Property ID As Integer
        Public Property ProductName As String
    End Class
End Namespace

EndOf_ComboBoxColumn\Product.vb
StartOf_Commands\Example.xaml.vb
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Commands
    Public Partial Class Example
        Public Sub New()
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(GetType(RadGridViewCommands).TypeHandle)
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Commands\Example.xaml.vb
StartOf_ControlPanel\Example.xaml.vb
Imports System
Imports System.Windows
Imports System.Windows.Data
Imports System.Windows.Media

Namespace Telerik.Windows.Examples.GridView.ControlPanel
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class

    Public Class ColorToBrushConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Return If(TryCast(value, SolidColorBrush) IsNot Nothing, (TryCast(value, SolidColorBrush)).Color, value)
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Return New SolidColorBrush(CType(value, Color))
        End Function
    End Class
End Namespace

EndOf_ControlPanel\Example.xaml.vb
StartOf_CustomAggregates\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CustomAggregates
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CustomAggregates\Example.xaml.vb
StartOf_CustomAggregates\StandardDeviationFunction.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.CustomAggregates
    Public Class StandardDeviationFunction
        Inherits AggregateFunction(Of Order_Detail, Double)

        Public Sub New()
            Me.AggregationExpression = Function(items) StdDev(items)
        End Sub

        Private Function StdDev(ByVal source As IEnumerable(Of Order_Detail)) As Double
            Dim itemCount = source.Count()

            If itemCount > 1 Then
                Dim values = source.[Select](Function(i) i.UnitPrice)
                Dim average = values.Average()
                Dim sum = values.Sum(Function(v) Math.Pow(v - average, 2))
                Return Math.Sqrt(sum / (itemCount - 1))
            End If

            Return 0
        End Function
    End Class
End Namespace

EndOf_CustomAggregates\StandardDeviationFunction.vb
StartOf_CustomColumn\DateTimePickerColumn.vb
Imports System.Windows
Imports System.Windows.Data
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports System
Imports Telerik.Windows.Input.Touch

Namespace Telerik.Windows.Examples.GridView.CustomColumn
    Public Class DateTimePickerColumn
        Inherits GridViewBoundColumnBase

        Public Property TimeInterval As TimeSpan
            Get
                Return CType(GetValue(TimeIntervalProperty), TimeSpan)
            End Get
            Set(ByVal value As TimeSpan)
                SetValue(TimeIntervalProperty, value)
            End Set
        End Property

        Public Shared ReadOnly TimeIntervalProperty As DependencyProperty = DependencyProperty.Register("TimeInterval", GetType(TimeSpan), GetType(DateTimePickerColumn), New PropertyMetadata(TimeSpan.FromHours(1)))

        Public Overrides Function CreateCellEditElement(ByVal cell As GridViewCell, ByVal dataItem As Object) As FrameworkElement
            Me.BindingTarget = RadDateTimePicker.SelectedValueProperty
            Dim picker As RadDateTimePicker = New RadDateTimePicker()
            picker.IsTooltipEnabled = False
            picker.TimeInterval = Me.TimeInterval
            picker.SetBinding(Me.BindingTarget, Me.CreateValueBinding())
            Return picker
        End Function

        Public Overrides Function GetNewValueFromEditor(ByVal editor As Object) As Object
            Dim picker As RadDateTimePicker = TryCast(editor, RadDateTimePicker)

            If picker IsNot Nothing Then
                picker.DateTimeText = picker.CurrentDateTimeText
            End If

            Return MyBase.GetNewValueFromEditor(editor)
        End Function

        Private Function CreateValueBinding() As Binding
            Dim valueBinding As Binding = New Binding()
            valueBinding.Mode = BindingMode.TwoWay
            valueBinding.NotifyOnValidationError = True
            valueBinding.ValidatesOnExceptions = True
            valueBinding.UpdateSourceTrigger = UpdateSourceTrigger.Explicit
            valueBinding.Path = New PropertyPath(Me.DataMemberBinding.Path.Path)
            Return valueBinding
        End Function
    End Class
End Namespace

EndOf_CustomColumn\DateTimePickerColumn.vb
StartOf_CustomColumn\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CustomColumn
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CustomColumn\Example.xaml.vb
StartOf_CustomFilterControls\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CustomFilterControls
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CustomFilterControls\Example.xaml.vb
StartOf_CustomFilterControls\FromDateToDateFilterControl.xaml.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Data
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.CustomFilterControls
    Public Partial Class FromDateToDateFilterControl
        Inherits UserControl
        Implements IFilteringControl

        Private column As GridViewBoundColumnBase
        Private compositeFilter As CompositeFilterDescriptor
        Private fromFilter As Telerik.Windows.Data.FilterDescriptor
        Private toFilter As Telerik.Windows.Data.FilterDescriptor

        Public Property IsActive As Boolean
            Get
                Return CBool(GetValue(IsActiveProperty))
            End Get
            Set(ByVal value As Boolean)
                SetValue(IsActiveProperty, value)
            End Set
        End Property

        Public Shared ReadOnly IsActiveProperty As DependencyProperty = DependencyProperty.Register("IsActive", GetType(Boolean), GetType(FromDateToDateFilterControl), New System.Windows.PropertyMetadata(False))

        <TypeConverter(GetType(DateTimeTypeConverter))>
        Public Property FromDate As DateTime
            Get
                Return Me.fromDatePicker.SelectedDate.GetValueOrDefault(DateTime.MinValue)
            End Get
            Set(ByVal value As DateTime)
                Me.fromDatePicker.SelectedDate = value
            End Set
        End Property

        <TypeConverter(GetType(DateTimeTypeConverter))>
        Public Property ToDate As DateTime
            Get
                Return Me.toDatePicker.SelectedDate.GetValueOrDefault(DateTime.MaxValue)
            End Get
            Set(ByVal value As DateTime)
                Me.toDatePicker.SelectedDate = value
            End Set
        End Property

        Public Property FromPicker As RadDatePicker
            Get
                Return Me.fromDatePicker
            End Get
        End Property

        Public Property ToPicker As RadDatePicker
            Get
                Return Me.toDatePicker
            End Get
        End Property

        Public Sub New()
            InitializeComponent()
        End Sub

        Public Sub Prepare(ByVal column As Telerik.Windows.Controls.GridViewColumn)
            Me.column = TryCast(column, GridViewBoundColumnBase)

            If Me.column Is Nothing Then
                Return
            End If

            If Me.compositeFilter Is Nothing Then
                Me.CreateFilters()
            End If

            Me.fromFilter.Value = Me.FromDate
            Me.toFilter.Value = Me.ToDate
        End Sub

        Private Sub CreateFilters()
            Dim dataMember As String = Me.column.DataMemberBinding.Path.Path
            Me.compositeFilter = New CompositeFilterDescriptor()
            Me.fromFilter = New Telerik.Windows.Data.FilterDescriptor(dataMember, Telerik.Windows.Data.FilterOperator.IsGreaterThanOrEqualTo, Nothing)
            Me.compositeFilter.FilterDescriptors.Add(Me.fromFilter)
            Me.toFilter = New Telerik.Windows.Data.FilterDescriptor(dataMember, Telerik.Windows.Data.FilterOperator.IsLessThanOrEqualTo, Nothing)
            Me.compositeFilter.FilterDescriptors.Add(Me.toFilter)
        End Sub

        Private Sub OnFilter(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Me.fromFilter.Value = Me.FromDate
            Me.toFilter.Value = Me.ToDate

            If Not Me.column.DataControl.FilterDescriptors.Contains(Me.compositeFilter) Then
                Me.column.DataControl.FilterDescriptors.Add(Me.compositeFilter)
            End If

            Me.IsActive = True
        End Sub

        Private Sub OnClear(ByVal sender As Object, ByVal e As RoutedEventArgs)
            If Me.column.DataControl.FilterDescriptors.Contains(Me.compositeFilter) Then
                Me.column.DataControl.FilterDescriptors.Remove(Me.compositeFilter)
            End If

            Me.FromDate = New DateTime(1863, 1, 1)
            Me.ToDate = New DateTime(1933, 1, 1)
            Me.IsActive = False
        End Sub
    End Class
End Namespace

EndOf_CustomFilterControls\FromDateToDateFilterControl.xaml.vb
StartOf_CustomGrouping\CustomGroupingBehavior.vb
Imports System
Imports System.ComponentModel
Imports System.Globalization
Imports System.Linq
Imports System.Windows
Imports Telerik.Windows.Data
Imports Telerik.Windows.Examples

Namespace Telerik.Windows.Controls.GridView.CustomGrouping
    Public Class CustomGroupingBehavior
        Private ReadOnly grid As RadGridView = Nothing

        Public Sub New(ByVal grid As RadGridView)
            Me.grid = grid
        End Sub

        Public Shared ReadOnly IsEnabledProperty As DependencyProperty = DependencyProperty.RegisterAttached("IsEnabled", GetType(Boolean), GetType(CustomGroupingBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnIsEnabledPropertyChanged)))

        Public Shared Sub SetIsEnabled(ByVal dependencyObject As DependencyObject, ByVal enabled As Boolean)
            dependencyObject.SetValue(IsEnabledProperty, enabled)
        End Sub

        Public Shared Function GetIsEnabled(ByVal dependencyObject As DependencyObject) As Boolean
            Return CBool(dependencyObject.GetValue(IsEnabledProperty))
        End Function

        Private Shared Sub OnIsEnabledPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid = TryCast(dependencyObject, RadGridView)

            If grid IsNot Nothing Then

                If CBool(e.NewValue) Then
                    Dim behavior = New CustomGroupingBehavior(grid)
                    behavior.Attach()
                End If
            End If
        End Sub

        Private Sub Attach()
            If grid IsNot Nothing Then
                grid.Grouping += AddressOf Grouping
                AddCustomGroupDescriptors()
            End If
        End Sub

        Private Sub AddCustomGroupDescriptors()
            grid.GroupDescriptors.Add(New GroupDescriptor(Of MyBusinessObject, Integer, Integer)() With {
                .GroupingExpression = Function(i) i.Date.Year,
                .DisplayContent = "Year",
                .SortDirection = ListSortDirection.Ascending
            })
            grid.GroupDescriptors.Add(New GroupDescriptor(Of MyBusinessObject, String, Integer)() With {
                .GroupingExpression = Function(i) CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i.Date.Month),
                .GroupSortingExpression = Function(grouping) DateTime.ParseExact(grouping.Key, "MMMM", CultureInfo.CurrentCulture).Month,
                .DisplayContent = "Month",
                .SortDirection = ListSortDirection.Ascending
            })
        End Sub

        Private Sub Grouping(ByVal sender As Object, ByVal e As GridViewGroupingEventArgs)
            If e.Action = GroupingEventAction.Place Then
                Dim cgd = TryCast(e.GroupDescriptor, ColumnGroupDescriptor)

                If cgd IsNot Nothing AndAlso cgd.Column.UniqueName = "Date" Then
                    e.Cancel = True

                    If grid.GroupDescriptors.OfType(Of GroupDescriptorBase)().Where(Function(d) d.DisplayContent = "Year" OrElse d.DisplayContent = "Month").Any() Then
                        Return
                    End If

                    AddCustomGroupDescriptors()
                End If
            ElseIf e.Action = GroupingEventAction.Remove Then
                Dim gd = TryCast(e.GroupDescriptor, GroupDescriptorBase)
                Dim gdToRemove As GroupDescriptorBase = Nothing

                If gd IsNot Nothing Then

                    If gd.DisplayContent = "Year" Then
                        gdToRemove = grid.GroupDescriptors.OfType(Of GroupDescriptorBase)().Where(Function(d) d.DisplayContent = "Month").FirstOrDefault()
                    ElseIf gd.DisplayContent = "Month" Then
                        gdToRemove = grid.GroupDescriptors.OfType(Of GroupDescriptorBase)().Where(Function(d) d.DisplayContent = "Year").FirstOrDefault()
                    End If
                End If

                If gdToRemove IsNot Nothing Then
                    grid.GroupDescriptors.Remove(gdToRemove)
                End If
            End If
        End Sub
    End Class
End Namespace

EndOf_CustomGrouping\CustomGroupingBehavior.vb
StartOf_CustomGrouping\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CustomGrouping
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CustomGrouping\Example.xaml.vb
StartOf_CustomRowLayout\Example.xaml.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers

Namespace Telerik.Windows.Examples.GridView.CustomRowLayout
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.root.Resources.MergedDictionaries.Clear()
            Me.root.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/CustomRowLayout/GridViewRowStyle.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_CustomRowLayout\Example.xaml.vb
StartOf_CustomSorting\CustomSortingBehavior.vb
Imports System.Linq
Imports System.Windows
Imports System.ComponentModel

Namespace Telerik.Windows.Controls.GridView.CustomSorting
    Public Class CustomSortingBehavior
        Private grid As RadGridView = Nothing

        Public Sub New(ByVal grid As RadGridView)
            Me.grid = grid
        End Sub

        Public Shared ReadOnly IsEnabledProperty As DependencyProperty = DependencyProperty.RegisterAttached("IsEnabled", GetType(Boolean), GetType(CustomSortingBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnIsEnabledPropertyChanged)))

        Public Shared Sub SetIsEnabled(ByVal dependencyObject As DependencyObject, ByVal enabled As Boolean)
            dependencyObject.SetValue(IsEnabledProperty, enabled)
        End Sub

        Public Shared Function GetIsEnabled(ByVal dependencyObject As DependencyObject) As Boolean
            Return CBool(dependencyObject.GetValue(IsEnabledProperty))
        End Function

        Private Shared Sub OnIsEnabledPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)

            If grid IsNot Nothing Then

                If CBool(e.NewValue) Then
                    Dim menu As CustomSortingBehavior = New CustomSortingBehavior(grid)
                    menu.Attach()
                End If
            End If
        End Sub

        Private Sub Attach()
            If grid IsNot Nothing Then
                grid.Sorting += AddressOf Sorting
            End If
        End Sub

        Private Sub Sorting(ByVal sender As Object, ByVal e As GridViewSortingEventArgs)
            If e.Column.UniqueName = "CustomerID" Then
                e.Cancel = True
                Dim descriptor As ColumnSortDescriptor = (From d In grid.SortDescriptors.OfType(Of ColumnSortDescriptor)() Where Object.Equals(d.Column, grid.Columns("CompanyName")) Select d).FirstOrDefault()

                If descriptor Is Nothing Then
                    grid.SortDescriptors.Add(New ColumnSortDescriptor() With {
                        .Column = grid.Columns("CompanyName"),
                        .SortDirection = ListSortDirection.Ascending
                    })
                    e.Column.SortingState = SortingState.Ascending
                Else
                    descriptor.SortDirection = If(descriptor.SortDirection = ListSortDirection.Ascending, ListSortDirection.Descending, ListSortDirection.Ascending)
                    e.Column.SortingState = If(descriptor.SortDirection = ListSortDirection.Ascending, SortingState.Ascending, SortingState.Descending)
                End If
            End If
        End Sub
    End Class
End Namespace

EndOf_CustomSorting\CustomSortingBehavior.vb
StartOf_CustomSorting\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.CustomSorting
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_CustomSorting\Example.xaml.vb
StartOf_DataFormatting\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.DataFormatting
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_DataFormatting\Example.xaml.vb
StartOf_DataFormatting\MyConverter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data
Imports System.Globalization

Namespace Telerik.Windows.Examples.GridView.DataFormatting
    Public Class MyConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object
            Return If((CBool(value)), "yes", "no")
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As CultureInfo) As Object
            Return value
        End Function
    End Class
End Namespace

EndOf_DataFormatting\MyConverter.vb
StartOf_DataSourceChangeNotifications\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.DataSourceChangeNotifications
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_DataSourceChangeNotifications\Example.xaml.vb
StartOf_DataSourceChangeNotifications\MyDataContext.vb
Imports System
Imports System.Windows.Input
Imports System.ComponentModel
Imports System.Windows.Data
Imports System.Collections

Namespace Telerik.Windows.Examples.GridView.DataSourceChangeNotifications
    Public Class MyDataContext
        Private _deleteCurrentCommand As DeleteCurrentCommand

        Public Property DeleteCurrentCommand As DeleteCurrentCommand
            Get
                Return _deleteCurrentCommand
            End Get
            Set(ByVal value As DeleteCurrentCommand)
                _deleteCurrentCommand = value
            End Set
        End Property

        Private _itemsSource As ICollectionView

        Public Property ItemsSource As ICollectionView
            Get

                If _itemsSource Is Nothing Then
                    Dim collectionViewSource As CollectionViewSource = New CollectionViewSource()
                    collectionViewSource.Source = New Northwind().CustomersCollection
                    _itemsSource = collectionViewSource.View
                    _itemsSource.MoveCurrentToFirst()
                    DeleteCurrentCommand = New DeleteCurrentCommand(Me)
                End If

                Return _itemsSource
            End Get
        End Property

        Public Sub DeleteCurrent()
            If ItemsSource.CurrentItem IsNot Nothing Then
                Dim customer As Customers = TryCast(ItemsSource.CurrentItem, Customers)
                Dim view As IEditableCollectionView = TryCast(ItemsSource, IEditableCollectionView)

                If customer IsNot Nothing Then

                    If view IsNot Nothing Then

                        If Not view.IsEditingItem AndAlso Not view.IsAddingNew Then
                            view.Remove(customer)
                        End If
                    ElseIf TypeOf ItemsSource.SourceCollection Is IList Then
                        (CType(ItemsSource.SourceCollection, IList)).Remove(customer)
                    End If
                End If
            End If
        End Sub
    End Class

    Public Class DeleteCurrentCommand
        Implements ICommand

        Private ReadOnly context As MyDataContext

        Public Sub New(ByVal context As MyDataContext)
            Me.context = context
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            context.DeleteCurrent()
        End Sub
    End Class
End Namespace

EndOf_DataSourceChangeNotifications\MyDataContext.vb
StartOf_DataSources\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.DataSources
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_DataSources\Example.xaml.vb
StartOf_DataSources\MyDataRow.vb
Imports System.Dynamic
Imports System.Collections.Generic
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.DataSources
    Public Class MyDataRow
        Inherits DynamicObject
        Implements INotifyPropertyChanged

        ReadOnly data As IDictionary(Of String, Object)

        Public Sub New()
            data = New Dictionary(Of String, Object)()
        End Sub

        Public Sub New(ByVal source As IDictionary(Of String, Object))
            data = source
        End Sub

        Public Overrides Function GetDynamicMemberNames() As IEnumerable(Of String)
            Return data.Keys
        End Function

        Public Overrides Function TryGetMember(ByVal binder As GetMemberBinder, <Out> ByRef result As Object) As Boolean
            result = Me(binder.Name)
            Return True
        End Function

        Public Overrides Function TrySetMember(ByVal binder As SetMemberBinder, ByVal value As Object) As Boolean
            Me(binder.Name) = value
            Return True
        End Function

        Default Public Property Item(ByVal columnName As String) As Object
            Get

                If data.ContainsKey(columnName) Then
                    Return data(columnName)
                End If

                Return Nothing
            End Get
            Set(ByVal value As Object)

                If Not data.ContainsKey(columnName) Then
                    data.Add(columnName, value)
                    OnPropertyChanged(columnName)
                Else

                    If data(columnName) <> value Then
                        data(columnName) = value
                        OnPropertyChanged(columnName)
                    End If
                End If
            End Set
        End Property

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Public Event PropertyChanged As PropertyChangedEventHandler
    End Class
End Namespace

EndOf_DataSources\MyDataRow.vb
StartOf_DataSources\MyModel.vb
Imports System.Collections.ObjectModel
Imports System.Linq
Imports Telerik.Windows.Controls
Imports System.Collections.Generic
Imports System
Imports System.Windows.Data
Imports Telerik.Windows.Data
Imports System.ComponentModel
Imports System.Xml.Linq
Imports System.Xml

Namespace Telerik.Windows.Examples.GridView.DataSources
    Public Class MyModel
        Inherits ViewModelBase

        Private ReadOnly northwind As Northwind

        Public Sub New()
            Me.northwind = New Northwind()
        End Sub

        Private _data As Object

        Public Property Data As Object
            Get

                If _data Is Nothing Then
                    _data = GetData()
                End If

                Return _data
            End Get
        End Property

        Private _type As EnumMemberViewModel

        Public Property Type As EnumMemberViewModel
            Get
                Return _type
            End Get
            Set(ByVal value As EnumMemberViewModel)

                If Not Object.Equals(_type, value) Then
                    _type = value
                    _data = Nothing
                    OnPropertyChanged("Type")
                    OnPropertyChanged("Data")
                End If
            End Set
        End Property

        Private Function GetData() As Object
            If Type Is Nothing Then Return Nothing

            Select Case CType(Type.Value, BindingType)
                Case BindingType.ObservableCollection
                    Return Me.northwind.CustomersCollection
                Case BindingType.ICollectionView
                    Dim cvs = New CollectionViewSource()
                    cvs.Source = Me.northwind.Order_DetailsCollection
                    Return cvs.View
                Case BindingType.DynamicData
                    Dim data = New ObservableCollection(Of MyDataRow)()

                    For i As Integer = 0 To 100 - 1
                        Dim row = New MyDataRow()

                        For j As Integer = 0 To 10 - 1
                            row(String.Format("Column{0}", j)) = String.Format("Cell {0} {1}", i, j)
                        Next

                        data.Add(row)
                    Next

                    Return data
                Case BindingType.DataTable
                    Return GetDataTable()
                Case BindingType.Xml
                    Return GetXmlData()
            End Select

            Return Nothing
        End Function

        Private _bindingTypes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property BindingTypes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _bindingTypes Is Nothing Then
                    _bindingTypes = Telerik.Windows.Data.EnumDataSource.FromType(Of BindingType)()
                    Type = _bindingTypes.FirstOrDefault()
                End If

                Return _bindingTypes
            End Get
        End Property

        Private Shared Function GetDataTable() As System.Data.DataTable
            Dim tableCustomers = New System.Data.DataTable()
            tableCustomers.Columns.Add(New System.Data.DataColumn("CustomerID", GetType(String)))
            tableCustomers.Columns.Add(New System.Data.DataColumn("CompanyName", GetType(String)))
            tableCustomers.Columns.Add(New System.Data.DataColumn("ContactName", GetType(String)))
            tableCustomers.Columns.Add(New System.Data.DataColumn("City", GetType(String)))
            tableCustomers.Columns.Add(New System.Data.DataColumn("Country", GetType(String)))

            For Each c As Customers In New Northwind().CustomersCollection
                Dim row = tableCustomers.NewRow()
                row("CustomerID") = c.CustomerID
                row("CompanyName") = c.CompanyName
                row("ContactName") = c.ContactName
                row("City") = c.City
                row("Country") = c.Country
                tableCustomers.Rows.Add(row)
            Next

            Return tableCustomers
        End Function

        Private Shared Function GetXmlData() As Object
            Dim doc = XDocument.Parse("<?xml version=""1.0"" encoding=""utf-8"" ?>
<Products>
  <Product>
    <ID>1</ID>
    <Name>ASP.NET</Name>
    <Url>http://www.telerik.com/products/aspnet-ajax.aspx</Url>
  </Product>
  <Product>
    <ID>2</ID>
    <Name>WinForms</Name>
    <Url>http://www.telerik.com/products/winforms.aspx</Url>
  </Product>
  <Product>
    <ID>3</ID>
    <Name>Silverlight</Name>
    <Url>http://www.telerik.com/products/silverlight.aspx</Url>
  </Product>
  <Product>
    <ID>4</ID>
    <Name>WPF</Name>
    <Url>http://www.telerik.com/products/wpf.aspx</Url>
  </Product>
  <Product>
    <ID>5</ID>
    <Name>Reporting</Name>
    <Url>http://www.telerik.com/products/reporting.aspx</Url>
  </Product>
  <Product>
    <ID>6</ID>
    <Name>Sitefinity ASP.NET CMS</Name>
    <Url>http://www.telerik.com/products/sitefinity.aspx</Url>
  </Product>
  <Product>
    <ID>7</ID>
    <Name>OpenAccess ORM</Name>
    <Url>http://www.telerik.com/products/orm.aspx</Url>
  </Product>
</Products>
")
            Return New ObservableCollection(Of dynamic)(From element In doc.Descendants("Product") Select New MyDataRow(ToDictionary(element)))
        End Function

        Public Shared Function ToDictionary(ByVal element As XElement) As IDictionary(Of String, Object)
            Dim dict = New Dictionary(Of String, Object)()

            For Each e In element.Elements()
                dict.Add(e.Name.LocalName, e.Value)
            Next

            Return dict
        End Function
    End Class

    Public Enum BindingType
        <Description("Dynamic Data")>
        DynamicData <Description("ObservableCollection")>
        ObservableCollection <Description("ICollectionView")>
        ICollectionView <Description("Xml")>
        Xml <Description("Data Table")>
        DataTable
    End Enum
End Namespace

EndOf_DataSources\MyModel.vb
StartOf_Disabled\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Disabled
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Disabled\Example.xaml.vb
StartOf_EnumDataSource\Country.vb
Imports System
Imports System.Linq
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.EnumDataSource
    Public Enum Country
        <Description("United Kingdom")>
        GBR <Description("Spain")>
        ESP <Description("Netherlands")>
        NLD <Description("Czech Republic")>
        CZE <Description("France")>
        FRA
    End Enum
End Namespace

EndOf_EnumDataSource\Country.vb
StartOf_EnumDataSource\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.EnumDataSource
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_EnumDataSource\Example.xaml.vb
StartOf_EnumDataSource\MyDataContext.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Data
Imports System.Collections

Namespace Telerik.Windows.Examples.GridView.EnumDataSource
    Public Class MyDataContext
        Inherits ViewModelBase

        Public Sub New()
            Data = AllPlayers
            SelectedItem = Countries.FirstOrDefault()
        End Sub

        Private _countries As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property Countries As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _countries Is Nothing Then
                    _countries = Telerik.Windows.Data.EnumDataSource.FromType(Of Country)()
                End If

                Return _countries
            End Get
        End Property

        Private _positions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property Positions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _positions Is Nothing Then
                    _positions = Telerik.Windows.Data.EnumDataSource.FromType(Of Position)()
                End If

                Return _positions
            End Get
        End Property

        Private _allPlayers As IList(Of Player)

        Public Property AllPlayers As IEnumerable(Of Player)
            Get

                If Me._allPlayers Is Nothing Then
                    Me._allPlayers = New List(Of Player)()
                    Me._allPlayers.Add(New Player("Pepe Reina", Position.GK, Country.ESP))
                    Me._allPlayers.Add(New Player("Jamie Carragher", Position.DF, Country.GBR))
                    Me._allPlayers.Add(New Player("Steven Gerrard", Position.MF, Country.GBR))
                    Me._allPlayers.Add(New Player("Fernando Torres", Position.FW, Country.ESP))
                    Me._allPlayers.Add(New Player("Edwin van der Sar", Position.GK, Country.NLD))
                    Me._allPlayers.Add(New Player("Rio Ferdinand", Position.DF, Country.GBR))
                    Me._allPlayers.Add(New Player("Ryan Giggs", Position.MF, Country.GBR))
                    Me._allPlayers.Add(New Player("Wayne Rooney", Position.FW, Country.GBR))
                    Me._allPlayers.Add(New Player("Petr Čech", Position.GK, Country.CZE))
                    Me._allPlayers.Add(New Player("John Terry", Position.DF, Country.GBR))
                    Me._allPlayers.Add(New Player("Frank Lampard", Position.MF, Country.GBR))
                    Me._allPlayers.Add(New Player("Nicolas Anelka", Position.FW, Country.FRA))
                    Me._allPlayers.Add(New Player("Manuel Almunia", Position.GK, Country.ESP))
                    Me._allPlayers.Add(New Player("Gaël Clichy", Position.DF, Country.FRA))
                    Me._allPlayers.Add(New Player("Cesc Fàbregas", Position.MF, Country.ESP))
                    Me._allPlayers.Add(New Player("Robin van Persie", Position.FW, Country.NLD))
                End If

                Return Me._allPlayers
            End Get
        End Property

        Private _data As IEnumerable

        Public Property Data As IEnumerable
            Get
                Return _data
            End Get
            Set(ByVal value As IEnumerable)

                If _data <> value Then
                    _data = value
                    OnPropertyChanged("Data")
                End If
            End Set
        End Property

        Private _selectedItem As EnumMemberViewModel

        Public Property SelectedItem As EnumMemberViewModel
            Get
                Return _selectedItem
            End Get
            Set(ByVal value As EnumMemberViewModel)

                If _selectedItem <> value Then
                    _selectedItem = value
                    OnPropertyChanged("SelectedItem")

                    If _selectedItem IsNot Nothing Then
                        Dim selectedCountry As Country = CType(_selectedItem.Value, Country)
                        Dim players As List(Of Player) = New List(Of Player)()

                        For Each p As Player In Me.AllPlayers

                            If p.Country = selectedCountry Then
                                players.Add(p)
                            End If
                        Next

                        Data = players
                    Else
                        Data = Nothing
                    End If
                End If
            End Set
        End Property
    End Class
End Namespace

EndOf_EnumDataSource\MyDataContext.vb
StartOf_EnumDataSource\Player.vb
Imports System
Imports System.Linq
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.EnumDataSource
    Public Class Player
        Implements INotifyPropertyChanged

        Public Event PropertyChanged As PropertyChangedEventHandler
        Private name As String
        Private position As Position
        Private country As Country

        Public Property Name As String
            Get
                Return Me.name
            End Get
            Set(ByVal value As String)

                If value <> Me.name Then
                    Me.name = value
                    Me.OnPropertyChanged("Name")
                End If
            End Set
        End Property

        Public Property Position As Position
            Get
                Return Me.position
            End Get
            Set(ByVal value As Position)

                If value <> Me.position Then
                    Me.position = value
                    Me.OnPropertyChanged("Position")
                End If
            End Set
        End Property

        Public Property Country As Country
            Get
                Return Me.country
            End Get
            Set(ByVal value As Country)

                If value <> Me.country Then
                    Me.country = value
                    Me.OnPropertyChanged("Country")
                End If
            End Set
        End Property

        Public Sub New(ByVal name As String, ByVal position As Position, ByVal country As Country)
            Me.name = name
            Me.position = position
            Me.country = country
        End Sub

        Protected Overridable Sub OnPropertyChanged(ByVal args As PropertyChangedEventArgs)
            RaiseEvent PropertyChanged(Me, args)
        End Sub

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            Me.OnPropertyChanged(New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace

EndOf_EnumDataSource\Player.vb
StartOf_EnumDataSource\Position.vb
Imports System
Imports System.Linq
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.EnumDataSource
    Public Enum Position
        <Description("Goalkeeper")>
        GK <Description("Defender")>
        DF <Description("Midfield")>
        MF <Description("Forward")>
        FW
    End Enum
End Namespace

EndOf_EnumDataSource\Position.vb
StartOf_Exporting\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Exporting
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Exporting\Example.xaml.vb
StartOf_Exporting\ExportingModel.vb
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports Telerik.Windows.Controls
Imports System.Windows.Media
Imports Telerik.Windows.Data
Imports System.IO
Imports System.Windows
Imports System
Imports System.Windows.Input
Imports Microsoft.Win32

Namespace Telerik.Windows.Examples.GridView.Exporting
    Public Class ExportCommand
        Implements ICommand

        Private ReadOnly model As ExportingModel

        Public Sub New(ByVal model As ExportingModel)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            Me.model.Export(parameter)
        End Sub
    End Class

    Public Class ExportingModel
        Inherits ViewModelBase

        Public Sub New()
            Me.ExportCommand = New ExportCommand(Me)
        End Sub

        Private exportCommand As ExportCommand = Nothing

        Public Property ExportCommand As ExportCommand
            Get
                Return Me.exportCommand
            End Get
            Set(ByVal value As ExportCommand)

                If Me.exportCommand <> value Then
                    Me.exportCommand = value
                    OnPropertyChanged("ExportCommand")
                End If
            End Set
        End Property

        Public Sub Export(ByVal parameter As Object)
            Dim grid = TryCast(parameter, RadGridView)

            If grid IsNot Nothing Then
                grid.ElementExporting -= AddressOf Me.ElementExporting
                grid.ElementExporting += AddressOf Me.ElementExporting
                Dim extension As String = ""
                Dim format = ExportFormat.Html

                Select Case SelectedExportFormat
                    Case "Excel"
                        extension = "xls"
                        format = ExportFormat.Html
                    Case "ExcelML"
                        extension = "xml"
                        format = ExportFormat.ExcelML
                    Case "Word"
                        extension = "doc"
                        format = ExportFormat.Html
                    Case "Csv"
                        extension = "csv"
                        format = ExportFormat.Csv
                End Select

                Dim dialog = New SaveFileDialog()
                dialog.DefaultExt = extension
                dialog.Filter = String.Format("{1} files (*.{0})|*.{0}|All files (*.*)|*.*", extension, SelectedExportFormat)
                dialog.FilterIndex = 1

                If dialog.ShowDialog() = True Then

                    Using stream = dialog.OpenFile()
                        Dim exportOptions = New GridViewExportOptions()
                        exportOptions.Format = format
                        exportOptions.ShowColumnFooters = True
                        exportOptions.ShowColumnHeaders = True
                        exportOptions.ShowGroupFooters = True
                        exportOptions.Encoding = Encoding.Unicode
                        grid.Export(stream, exportOptions)
                    End Using
                End If
            End If
        End Sub

        Private exportFormats As IEnumerable(Of String)

        Public Property ExportFormats As IEnumerable(Of String)
            Get

                If exportFormats Is Nothing Then
                    exportFormats = New String() {"Excel", "ExcelML", "Word", "Csv"}
                End If

                Return exportFormats
            End Get
        End Property

        Private selectedExportFormat As String

        Public Property SelectedExportFormat As String
            Get
                Return selectedExportFormat
            End Get
            Set(ByVal value As String)

                If Not Object.Equals(selectedExportFormat, value) Then
                    selectedExportFormat = value
                    OnPropertyChanged("SelectedExportFormat")
                End If
            End Set
        End Property

        Private Sub ElementExporting(ByVal sender As Object, ByVal e As GridViewElementExportingEventArgs)
            Dim htmlVisualExportParameters = TryCast(e.VisualParameters, GridViewHtmlVisualExportParameters)

            If htmlVisualExportParameters IsNot Nothing Then

                If e.Element = ExportElement.HeaderRow OrElse e.Element = ExportElement.FooterRow OrElse e.Element = ExportElement.GroupFooterRow Then
                    htmlVisualExportParameters.Background = HeaderBackground
                    htmlVisualExportParameters.Foreground = HeaderForeground
                    htmlVisualExportParameters.FontSize = 20
                    htmlVisualExportParameters.FontWeight = FontWeights.Bold
                ElseIf e.Element = ExportElement.Row Then
                    htmlVisualExportParameters.Background = RowBackground
                    htmlVisualExportParameters.Foreground = RowForeground
                ElseIf e.Element = ExportElement.Cell AndAlso e.Value IsNot Nothing AndAlso e.Value.Equals("Chocolade") Then
                    htmlVisualExportParameters.FontFamily = New FontFamily("Verdana")
                    htmlVisualExportParameters.Background = Colors.LightGray
                    htmlVisualExportParameters.Foreground = Colors.Blue
                ElseIf e.Element = ExportElement.GroupHeaderRow Then
                    htmlVisualExportParameters.FontFamily = New FontFamily("Verdana")
                    htmlVisualExportParameters.Background = Colors.LightGray
                    htmlVisualExportParameters.Height = 30
                ElseIf e.Element = ExportElement.GroupHeaderCell AndAlso e.Value IsNot Nothing AndAlso e.Value.Equals("Chocolade") Then
                    e.Value = "MyNewValue"
                End If
            End If
        End Sub

        Private headerBackground As Color = Colors.LightGray

        Public Property HeaderBackground As Color
            Get
                Return Me.headerBackground
            End Get
            Set(ByVal value As Color)

                If Me.headerBackground <> value Then
                    Me.headerBackground = value
                    OnPropertyChanged("HeaderBackground")
                End If
            End Set
        End Property

        Private rowBackground As Color = Colors.White

        Public Property RowBackground As Color
            Get
                Return Me.rowBackground
            End Get
            Set(ByVal value As Color)

                If Me.rowBackground <> value Then
                    Me.rowBackground = value
                    OnPropertyChanged("RowBackground")
                End If
            End Set
        End Property

        Private headerForeground As Color = Colors.Black

        Public Property HeaderForeground As Color
            Get
                Return Me.headerForeground
            End Get
            Set(ByVal value As Color)

                If Me.headerForeground <> value Then
                    Me.headerForeground = value
                    OnPropertyChanged("HeaderForeground")
                End If
            End Set
        End Property

        Private rowForeground As Color = Colors.Black

        Public Property RowForeground As Color
            Get
                Return Me.rowForeground
            End Get
            Set(ByVal value As Color)

                If Me.rowForeground <> value Then
                    Me.rowForeground = value
                    OnPropertyChanged("RowForeground")
                End If
            End Set
        End Property
    End Class
End Namespace

EndOf_Exporting\ExportingModel.vb
StartOf_ExportingExcelML\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ExportingExcelML
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ExportingExcelML\Example.xaml.vb
StartOf_ExportingExcelML\ExportingModel.vb
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Controls
Imports System.Windows.Media
Imports Telerik.Windows.Data
Imports Telerik.Windows.Controls.GridView
Imports System.IO
Imports System.Windows
Imports System
Imports System.Windows.Input
Imports Microsoft.Win32
Imports System.ComponentModel.DataAnnotations

Namespace Telerik.Windows.Examples.GridView.ExportingExcelML
    Public Class ExportCommand
        Implements ICommand

        Private ReadOnly model As ExportingModel

        Public Sub New(ByVal model As ExportingModel)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            Me.model.Export(parameter)
        End Sub
    End Class

    Public Class ExportingModel
        Inherits ViewModelBase

        Public Sub New()
            Me.ExportCommand = New ExportCommand(Me)
            Me.RowHeight = 20
        End Sub

        Public Property RowHeight As Double?
        Private columns As List(Of ColumnModel)

        Public Property Columns As List(Of ColumnModel)
            Get

                If Me.columns Is Nothing Then
                    Me.columns = New List(Of ColumnModel)() From {
                        New ColumnModel("Name"),
                        New ColumnModel("UnitPrice")
                    }
                End If

                Return Me.columns
            End Get
        End Property

        Private exportCommand As ExportCommand = Nothing

        Public Property ExportCommand As ExportCommand
            Get
                Return Me.exportCommand
            End Get
            Set(ByVal value As ExportCommand)

                If Me.exportCommand <> value Then
                    Me.exportCommand = value
                    OnPropertyChanged("ExportCommand")
                End If
            End Set
        End Property

        Private showOptionsCommand As ICommand

        Public Property ShowOptionsCommand As ICommand
            Get

                If Me.showOptionsCommand Is Nothing Then
                    Me.showOptionsCommand = New DelegateCommand(New Action(Of Object)(Sub(o)
                                                                                          Me.ShowOptions(TryCast(o, ColumnModel))
                                                                                      End Sub))
                End If

                Return Me.showOptionsCommand
            End Get
        End Property

        Private Sub ShowOptions(ByVal model As ColumnModel)
            Dim rw As RadWindow = New RadWindow()
            Dim rpg As RadPropertyGrid = New RadPropertyGrid()
            rpg.HorizontalAlignment = HorizontalAlignment.Stretch
            rpg.FieldIndicatorVisibility = Visibility.Collapsed
            rpg.LabelColumnWidth = New GridLength(110)
            rpg.DescriptionPanelVisibility = Visibility.Collapsed
            rpg.SortAndGroupButtonsVisibility = Visibility.Collapsed
            rpg.SearchBoxVisibility = Visibility.Collapsed
            rpg.Item = model
            rw.Content = rpg
            rw.WindowStartupLocation = WindowStartupLocation.CenterScreen
            rw.Header = "Export options"
            rw.Width = 500
            rw.Height = 450
            rw.Padding = New Thickness(3)
            rw.ShowDialog()
        End Sub

        Public Sub Export(ByVal parameter As Object)
            Dim grid = TryCast(parameter, RadGridView)

            If grid IsNot Nothing Then
                grid.InitializingExcelMLStyles -= AddressOf InitializingExcelMLStyles
                grid.InitializingExcelMLStyles += AddressOf InitializingExcelMLStyles
                grid.ElementExporting -= AddressOf Me.ElementExporting
                grid.ElementExporting += AddressOf Me.ElementExporting
                Dim extension As String = "xls"
                Dim format = ExportFormat.ExcelML
                Dim dialog = New SaveFileDialog()
                dialog.DefaultExt = extension
                dialog.Filter = String.Format("Excel files (*.{0})|*.{0}|All files (*.*)|*.*", extension)
                dialog.FilterIndex = 1

                If dialog.ShowDialog() = True Then

                    Using stream = dialog.OpenFile()
                        Dim exportOptions = New GridViewExportOptions()
                        exportOptions.Format = format
                        exportOptions.ShowColumnFooters = True
                        exportOptions.ShowColumnHeaders = True
                        exportOptions.ShowGroupFooters = True
                        grid.Export(stream, exportOptions)
                    End Using
                End If
            End If
        End Sub

        Private Sub InitializingExcelMLStyles(ByVal sender As Object, ByVal e As ExcelMLStylesEventArgs)
            For Each column In Columns
                Dim style As ExcelMLStyle = New ExcelMLStyle(column.ColumnName)

                If column.Bold IsNot Nothing Then
                    style.Font.Bold = column.Bold.Value
                End If

                If column.DataFormat IsNot Nothing Then
                    style.NumberFormat.Format = column.DataFormat
                End If

                If column.Font IsNot Nothing Then
                    style.Font.FontName = column.Font.Value.ToString()
                End If

                If column.FontColor IsNot Nothing Then
                    style.Font.Color = String.Format("#{0}", column.FontColor.ToString().Substring(3, 6))
                End If

                If column.HorizontalAlignment IsNot Nothing Then
                    style.Alignment.Horizontal = column.HorizontalAlignment.Value
                End If

                If column.Indent IsNot Nothing Then
                    style.Alignment.Indent = column.Indent.Value
                End If

                If column.InteriorColor IsNot Nothing Then
                    style.Interior.Color = String.Format("#{0}", column.InteriorColor.ToString().Substring(3, 6))
                End If

                If column.InteriorPattern IsNot Nothing Then
                    style.Interior.Pattern = column.InteriorPattern.Value
                End If

                If column.Italic IsNot Nothing Then
                    style.Font.Italic = column.Italic.Value
                End If

                If column.PatternColor IsNot Nothing Then
                    style.Interior.PatternColor = String.Format("#{0}", column.PatternColor.ToString().Substring(3, 6))
                End If

                If column.Rotate IsNot Nothing Then
                    style.Alignment.Rotate = column.Rotate.Value
                End If

                If column.ShrinkToFit IsNot Nothing Then
                    style.Alignment.ShrinkToFit = column.ShrinkToFit.Value
                End If

                If column.FontSize IsNot Nothing Then
                    style.Font.Size = column.FontSize.Value
                End If

                If column.VerticalAlginment IsNot Nothing Then
                    style.Alignment.Vertical = column.VerticalAlginment.Value
                End If

                e.Styles.Add(style)
            Next
        End Sub

        Private Sub ElementExporting(ByVal sender As Object, ByVal e As GridViewElementExportingEventArgs)
            Dim visParameters = TryCast(e.VisualParameters, GridViewExcelMLVisualExportParameters)

            If e.Element = ExportElement.Row Then
                visParameters.RowHeight = Me.RowHeight
            End If

            If e.Element = ExportElement.Cell AndAlso (TryCast(e.Context, GridViewBoundColumnBase)).UniqueName = "Name" Then
                visParameters.StyleId = "Name"
            End If

            If e.Element = ExportElement.Cell AndAlso (TryCast(e.Context, GridViewBoundColumnBase)).UniqueName = "UnitPrice" Then
                visParameters.StyleId = "UnitPrice"
            End If
        End Sub
    End Class

    Public Class ColumnModel
        Public Sub New(ByVal columnName As String)
            Me.ColumnName = columnName
            Me.FontSize = 11
            Me.Font = ExportFont.Calibri
            Me.FontColor = Colors.Black
            Me.InteriorColor = Colors.White
            Me.InteriorPattern = ExcelMLPattern.Solid
        End Sub

        <Display(Name:="Column name")>
        Public Property ColumnName As String <Display(Name:="Horizontal align.")>
        Public Property HorizontalAlignment As ExcelMLHorizontalAlignment? <Display(Name:="Vertical align.")>
        Public Property VerticalAlginment As ExcelMLVerticalAlignment? <Display(Name:="Shrink to fit")>
        Public Property ShrinkToFit As Boolean?
        Public Property Indent As Integer?
        Public Property Rotate As Integer?
        Public Property Bold As Boolean? <Display(Name:="Display color")>
        Public Property FontColor As Color
        Public Property Italic As Boolean? <Display(Name:="Font size")>
        Public Property FontSize As Integer?
        Public Property Font As ExportFont? <Display(Name:="Interior color")>
        Public Property InteriorColor As Color <Display(Name:="Interior pattern")>
        Public Property InteriorPattern As ExcelMLPattern? <Display(Name:="Pattern color")>
        Public Property PatternColor As Color <Display(Name:="Data format")>
        Public Property DataFormat As String

        Public Overrides Function ToString() As String
            Return Me.ColumnName
        End Function

        Private Shared fonts As IEnumerable(Of EnumMemberViewModel)

        Public Shared Property Fonts As IEnumerable(Of EnumMemberViewModel)
            Get

                If fonts Is Nothing Then
                    fonts = Telerik.Windows.Data.EnumDataSource.FromType(GetType(ExportFont))
                End If

                Return fonts
            End Get
        End Property
    End Class

    Public Enum ExportFont
        Tahoma
        Arial
        Calibri
        Verdana
    End Enum
End Namespace

EndOf_ExportingExcelML\ExportingModel.vb
StartOf_ExportingRowDetails\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ExportingRowDetails
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ExportingRowDetails\Example.xaml.vb
StartOf_ExportingRowDetails\ExportingModel.vb
Imports Microsoft.Win32
Imports System
Imports System.IO
Imports System.Windows
Imports System.Windows.Input
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.ExportingRowDetails
    Public Class ExportCommand
        Implements ICommand

        Private ReadOnly model As ExportingModel

        Public Sub New(ByVal model As ExportingModel)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            Me.model.Export(parameter)
        End Sub
    End Class

    Public Class ExportingModel
        Inherits ViewModelBase

        Public Sub New()
            Me.ExportCommand = New ExportCommand(Me)
        End Sub

        Private _exportCommand As ExportCommand = Nothing

        Public Property ExportCommand As ExportCommand
            Get
                Return Me._exportCommand
            End Get
            Set(ByVal value As ExportCommand)

                If Me._exportCommand <> value Then
                    Me._exportCommand = value
                    OnPropertyChanged("ExportCommand")
                End If
            End Set
        End Property

        Public Sub Export(ByVal parameter As Object)
            Dim grid As RadGridView = TryCast(parameter, RadGridView)

            If grid IsNot Nothing Then
                grid.ElementExporting -= AddressOf Me.ElementExporting
                grid.ElementExporting += AddressOf Me.ElementExporting
                grid.ElementExported -= AddressOf Me.ElementExported
                grid.ElementExported += AddressOf Me.ElementExported
                Dim extension As String = "xls"
                Dim format As ExportFormat = ExportFormat.Html
                Dim dialog As SaveFileDialog = New SaveFileDialog()
                dialog.DefaultExt = extension
                dialog.Filter = String.Format("{1} files (*.{0})|*.{0}|All files (*.*)|*.*", extension, "Excel")
                dialog.FilterIndex = 1

                If dialog.ShowDialog() = True Then

                    Using stream As Stream = dialog.OpenFile()
                        Dim options As GridViewExportOptions = New GridViewExportOptions()
                        options.Format = format
                        options.ShowColumnHeaders = True
                        options.Encoding = System.Text.Encoding.UTF8
                        grid.Export(stream, options)
                    End Using
                End If
            End If
        End Sub

        Private Sub ElementExporting(ByVal sender As Object, ByVal e As GridViewElementExportingEventArgs)
            If e.Element = ExportElement.HeaderRow Then
                Dim htmlVisualExportParameters = TryCast(e.VisualParameters, GridViewHtmlVisualExportParameters)

                If htmlVisualExportParameters IsNot Nothing Then
                    htmlVisualExportParameters.FontWeight = FontWeights.Bold
                End If
            End If
        End Sub

        Private Sub ElementExported(ByVal sender As Object, ByVal e As GridViewElementExportedEventArgs)
            If e.Element = ExportElement.Row Then
                Dim obj As Employee = TryCast(e.Context, Employee)

                If obj IsNot Nothing Then
                    e.Writer.Write("<tr><td style=""background-color:#CCC;"" colspan=""{0}"">", (CType(sender, RadGridView)).Columns.Count)
                    e.Writer.Write("<b>Birth date:</b> {0} <br />", obj.BirthDate)
                    e.Writer.Write("<b>Hire date:</b> {0} <br />", obj.HireDate)
                    e.Writer.Write("<b>Address:</b> {0} <br />", obj.Address)
                    e.Writer.Write("<b>City:</b> {0} <br />", obj.City)
                    e.Writer.Write("<b>Notes:</b> {0} <br />", obj.Notes)
                    e.Writer.Write("</td></tr>")
                End If
            End If
        End Sub
    End Class
End Namespace

EndOf_ExportingRowDetails\ExportingModel.vb
StartOf_ExportToDocument\Example.xaml.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data
Imports System.Windows.Documents
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Imaging
Imports System.Windows.Navigation
Imports System.Windows.Shapes

Namespace Telerik.Windows.Examples.GridView.ExportToDocument
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ExportToDocument\Example.xaml.vb
StartOf_ExportToDocument\ExampleViewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Input
Imports System.Windows.Media
Imports Telerik.Windows.Controls
Imports SaveFileDialog = Microsoft.Win32.SaveFileDialog

Namespace Telerik.Windows.Examples.GridView.ExportToDocument
    Public Class ExampleViewModel
        Inherits ViewModelBase

        Private Shared ReadOnly DefaultHeaderRowColor As Color = Color.FromArgb(255, 127, 127, 127)
        Private Shared ReadOnly DefaultGroupHeaderRowColor As Color = Color.FromArgb(255, 216, 216, 216)
        Private Shared ReadOnly DefaultDataRowColor As Color = Color.FromArgb(255, 251, 247, 255)
        Private exportCommand As ICommand = Nothing
        Private exportDefaultStylesCommand As ICommand = Nothing
        Private headerBackground As Color
        Private rowBackground As Color
        Private groupHeaderBackground As Color
        Private selectedExportFormat As String

        Public Property ExportCommand As ICommand
            Get
                Return Me.exportCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.exportCommand <> value Then
                    Me.exportCommand = value
                    OnPropertyChanged("ExportCommand")
                End If
            End Set
        End Property

        Public Property ExportDefaultStylesCommand As ICommand
            Get
                Return Me.exportDefaultStylesCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.exportDefaultStylesCommand <> value Then
                    Me.exportDefaultStylesCommand = value
                    OnPropertyChanged("ExportDefaultStylesCommand")
                End If
            End Set
        End Property

        Public Property HeaderBackground As Color
            Get
                Return Me.headerBackground
            End Get
            Set(ByVal value As Color)

                If Me.headerBackground <> value Then
                    Me.headerBackground = value
                    OnPropertyChanged("HeaderBackground")
                End If
            End Set
        End Property

        Public Property RowBackground As Color
            Get
                Return Me.rowBackground
            End Get
            Set(ByVal value As Color)

                If Me.rowBackground <> value Then
                    Me.rowBackground = value
                    OnPropertyChanged("RowBackground")
                End If
            End Set
        End Property

        Public Property GroupHeaderBackground As Color
            Get
                Return Me.groupHeaderBackground
            End Get
            Set(ByVal value As Color)

                If Me.groupHeaderBackground <> value Then
                    Me.groupHeaderBackground = value
                    OnPropertyChanged("GroupHeaderBackground")
                End If
            End Set
        End Property

        Private exportFormats As IEnumerable(Of String)

        Public Property ExportFormats As IEnumerable(Of String)
            Get

                If exportFormats Is Nothing Then
                    exportFormats = New String() {"xlsx", "pdf"}
                End If

                Return exportFormats
            End Get
        End Property

        Public Property SelectedExportFormat As String
            Get
                Return selectedExportFormat
            End Get
            Set(ByVal value As String)

                If Not Object.Equals(selectedExportFormat, value) Then
                    selectedExportFormat = value
                    OnPropertyChanged("SelectedExportFormat")
                End If
            End Set
        End Property

        Public Sub New()
            Me.SelectedExportFormat = Me.ExportFormats.FirstOrDefault()
            Me.ExportCommand = New DelegateCommand(AddressOf Me.Export)
            Me.ExportDefaultStylesCommand = New DelegateCommand(AddressOf Me.ExportDefaultStyles)
            Me.HeaderBackground = DefaultHeaderRowColor
            Me.RowBackground = DefaultDataRowColor
            Me.GroupHeaderBackground = DefaultGroupHeaderRowColor
        End Sub

        Private Sub Export(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)
            Dim dialog = New SaveFileDialog() With {
                .DefaultExt = Me.SelectedExportFormat,
                .Filter = String.Format("(*.{0})|*.{1}", Me.SelectedExportFormat, Me.SelectedExportFormat)
            }

            If dialog.ShowDialog() = True Then

                Using stream = dialog.OpenFile()

                    Select Case Me.SelectedExportFormat
                        Case "xlsx"
                            grid.ExportToXlsx(stream)
                        Case "pdf"
                            grid.ExportToPdf(stream)
                    End Select
                End Using
            End If
        End Sub

        Private Sub ExportDefaultStyles(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)
            Dim exportOptions = New GridViewDocumentExportOptions() With {
                .ExportDefaultStyles = True,
                .ShowColumnFooters = grid.ShowColumnFooters,
                .ShowColumnHeaders = grid.ShowColumnHeaders,
                .ShowGroupFooters = grid.ShowGroupFooters
            }
            Dim dialog = New SaveFileDialog() With {
                .DefaultExt = Me.SelectedExportFormat,
                .Filter = String.Format("(*.{0})|*.{1}", Me.SelectedExportFormat, Me.SelectedExportFormat)
            }

            If dialog.ShowDialog() = True Then

                Using stream = dialog.OpenFile()

                    Select Case Me.SelectedExportFormat
                        Case "xlsx"
                            grid.ExportToXlsx(stream, exportOptions)
                        Case "pdf"
                            grid.ExportToPdf(stream, exportOptions)
                    End Select
                End Using
            End If
        End Sub
    End Class
End Namespace

EndOf_ExportToDocument\ExampleViewModel.vb
StartOf_ExpressionColumn\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.ExpressionColumn
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_ExpressionColumn\Example.xaml.vb
StartOf_ExpressionColumn\MyTotalFunction.vb
Imports System
Imports System.Linq
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.ExpressionColumn
    Public Class MyTotalFunction
        Inherits AggregateFunction(Of Products, Double)

        Public Sub New()
            Me.AggregationExpression = Function(products) products.Sum(Function(p) p.UnitPrice * p.UnitsInStock)
            Me.ResultFormatString = "Total: {0:C}"
        End Sub
    End Class
End Namespace

EndOf_ExpressionColumn\MyTotalFunction.vb
StartOf_Filtering\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Filtering
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Filtering\Example.xaml.vb
StartOf_Filtering\FilteringModeToCheckBoxVisibilityConverter.vb
Imports System
Imports System.Net
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Documents
Imports System.Windows.Ink
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Animation
Imports System.Windows.Shapes
Imports System.Windows.Data
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Filtering
    Public Class FilteringModeToCheckBoxVisibilityConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            If (CType(value, Telerik.Windows.Controls.GridView.FilteringMode)) = Telerik.Windows.Controls.GridView.FilteringMode.Popup Then
                Return Visibility.Visible
            End If

            Return Visibility.Collapsed
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Filtering\FilteringModeToCheckBoxVisibilityConverter.vb
StartOf_Filtering\MyViewModel.vb
Imports System
Imports System.Collections.Generic
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.Filtering
    Public Class MyViewModel
        Inherits ViewModelBase

        Private filteringModes As IEnumerable(Of EnumMemberViewModel)

        Public Property FilteringModes As IEnumerable(Of EnumMemberViewModel)
            Get

                If Me.filteringModes Is Nothing Then
                    Me.filteringModes = Telerik.Windows.Data.EnumDataSource.FromType(Of Telerik.Windows.Controls.GridView.FilteringMode)()
                End If

                Return Me.filteringModes
            End Get
        End Property
    End Class
End Namespace

EndOf_Filtering\MyViewModel.vb
StartOf_FirstLook\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.FirstLook
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_FirstLook\Example.xaml.vb
StartOf_FirstLook\OrdersView.xaml.vb
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports System.Linq.Expressions
Imports System
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.FirstLook
    Public Partial Class OrdersView
        Inherits UserControl

        Public Sub New()
            InitializeComponent()
            Dim expression As Expression(Of Func(Of Order, Double)) = Function(order) (From orderDetail In order.Details Select orderDetail.Quantity * orderDetail.UnitPrice * (1 - orderDetail.Discount)).Sum()
            Dim column As GridViewExpressionColumn = TryCast(Me.RadGridView1.Columns("TotalValue"), GridViewExpressionColumn)
            column.Expression = expression
        End Sub
    End Class
End Namespace

EndOf_FirstLook\OrdersView.xaml.vb
StartOf_FirstLook\PerformanceChart.xaml.vb
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls.ChartView
Imports Telerik.Charting

Namespace Telerik.Windows.Examples.GridView.FirstLook
    Public Partial Class PerformanceChart
        Inherits UserControl

        Public Sub New()
            InitializeComponent()
            Me.Loaded += New RoutedEventHandler(AddressOf PerformanceChart_Loaded)
        End Sub

        Private Sub PerformanceChart_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            If radChart.DataContext IsNot Nothing Then
                Dim employee As Employee = CType(radChart.DataContext, Employee)

                If radChart.Series.Count = 0 Then
                    radChart.HorizontalAxis = New DateTimeCategoricalAxis() With {
                        .LabelFormat = "dd/MM"
                    }
                    radChart.VerticalAxis = New LinearAxis() With {
                        .LabelFormat = "C0"
                    }
                    Dim orders As IEnumerable(Of Order) = (From o In employee.Orders Order By o.OrderDate Select o).Skip(employee.Orders.Count() - 10)
                    Dim series As BarSeries = New BarSeries()

                    For Each order As Order In orders
                        Dim dataPoint As CategoricalDataPoint = New CategoricalDataPoint()
                        dataPoint.Value = (From orderDetail In order.Details Select orderDetail.Quantity * orderDetail.UnitPrice * (1 - orderDetail.Discount)).Sum()
                        dataPoint.Category = order.OrderDate
                        series.DataPoints.Add(dataPoint)
                    Next

                    radChart.Series.Add(series)
                End If
            End If
        End Sub
    End Class
End Namespace

EndOf_FirstLook\PerformanceChart.xaml.vb
StartOf_FirstLook\RowStyleSelector.vb
Imports System.Linq
Imports System.Windows
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports System.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.FirstLook
    Public Class RowStyleSelector
        Inherits StyleSelector

        Public Overrides Function SelectStyle(ByVal item As Object, ByVal container As DependencyObject) As Style
            If (CType(container, GridViewRow)).GridViewDataControl.Items.IndexOf(item) = 0 Then
                Dim style As Style = New Style(GetType(GridViewRow)) With {
                    .BasedOn = CType(Application.Current.Resources("GridViewRowStyle"), Style)
                }
                Dim setter As Setter = New Setter(GridViewRow.DetailsVisibilityProperty, Visibility.Visible)
                style.Setters.Add(setter)
                Return style
            End If

            Return New Style(GetType(GridViewRow)) With {
                .BasedOn = CType(Application.Current.Resources("GridViewRowStyle"), Style)
            }
        End Function
    End Class
End Namespace

EndOf_FirstLook\RowStyleSelector.vb
StartOf_FrozenColumns\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.FrozenColumns
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_FrozenColumns\Example.xaml.vb
StartOf_GridLines\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.GridLines
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_GridLines\Example.xaml.vb
StartOf_GridLines\MyModel.vb
Imports System.Linq
Imports System.Collections.Generic
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Data
Imports System.Windows.Media

Namespace Telerik.Windows.Examples.GridView.GridLines
    Public Class MyModel
        Inherits ViewModelBase

        Public Sub New()
            HorizontalGridLinesColor = Colors.Black
            VerticalGridLinesColor = Colors.Black
        End Sub

        Private _gridLines As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property GridLines As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _gridLines Is Nothing Then
                    _gridLines = Telerik.Windows.Data.EnumDataSource.FromType(Of GridLinesVisibility)()
                    _selectedItem = _gridLines.FirstOrDefault()
                End If

                Return _gridLines
            End Get
        End Property

        Private _selectedItem As EnumMemberViewModel

        Public Property SelectedItem As EnumMemberViewModel
            Get
                Return _selectedItem
            End Get
            Set(ByVal value As EnumMemberViewModel)

                If _selectedItem <> value Then
                    _selectedItem = value
                    OnPropertyChanged("SelectedItem")
                End If
            End Set
        End Property

        Private _horizontalGridLinesBrush As Brush

        Public Property HorizontalGridLinesBrush As Brush
            Get
                Return _horizontalGridLinesBrush
            End Get
            Set(ByVal value As Brush)

                If _horizontalGridLinesBrush <> value Then
                    _horizontalGridLinesBrush = value
                    OnPropertyChanged("HorizontalGridLinesBrush")
                End If
            End Set
        End Property

        Private _verticalGridLinesBrush As Brush

        Public Property VerticalGridLinesBrush As Brush
            Get
                Return _verticalGridLinesBrush
            End Get
            Set(ByVal value As Brush)

                If _verticalGridLinesBrush <> value Then
                    _verticalGridLinesBrush = value
                    OnPropertyChanged("VerticalGridLinesBrush")
                End If
            End Set
        End Property

        Private _horizontalGridLinesColor As Color

        Public Property HorizontalGridLinesColor As Color
            Get
                Return _horizontalGridLinesColor
            End Get
            Set(ByVal value As Color)

                If _horizontalGridLinesColor <> value Then
                    _horizontalGridLinesColor = value
                    OnPropertyChanged("HorizontalGridLinesColor")
                    HorizontalGridLinesBrush = New SolidColorBrush(_horizontalGridLinesColor)
                End If
            End Set
        End Property

        Private _verticalGridLinesColor As Color

        Public Property VerticalGridLinesColor As Color
            Get
                Return _verticalGridLinesColor
            End Get
            Set(ByVal value As Color)

                If _verticalGridLinesColor <> value Then
                    _verticalGridLinesColor = value
                    OnPropertyChanged("VerticalGridLinesColor")
                    VerticalGridLinesBrush = New SolidColorBrush(_verticalGridLinesColor)
                End If
            End Set
        End Property
    End Class
End Namespace

EndOf_GridLines\MyModel.vb
StartOf_GroupByFormattedValue\ContactTitleConverter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data

Namespace Telerik.Windows.Examples.GridView.GroupByFormattedValue
    Public Class ContactTitleConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim contactTitle As String = TryCast(value, String)

            If contactTitle IsNot Nothing Then

                If contactTitle.Contains("Sales") Then
                    Return "Sales"
                End If

                If contactTitle.Contains("Marketing") Then
                    Return "Marketing"
                End If
            End If

            Return value
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_GroupByFormattedValue\ContactTitleConverter.vb
StartOf_GroupByFormattedValue\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.GroupByFormattedValue
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_GroupByFormattedValue\Example.xaml.vb
StartOf_HeaderContextMenu\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.HeaderContextMenu
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_HeaderContextMenu\Example.xaml.vb
StartOf_HeaderContextMenu\GridViewHeaderMenu.vb
Imports System
Imports System.Linq
Imports System.Windows
Imports System.Windows.Data
Imports System.ComponentModel

Namespace Telerik.Windows.Controls.GridView.HeaderMenu
    Public Class GridViewHeaderMenu
        Private ReadOnly grid As RadGridView = Nothing

        Public Sub New(ByVal grid As RadGridView)
            Me.grid = grid
        End Sub

        Public Shared ReadOnly IsEnabledProperty As DependencyProperty = DependencyProperty.RegisterAttached("IsEnabled", GetType(Boolean), GetType(GridViewHeaderMenu), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnIsEnabledPropertyChanged)))

        Public Shared Sub SetIsEnabled(ByVal dependencyObject As DependencyObject, ByVal enabled As Boolean)
            dependencyObject.SetValue(IsEnabledProperty, enabled)
        End Sub

        Public Shared Function GetIsEnabled(ByVal dependencyObject As DependencyObject) As Boolean
            Return CBool(dependencyObject.GetValue(IsEnabledProperty))
        End Function

        Private Shared Sub OnIsEnabledPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)

            If grid IsNot Nothing Then

                If CBool(e.NewValue) Then
                    Dim menu As GridViewHeaderMenu = New GridViewHeaderMenu(grid)
                    menu.Attach()
                End If
            End If
        End Sub

        Private Sub Attach()
            If grid IsNot Nothing Then
                Dim contextMenu As RadContextMenu = New RadContextMenu()
                StyleManager.SetTheme(contextMenu, StyleManager.GetTheme(grid))
                contextMenu.Opened += AddressOf OnMenuOpened
                contextMenu.ItemClick += AddressOf OnMenuItemClick
                RadContextMenu.SetContextMenu(grid, contextMenu)
            End If
        End Sub

        Private Sub OnMenuOpened(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Dim menu As RadContextMenu = CType(sender, RadContextMenu)
            Dim cell As GridViewHeaderCell = menu.GetClickedElement(Of GridViewHeaderCell)()

            If cell IsNot Nothing Then
                menu.Items.Clear()
                Dim item As RadMenuItem = New RadMenuItem()
                item.Header = String.Format("Sort Ascending by ""{0}""", cell.Column.Header)
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = String.Format("Sort Descending by ""{0}""", cell.Column.Header)
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = String.Format("Clear Sorting by ""{0}""", cell.Column.Header)
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = String.Format("Group by ""{0}""", cell.Column.Header)
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = String.Format("Ungroup ""{0}""", cell.Column.Header)
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = "Choose Columns:"
                menu.Items.Add(item)

                For Each column As GridViewColumn In grid.Columns
                    Dim subMenu As RadMenuItem = New RadMenuItem()
                    subMenu.Header = column.Header
                    subMenu.IsCheckable = True
                    subMenu.IsChecked = True
                    Dim isCheckedBinding As Binding = New Binding("IsVisible")
                    isCheckedBinding.Mode = BindingMode.TwoWay
                    isCheckedBinding.Source = column
                    subMenu.SetBinding(RadMenuItem.IsCheckedProperty, isCheckedBinding)
                    item.Items.Add(subMenu)
                Next
            Else
                menu.IsOpen = False
            End If
        End Sub

        Private Sub OnMenuItemClick(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Dim menu As RadContextMenu = CType(sender, RadContextMenu)
            Dim cell As GridViewHeaderCell = menu.GetClickedElement(Of GridViewHeaderCell)()
            Dim clickedItem As RadMenuItem = TryCast((CType(e, RadRoutedEventArgs)).OriginalSource, RadMenuItem)
            Dim column As GridViewColumn = cell.Column
            If TypeOf clickedItem.Parent Is RadMenuItem Then Return
            Dim header As String = Convert.ToString(clickedItem.Header)

            Using grid.DeferRefresh()
                Dim sd As ColumnSortDescriptor = (From d In grid.SortDescriptors.OfType(Of ColumnSortDescriptor)() Where Object.Equals(d.Column, column) Select d).FirstOrDefault()

                If header.Contains("Sort Ascending") Then

                    If sd IsNot Nothing Then
                        grid.SortDescriptors.Remove(sd)
                    End If

                    Dim newDescriptor As ColumnSortDescriptor = New ColumnSortDescriptor()
                    newDescriptor.Column = column
                    newDescriptor.SortDirection = ListSortDirection.Ascending
                    grid.SortDescriptors.Add(newDescriptor)
                ElseIf header.Contains("Sort Descending") Then

                    If sd IsNot Nothing Then
                        grid.SortDescriptors.Remove(sd)
                    End If

                    Dim newDescriptor As ColumnSortDescriptor = New ColumnSortDescriptor()
                    newDescriptor.Column = column
                    newDescriptor.SortDirection = ListSortDirection.Descending
                    grid.SortDescriptors.Add(newDescriptor)
                ElseIf header.Contains("Clear Sorting") Then

                    If sd IsNot Nothing Then
                        grid.SortDescriptors.Remove(sd)
                    End If
                ElseIf header.Contains("Group by") Then
                    Dim gd As ColumnGroupDescriptor = (From d In grid.GroupDescriptors.OfType(Of ColumnGroupDescriptor)() Where Object.Equals(d.Column, column) Select d).FirstOrDefault()

                    If gd Is Nothing Then
                        Dim newDescriptor As ColumnGroupDescriptor = New ColumnGroupDescriptor()
                        newDescriptor.Column = column
                        newDescriptor.SortDirection = ListSortDirection.Ascending
                        grid.GroupDescriptors.Add(newDescriptor)
                    End If
                ElseIf header.Contains("Ungroup") Then
                    Dim gd As ColumnGroupDescriptor = (From d In grid.GroupDescriptors.OfType(Of ColumnGroupDescriptor)() Where Object.Equals(d.Column, column) Select d).FirstOrDefault()

                    If gd IsNot Nothing Then
                        grid.GroupDescriptors.Remove(gd)
                    End If
                End If
            End Using
        End Sub
    End Class
End Namespace

EndOf_HeaderContextMenu\GridViewHeaderMenu.vb
StartOf_Hierarchy\CustomHierarchy\Commands.vb
Imports System
Imports System.Windows.Input

Namespace Telerik.Windows.Examples.GridView.Hierarchy.CustomHierarchy
    Public Class RemoveChildTableDefinitonsCommand
        Implements ICommand

        Private ReadOnly behavior As ConfigurationPanelBehavior

        Public Sub New(ByVal behavior As ConfigurationPanelBehavior)
            Me.behavior = behavior
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            behavior.RemoveChildTableDefinitions()
        End Sub
    End Class

    Public Class RestoreChildTableDefinitonsCommand
        Implements ICommand

        Private ReadOnly behavior As ConfigurationPanelBehavior

        Public Sub New(ByVal behavior As ConfigurationPanelBehavior)
            Me.behavior = behavior
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            behavior.RestoreChildTableDefinitions()
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\CustomHierarchy\Commands.vb
StartOf_Hierarchy\CustomHierarchy\ConfigurationPanelBehavior.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.Hierarchy.CustomHierarchy
    Public Class ConfigurationPanelBehavior
        Inherits ViewModelBase

        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly controlPanel As FrameworkElement = Nothing
        Private _removeChildTableDefinitionsCommand As RemoveChildTableDefinitonsCommand
        Private _restoreChildTableDefinitionsCommand As RestoreChildTableDefinitonsCommand
        Public Shared ReadOnly ConrolPanelProperty As DependencyProperty = DependencyProperty.RegisterAttached("ControlPanel", GetType(FrameworkElement), GetType(ConfigurationPanelBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnControlPanelPropertyChanged)))

        Public Property RemoveChildTableDefinitionsCommand As RemoveChildTableDefinitonsCommand
            Get
                Return Me._removeChildTableDefinitionsCommand
            End Get
            Set(ByVal value As RemoveChildTableDefinitonsCommand)
                Me._removeChildTableDefinitionsCommand = value
            End Set
        End Property

        Public Property RestoreChildTableDefinitionsCommand As RestoreChildTableDefinitonsCommand
            Get
                Return Me._restoreChildTableDefinitionsCommand
            End Get
            Set(ByVal value As RestoreChildTableDefinitonsCommand)
                Me._restoreChildTableDefinitionsCommand = value
            End Set
        End Property

        Public Shared Sub SetControlPanel(ByVal dependencyObject As DependencyObject, ByVal panel As FrameworkElement)
            dependencyObject.SetValue(ConrolPanelProperty, panel)
        End Sub

        Public Shared Function GetControlPanel(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(ConrolPanelProperty), FrameworkElement)
        End Function

        Public Shared Sub OnControlPanelPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim panel As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If grid IsNot Nothing AndAlso panel IsNot Nothing Then
                Dim behavior As ConfigurationPanelBehavior = New ConfigurationPanelBehavior(grid, panel)
            End If
        End Sub

        Public Sub New(ByVal gridView As RadGridView, ByVal panel As FrameworkElement)
            Me.RemoveChildTableDefinitionsCommand = New RemoveChildTableDefinitonsCommand(Me)
            Me.RestoreChildTableDefinitionsCommand = New RestoreChildTableDefinitonsCommand(Me)
            Me.gridView = gridView
            Me.controlPanel = panel
            Me.gridView.DataLoading += AddressOf Me.gridView_DataLoading
            panel.LayoutUpdated += AddressOf Me.panel_LayoutUpdated
        End Sub

        Private Sub panel_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            If Me.controlPanel IsNot Nothing Then
                Me.controlPanel.DataContext = Me
            End If
        End Sub

        Public Sub RemoveChildTableDefinitions()
            gridView.ChildTableDefinitions.Clear()
        End Sub

        Public Sub RestoreChildTableDefinitions()
            gridView.ChildTableDefinitions.Clear()
            Dim definition As GridViewTableDefinition = New GridViewTableDefinition()
            definition.Relation = New PropertyRelation("Details")
            gridView.ChildTableDefinitions.Add(definition)
        End Sub

        Private Sub gridView_DataLoading(ByVal sender As Object, ByVal e As GridViewDataLoadingEventArgs)
            Dim dataControl As GridViewDataControl = CType(sender, GridViewDataControl)

            If dataControl.ParentRow IsNot Nothing Then
                dataControl.GridLinesVisibility = GridLinesVisibility.None
                dataControl.CanUserFreezeColumns = False
                dataControl.ShowGroupPanel = False
                dataControl.AutoGenerateColumns = False
                Dim column As GridViewDataColumn = New GridViewDataColumn()
                column.Header = "Order ID"
                column.DataMemberBinding = New System.Windows.Data.Binding("OrderID")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.Header = "Product ID"
                column.DataMemberBinding = New System.Windows.Data.Binding("ProductID")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.Header = "Unit Price"
                column.DataFormatString = "{0:c}"
                column.DataMemberBinding = New System.Windows.Data.Binding("UnitPrice")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.Header = "Quantity"
                column.DataMemberBinding = New System.Windows.Data.Binding("Quantity")
                dataControl.Columns.Add(column)
            End If
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\CustomHierarchy\ConfigurationPanelBehavior.vb
StartOf_Hierarchy\CustomHierarchy\Example.xaml.vb
Imports System.Linq
Imports System.Windows
Imports Telerik.Windows.Data
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers
Imports System

Namespace Telerik.Windows.Examples.GridView.Hierarchy.CustomHierarchy
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As EventArgs)
            Me.grid.Resources.MergedDictionaries.Clear()
            Me.grid.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/Hierarchy/CustomHierarchy/CustomHierarchyStyles.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\CustomHierarchy\Example.xaml.vb
StartOf_Hierarchy\HierarchyChildTemplate\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Hierarchy.HierarchyChildTemplate
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\HierarchyChildTemplate\Example.xaml.vb
StartOf_Hierarchy\IsExpanded\Example.xaml.vb
Imports System
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Hierarchy.IsExpanded
    Public Partial Class Example
        Inherits System.Windows.Controls.UserControl

        Public Sub New()
            InitializeComponent()
        End Sub

        Private Sub OnRadGridViewDataLoading(ByVal sender As Object, ByVal e As Controls.GridView.GridViewDataLoadingEventArgs)
            Dim dataControl = CType(sender, GridViewDataControl)

            If dataControl.ParentRow IsNot Nothing Then
                dataControl.RowIndicatorVisibility = System.Windows.Visibility.Hidden
                dataControl.GridLinesVisibility = GridLinesVisibility.None
                dataControl.ShowGroupPanel = False
                dataControl.CanUserFreezeColumns = False
                dataControl.IsReadOnly = True
            End If
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\IsExpanded\Example.xaml.vb
StartOf_Hierarchy\IsExpanded\MyDataContext.vb
Imports System
Imports System.Collections.ObjectModel
Imports System.Linq
Imports System.Windows.Input
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Hierarchy.IsExpanded
    Public Class MyDataContext
        Inherits ViewModelBase

        Private warehouseData As ObservableCollection(Of WarehouseItem)

        Public Sub New()
            Me.ToggleIsExpandedCommand = New DelegateCommand(AddressOf Me.OnToggleIsExpandedCommandExcuted)
            Me.ToggleIsExpandableCommand = New DelegateCommand(AddressOf Me.OnToggleIsExpandableCommandExecuted)
        End Sub

        Public Property ToggleIsExpandedCommand As ICommand
        Public Property ToggleIsExpandableCommand As ICommand

        Public Property WarehouseData As ObservableCollection(Of WarehouseItem)
            Get

                If warehouseData Is Nothing Then
                    warehouseData = New ObservableCollection(Of WarehouseItem)()
                    Dim vegetables = New WarehouseItem("Vegetables", 75)
                    vegetables.Items.Add(New WarehouseItem("Tomato", 40))
                    vegetables.Items.Add(New WarehouseItem("Carrot", 25))
                    vegetables.Items.Add(New WarehouseItem("Onion", 10))
                    warehouseData.Add(vegetables)
                    Dim fruits = New WarehouseItem("Fruits", 55)
                    fruits.Items.Add(New WarehouseItem("Cherry", 30))
                    fruits.Items.Add(New WarehouseItem("Apple", 20))
                    fruits.Items.Add(New WarehouseItem("Melon", 5))
                    warehouseData.Add(fruits)
                    warehouseData.Add(New WarehouseItem("Other", 0, False, False))
                End If

                Return warehouseData
            End Get
        End Property

        Private Sub OnToggleIsExpandedCommandExcuted(ByVal param As Object)
            For Each item In Me.WarehouseData
                item.IsExpanded = CBool(param)
            Next
        End Sub

        Private Sub OnToggleIsExpandableCommandExecuted(ByVal param As Object)
            For Each item In Me.WarehouseData
                item.IsExpandable = CBool(param)
            Next
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\IsExpanded\MyDataContext.vb
StartOf_Hierarchy\IsExpanded\WarehouseItem.vb
Imports System.ComponentModel
Imports System.Collections.ObjectModel
Imports System.ComponentModel.DataAnnotations
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Hierarchy.IsExpanded
    Public Class WarehouseItem
        Inherits ViewModelBase

        Private isExpanded As Boolean
        Private isExpandable As Boolean
        Private name As String
        Private count As Integer

        Public Sub New(ByVal name As String, ByVal count As Integer, ByVal Optional isExpanded As Boolean = True, ByVal Optional isExpandable As Boolean = True)
            Me.Name = name
            Me.Count = count
            Me.IsExpanded = isExpanded
            Me.IsExpandable = isExpandable
            Me.Items = New ObservableCollection(Of WarehouseItem)()
        End Sub

        Public Property Name As String
            Get
                Return Me.name
            End Get
            Set(ByVal value As String)

                If value <> Me.name Then
                    Me.name = value
                    Me.OnPropertyChanged(Function() Me.Name)
                End If
            End Set
        End Property

        <Display(AutoGenerateField:=False)>
        Public Property IsExpanded As Boolean
            Get
                Return Me.isExpanded
            End Get
            Set(ByVal value As Boolean)

                If value <> Me.isExpanded Then
                    Me.isExpanded = value
                    Me.OnPropertyChanged(Function() Me.IsExpanded)
                End If
            End Set
        End Property

        <Display(AutoGenerateField:=False)>
        Public Property IsExpandable As Boolean
            Get
                Return Me.isExpandable
            End Get
            Set(ByVal value As Boolean)

                If Me.isExpandable <> value Then
                    Me.isExpandable = value
                    Me.OnPropertyChanged(Function() Me.IsExpandable)
                End If
            End Set
        End Property

        <Display(AutoGenerateField:=False)>
        Public Property Items As ObservableCollection(Of WarehouseItem)

        Public Property Count As Integer
            Get
                Return Me.count
            End Get
            Set(ByVal value As Integer)

                If value <> Me.count Then
                    Me.count = value
                    Me.OnPropertyChanged(Function() Me.Count)
                End If
            End Set
        End Property

        Public Overrides Function ToString() As String
            Return Me.Name
        End Function
    End Class
End Namespace

EndOf_Hierarchy\IsExpanded\WarehouseItem.vb
StartOf_Hierarchy\SelfReference\Example.xaml.vb
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Data
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports System.Windows

Namespace Telerik.Windows.Examples.GridView.Hierarchy.SelfReference
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub

        Private Sub RadGridView1_RowLoaded(ByVal sender As Object, ByVal e As RowLoadedEventArgs)
            Dim row As GridViewRow = TryCast(e.Row, GridViewRow)
            Dim employee As Employee = TryCast(e.DataElement, Employee)

            If row IsNot Nothing AndAlso employee IsNot Nothing Then
                row.IsExpandable = Me.HasSubordinates(employee)
            End If
        End Sub

        Private Function HasSubordinates(ByVal employee As Employee) As Boolean
            Return (From emp In CType(Me.RadGridView1.ItemsSource, IEnumerable(Of Employee)) Where emp.ReportsTo = employee.EmployeeID Select emp).Any()
        End Function

        Private Sub RadGridView1_DataLoading(ByVal sender As Object, ByVal e As GridViewDataLoadingEventArgs)
            Dim dataControl As GridViewDataControl = CType(sender, GridViewDataControl)

            If dataControl.ParentRow IsNot Nothing Then
                dataControl.GridLinesVisibility = GridLinesVisibility.None
                dataControl.ShowGroupPanel = False
                dataControl.AutoGenerateColumns = False
                dataControl.CanUserFreezeColumns = False
                dataControl.IsReadOnly = True
                dataControl.ChildTableDefinitions.Clear()
                Dim column As GridViewDataColumn = New GridViewDataColumn()
                column.DataMemberBinding = New Binding("EmployeeID")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.DataMemberBinding = New Binding("FirstName")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.DataMemberBinding = New Binding("LastName")
                dataControl.Columns.Add(column)
                column = New GridViewDataColumn()
                column.DataMemberBinding = New Binding("Title")
                dataControl.Columns.Add(column)
            End If
        End Sub
    End Class
End Namespace

EndOf_Hierarchy\SelfReference\Example.xaml.vb
StartOf_IComparable\Example.xaml.vb
Imports System
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.IComparable
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_IComparable\Example.xaml.vb
StartOf_IComparable\MyDataContext.vb
Imports System
Imports System.Collections.ObjectModel
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.IComparable
    Public Class MyDataContext
        Private items As ObservableCollection(Of MyObject)

        Public Property Items As ObservableCollection(Of MyObject)
            Get

                If items Is Nothing Then
                    Dim rnd = New Random()
                    items = New ObservableCollection(Of MyObject)()

                    For i = 0 To 100 - 1
                        Dim obj = New MyObject(rnd) With {
                            .ID = i
                        }
                        Dim complexObject = New MyComplexObject(obj)
                        obj.ComplexObject = complexObject
                        items.Add(obj)
                    Next
                End If

                Return items
            End Get
        End Property
    End Class

    Public Class MyObject
        Inherits MyBusinessObject

        Public Sub New(ByVal random As Random)
        End Sub

        Public Property ComplexObject As MyComplexObject
    End Class

    Public Class MyComplexObject
        Implements IComparable(Of MyComplexObject)

        Private source As MyObject

        Public Sub New(ByVal source As MyObject)
            Me.source = source
        End Sub

        Public Overrides Function ToString() As String
            If Me.source IsNot Nothing Then
                Return String.Format("ID: {0}, Name: {1}", Me.source.ID, Me.source.Name)
            End If

            Return MyBase.ToString()
        End Function

        Public Function CompareTo(ByVal other As MyComplexObject) As Integer
            If Me.source IsNot Nothing AndAlso other IsNot Nothing Then
                Return Me.source.ID.CompareTo(other.source.ID)
            End If

            Return -1
        End Function
    End Class
End Namespace

EndOf_IComparable\MyDataContext.vb
StartOf_Localization\ConfigurationPanelBehavior.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports System.Linq
Imports System.Resources
Imports System.Reflection

Namespace Telerik.Windows.Examples.GridView.Localization
    Public Class ConfigurationPanelBehavior
        Inherits ViewModelBase

        Private gridView As RadGridView = Nothing
        Private ReadOnly controlPanel As FrameworkElement = Nothing
        Private ReadOnly layoutRoot As FrameworkElement = Nothing
        Private ReadOnly _languageChoices As String() = {"English", "German", "French"}
        Private ReadOnly _directionChoices As String() = {"Left to right", "Right to left"}
        Private _currentLanguage As String
        Private _currentDirection As String
        Public Shared ReadOnly ConrolPanelProperty As DependencyProperty = DependencyProperty.RegisterAttached("ControlPanel", GetType(FrameworkElement), GetType(ConfigurationPanelBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnControlPanelPropertyChanged)))

        Public Property CurrentLanguage As String
            Get
                Return Me._currentLanguage
            End Get
            Set(ByVal value As String)

                If Me._currentLanguage <> value AndAlso value IsNot Nothing Then
                    Me._currentLanguage = value
                    OnPropertyChanged("CurrentLanguage")
                    Me.ChangeLanguage(value)
                End If
            End Set
        End Property

        Public Property CurrentDirection As String
            Get
                Return Me._currentDirection
            End Get
            Set(ByVal value As String)

                If Me._currentDirection <> value AndAlso value IsNot Nothing Then
                    Me._currentDirection = value
                    OnPropertyChanged("CurrentDirection")
                    Me.ChangeDirection()
                End If
            End Set
        End Property

        Public Property LanguageChoices As String()
            Get
                Return Me._languageChoices
            End Get
        End Property

        Public Property DirectionChoices As String()
            Get
                Return Me._directionChoices
            End Get
        End Property

        Public Shared Sub SetControlPanel(ByVal dependencyObject As DependencyObject, ByVal panel As FrameworkElement)
            dependencyObject.SetValue(ConrolPanelProperty, panel)
        End Sub

        Public Shared Function GetControlPanel(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(ConrolPanelProperty), FrameworkElement)
        End Function

        Public Shared Sub OnControlPanelPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim layoutRoot As FrameworkElement = TryCast(dependencyObject, FrameworkElement)
            Dim panel As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If layoutRoot IsNot Nothing AndAlso panel IsNot Nothing Then
                Dim behavior As ConfigurationPanelBehavior = New ConfigurationPanelBehavior(layoutRoot, panel)
            End If
        End Sub

        Public Sub New(ByVal layoutRoot As FrameworkElement, ByVal panel As FrameworkElement)
            Me.layoutRoot = layoutRoot
            Me.controlPanel = panel
            Me.CurrentLanguage = Me.LanguageChoices.FirstOrDefault()
            Me.CurrentDirection = Me.DirectionChoices.FirstOrDefault()
            Me.controlPanel.LayoutUpdated += AddressOf Me.controlPanel_LayoutUpdated
        End Sub

        Private Sub controlPanel_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            Me.controlPanel.DataContext = Me
        End Sub

        Private Sub ChangeLanguage(ByVal language As String)
            ChangeLocalization(language)
            Me.LoadGrid()
        End Sub

        Private Sub ChangeLocalization(ByVal localizationName As String)
            Select Case localizationName
                Case "English"
                    LocalizationManager.DefaultResourceManager = New ResourceManager("Telerik.Windows.Examples.GridView.Localization.English", Assembly.GetCallingAssembly())
                Case "German"
                    LocalizationManager.DefaultResourceManager = New ResourceManager("Telerik.Windows.Examples.GridView.Localization.German", Assembly.GetCallingAssembly())
                Case "French"
                    LocalizationManager.DefaultResourceManager = New ResourceManager("Telerik.Windows.Examples.GridView.Localization.French", Assembly.GetCallingAssembly())
                Case Else
            End Select
        End Sub

        Private Sub ChangeDirection()
            Me.SetGridViewFlowDirection()
        End Sub

        Private Sub LoadGrid()
            Me.gridView = New RadGridView()
            Me.gridView.CanUserFreezeColumns = False
            Me.gridView.HorizontalAlignment = HorizontalAlignment.Stretch
            Me.SetGridViewFlowDirection()
            Me.CreateColumns()
            Me.gridView.ItemsSource = New Northwind().CustomersCollection
            (TryCast(Me.layoutRoot, Grid)).Children.Clear()
            (TryCast(Me.layoutRoot, Grid)).Children.Add(gridView)
        End Sub

        Private Sub CreateColumns()
            Me.gridView.AutoGenerateColumns = False
            Me.AddGridViewDataColumn("CustomerID")
            Me.AddGridViewDataColumn("CompanyName")
            Me.AddGridViewDataColumn("ContactName")
            Me.AddGridViewDataColumn("Address")
            Me.AddGridViewDataColumn("City")
            Me.AddGridViewDataColumn("PostalCode")
            Me.AddGridViewDataColumn("Country")
            Me.AddGridViewDataColumn("Phone")
            Me.AddGridViewDataColumn("Fax")
        End Sub

        Private Sub AddGridViewDataColumn(ByVal propertyName As String)
            Dim column As GridViewDataColumn = New GridViewDataColumn()
            column.DataMemberBinding = New System.Windows.Data.Binding(propertyName)
            column.Header = LocalizationManager.GetString(propertyName)
            Me.gridView.Columns.Add(column)
        End Sub

        Private Sub SetGridViewFlowDirection()
            Me.gridView.FlowDirection = Me.GetFlowDirection()
        End Sub

        Private Function GetFlowDirection() As FlowDirection
            If Me.CurrentDirection = "Left to right" Then
                Return FlowDirection.LeftToRight
            End If

            Return FlowDirection.RightToLeft
        End Function
    End Class
End Namespace

EndOf_Localization\ConfigurationPanelBehavior.vb
StartOf_Localization\HandleNavigation\Example.partial.vb
Imports System
Imports System.Reflection
Imports System.Resources
Imports System.Windows.Threading
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.QuickStart.Infrastructure

Namespace Telerik.Windows.Examples.GridView.Localization
    Public Partial Class Example
        Protected Overrides Sub OnInitialized(ByVal e As EventArgs)
            Dispatcher.BeginInvoke(CType((Sub()
                                              NavigationService.Instance.Navigated += AddressOf Instance_Navigated
                                          End Sub), Action))
            MyBase.OnInitialized(e)
        End Sub

        Private Sub Instance_Navigated(ByVal sender As Object, ByVal e As EventArgs)
            LocalizationManager.DefaultResourceManager = New ResourceManager("Telerik.Windows.Controls.Strings", Assembly.GetCallingAssembly())
            NavigationService.Instance.Navigated -= AddressOf Instance_Navigated
        End Sub
    End Class
End Namespace

EndOf_Localization\HandleNavigation\Example.partial.vb
StartOf_Localization\WPF\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Localization
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Localization\WPF\Example.xaml.vb
StartOf_MergedCells\Example.xaml.vb
Imports System
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.MergedCells
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_MergedCells\Example.xaml.vb
StartOf_MergedColumnHeaders\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.MergedColumnHeaders
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_MergedColumnHeaders\Example.xaml.vb
StartOf_MergedColumnHeaders\Vehicle.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.MergedColumnHeaders
    Public Class Vehicle
        Inherits ViewModelBase

        Public Sub New(ByVal make As String, ByVal model As String, ByVal [variant] As String, ByVal power As String, ByVal fuel As String, ByVal usd As String, ByVal category As String)
            Me.Make = make
            Me.Model = model
            Me.[Variant] = [variant]
            Me.Power = power
            Me.Fuel = fuel
            Me.USD = usd
            Me.Category = category
        End Sub

        Public Sub New()
        End Sub

        Public Property Make As String
        Public Property Model As String
        Public Property [Variant] As String
        Public Property Power As String
        Public Property Fuel As String
        Public Property USD As String
        Public Property Category As String

        Public Shared Function GetSampleListOfVehicles() As List(Of Vehicle)
            Dim vehicles As List(Of Vehicle) = New List(Of Vehicle) From {
                New Vehicle("Alfa Romeo", "159", "Sportwagon", "88 kW (120 PS)", "Diesel", "18000", "Estate Cars"),
                New Vehicle("Audi", "A4 ", "Avant", "88 kW (120 PS)", "Petrol", "26649", "Estate Cars"),
                New Vehicle("BMW", "318i", "Touring", "105 kW (143 PS)", "Petrol", "26890", "Estate Cars"),
                New Vehicle("Lancia", "MUSA", "Gold", "70 kW (95 PS)", "Petrol", "18990", "Estate Cars"),
                New Vehicle("Ford", "Focus", "CV 115", "85 kW (116 PS)", "Diesel", "9900", "Estate Cars"),
                New Vehicle("Mercedes-Benz", "C200", "CDI", "100 kW (136 PS)", "Diesel", "28645", "Estate Cars"),
                New Vehicle("Bugatti", "Veyron", "", "736 kW (1001 PS)", "Petrol", "1290000", "Limousine"),
                New Vehicle("Citroën", "C6", "HDi 240", "177 kW (241 PS)", "Petrol", "47990", "Limousine"),
                New Vehicle("Ferrari", "F430", "SCUDERIA", "375 kW (510 PS)", "Petrol", "215000", "Limousine"),
                New Vehicle("Volvo", "S80", "D5", "158 kW (215 PS)", "Diesel", "53715", "Limousine"),
                New Vehicle("Lamborghini", "Gallardo", "LP550-2", "405 kW (551 PS)", "Petrol", "166450", "Sport Cars"),
                New Vehicle("Honda", "Acura", "MDX", "94 kW (128 PS)", "Petrol", "31800", "Sport Cars"),
                New Vehicle("Peugeot", "RCZ", "HDi FAP 165", "120 kW (163 PS)", "Diesel", "33990", "Sport Cars"),
                New Vehicle("Mitsubishi", "Lancer", "Evolution", "217 kW(295 PS)", "Petrol", "35839", "Sport Cars"),
                New Vehicle("Aston Martin", "V8", "Vantage", "313 kW (426 PS)", "Petrol", "99900", "Sport Cars"),
                New Vehicle("McLaren", "MP4-12C", "", "441 kW (600 PS)", "Petrol", "259900", "Sport Cars")
            }
            Return vehicles
        End Function

        Private _sampleList As List(Of Vehicle)

        Public Property SampleList As List(Of Vehicle)
            Get

                If Me._sampleList Is Nothing Then
                    Me._sampleList = GetSampleListOfVehicles()
                End If

                Return Me._sampleList
            End Get
        End Property
    End Class
End Namespace

EndOf_MergedColumnHeaders\Vehicle.vb
StartOf_NewRowPosition\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.NewRowPosition
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_NewRowPosition\Example.xaml.vb
StartOf_NewRowPosition\MyViewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.NewRowPosition
    Public Class MyViewModel
        Inherits ViewModelBase

        Private randomProducts As IList(Of MyBusinessObject)

        Public Property RandomProducts As IList(Of MyBusinessObject)
            Get

                If randomProducts Is Nothing Then
                    randomProducts = New MyBusinessObjects().GetData(7).ToList()
                End If

                Return randomProducts
            End Get
        End Property

        Private newRowPositions As IEnumerable(Of EnumMemberViewModel)

        Public Property NewRowPositions As IEnumerable(Of EnumMemberViewModel)
            Get

                If Me.newRowPositions Is Nothing Then
                    Me.newRowPositions = Telerik.Windows.Data.EnumDataSource.FromType(Of Telerik.Windows.Controls.GridView.GridViewNewRowPosition)()
                End If

                Return Me.newRowPositions
            End Get
        End Property
    End Class
End Namespace

EndOf_NewRowPosition\MyViewModel.vb
StartOf_PagingBeforeGrouping\Example.xaml.vb
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.PagingBeforeGrouping
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Dim csd = New ColumnSortDescriptor() With {
                .Column = Me.radGridView.Columns("Country")
            }
            Me.radGridView.SortDescriptors.Add(csd)
            Dim cgd = New ColumnGroupDescriptor() With {
                .Column = Me.radGridView.Columns("Country")
            }
            Me.radGridView.GroupDescriptors.Add(cgd)
        End Sub
    End Class
End Namespace

EndOf_PagingBeforeGrouping\Example.xaml.vb
StartOf_PagingBeforeGrouping\MyViewModel.vb
Imports System
Imports System.Linq
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.PagingBeforeGrouping
    Public Class MyViewModel
        Inherits ViewModelBase

        Private view As PagingBeforeGroupingQueryableCollectionView

        Public Property View As PagingBeforeGroupingQueryableCollectionView
            Get

                If Me.view Is Nothing Then
                    Me.view = New PagingBeforeGroupingQueryableCollectionView(New Northwind().CustomersCollection)
                End If

                Return Me.view
            End Get
        End Property
    End Class
End Namespace

EndOf_PagingBeforeGrouping\MyViewModel.vb
StartOf_PagingBeforeGrouping\PagingBeforeGroupingQueryableCollectionView.vb
Imports System
Imports System.Collections
Imports System.Linq
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.PagingBeforeGrouping
    Public Class PagingBeforeGroupingQueryableCollectionView
        Inherits QueryableCollectionView

        Public Sub New(ByVal source As IEnumerable)
        End Sub

        Protected Overrides Function CreateView() As IQueryable
            If Me.TotalItemCount = 0 Then
                Return Me.ApplySelectDescriptors(Me.QueryableSourceCollection)
            Else
                Dim queryable = Me.QueryableSourceCollection
                queryable = queryable.Where(Me.FilterDescriptors)
                queryable = Me.Sort(queryable)
                queryable = Me.ApplySelectDescriptors(queryable)
                queryable = queryable.Page(Me.PageIndex, Me.PageSize)
                queryable = queryable.GroupBy(Me.GroupDescriptors)
                Return queryable
            End If
        End Function

        Protected Overrides Function GetPagingDeterminativeItemCount() As Integer
            Return Me.QueryableSourceCollection.Where(Me.FilterDescriptors).Count()
        End Function
    End Class
End Namespace

EndOf_PagingBeforeGrouping\PagingBeforeGroupingQueryableCollectionView.vb
StartOf_PagingLargeData\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.PagingLargeData
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_PagingLargeData\Example.xaml.vb
StartOf_Performance\Example.xaml.vb
Imports System
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.Performance
    Public Partial Class Example
        Private start As DateTime

        Public Sub New()
            InitializeComponent()
            RadGridView1.Sorting += AddressOf ResetTime
            RadGridView1.Grouping += AddressOf ResetTime
            RadGridView1.Filtering += AddressOf ResetTime
            ResetTimeAndSubscribeToLayoutUpdated()
        End Sub

        Private Sub ResetTime(ByVal sender As Object, ByVal e As EventArgs)
            ResetTimeAndSubscribeToLayoutUpdated()
        End Sub

        Private Sub ResetTimeAndSubscribeToLayoutUpdated()
            RadGridView1.LayoutUpdated += AddressOf RadGridView1_LayoutUpdated
            start = DateTime.Now
        End Sub

        Private Sub RadGridView1_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            RadGridView1.LayoutUpdated -= AddressOf RadGridView1_LayoutUpdated
            TextBlock1.Text = String.Format("Total time to load: {0} ms", Math.Round((DateTime.Now - start).TotalMilliseconds))
        End Sub
    End Class
End Namespace

EndOf_Performance\Example.xaml.vb
StartOf_PinnedRows\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.PinnedRows
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_PinnedRows\Example.xaml.vb
StartOf_PrintAndPrintPreview\Commands.vb
Imports System
Imports System.Windows.Input

Namespace Telerik.Windows.Examples.GridView.PrintAndPrintPreview
    Public Class PrintCommand
        Implements ICommand

        Private ReadOnly model As PrintAndPrintPreviewModel

        Public Sub New(ByVal model As PrintAndPrintPreviewModel)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            Me.model.Print(parameter)
        End Sub
    End Class

    Public Class PrintPreviewCommand
        Implements ICommand

        Private ReadOnly model As PrintAndPrintPreviewModel

        Public Sub New(ByVal model As PrintAndPrintPreviewModel)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            Me.model.PrintPreview(parameter)
        End Sub
    End Class
End Namespace

EndOf_PrintAndPrintPreview\Commands.vb
StartOf_PrintAndPrintPreview\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.PrintAndPrintPreview
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub

        Private Sub GridViewExample_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            RadGridView1.CloseRadWindow()
        End Sub
    End Class
End Namespace

EndOf_PrintAndPrintPreview\Example.xaml.vb
StartOf_PrintAndPrintPreview\PrintAndPrintPreviewExtensions.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Media
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Controls.Spreadsheet
Imports Telerik.Windows.Controls.Spreadsheet.Controls
Imports Telerik.Windows.Documents.Spreadsheet.FormatProviders
Imports Telerik.Windows.Documents.Spreadsheet.Model
Imports System.Runtime.CompilerServices
Imports System.Runtime.CompilerServices
Imports System.Runtime.CompilerServices

Namespace Telerik.Windows.Examples.GridView.PrintAndPrintPreview
    Public Class PrintSettings
        Public Property GroupHeaderBackground As Color
        Public Property HeaderBackground As Color
        Public Property RowBackground As Color
    End Class

    Module PrintAndPrintPreviewExtensions
        Private Shared spreadsheet As RadSpreadsheet
        Private Shared window As RadWindow

        Friend Sub LoadSpreadsheet()
            spreadsheet = New RadSpreadsheet()
            window = New RadWindow() With {
                .Width = 0,
                .Height = 0,
                .Opacity = 0,
                .Content = spreadsheet
            }
            window.Show()
        End Sub

        <Extension()>
        Friend Sub CloseRadWindow(ByVal grid As RadGridView)
            window.Close()
        End Sub

        <Extension()>
        Sub Print(ByVal grid As RadGridView, ByVal settings As PrintSettings)
            spreadsheet.Workbook = CreateWorkbook(grid, settings)
            Dim printWhatSettings As PrintWhatSettings = New PrintWhatSettings(ExportWhat.ActiveSheet, False)
            spreadsheet.Print(printWhatSettings)
        End Sub

        <Extension()>
        Sub PrintPreview(ByVal grid As RadGridView, ByVal settings As PrintSettings)
            spreadsheet.Workbook = CreateWorkbook(grid, settings)
            Dim printPreviewControl = CreatePrintPreviewControl(spreadsheet)
            Dim window = CreatePreviewWindow(printPreviewControl)
            window.ShowDialog()
        End Sub

        Private Function CreatePreviewWindow(ByVal previewControl As FrameworkElement) As RadWindow
            Dim grid As Grid = New Grid()
            grid.RowDefinitions.Add(New RowDefinition())
            grid.Children.Add(previewControl)
            Grid.SetRow(previewControl, 0)
            Return New RadWindow() With {
                .Content = grid,
                .Width = 900,
                .Height = 670,
                .Header = "Print Preview",
                .WindowStartupLocation = WindowStartupLocation.CenterScreen
            }
        End Function

        Private Function CreatePrintPreviewControl(ByVal spreadsheet As RadSpreadsheet) As PrintPreviewControl
            Return New PrintPreviewControl() With {
                .RadSpreadsheet = spreadsheet
            }
        End Function

        Private Function CreateWorkbook(ByVal grid As RadGridView, ByVal settings As PrintSettings) As Workbook
            Dim elementExporting As EventHandler(Of GridViewElementExportingToDocumentEventArgs) = Sub(s, e)
                                                                                                       Dim documentVisualExportParameters = TryCast(e.VisualParameters, GridViewDocumentVisualExportParameters)

                                                                                                       If documentVisualExportParameters IsNot Nothing Then

                                                                                                           If e.Element = ExportElement.HeaderRow Then

                                                                                                               If settings.HeaderBackground IsNot Nothing Then
                                                                                                                   documentVisualExportParameters.Style = New CellSelectionStyle() With {
                                                                                                                       .Fill = New PatternFill(PatternType.Solid, settings.HeaderBackground, settings.HeaderBackground)
                                                                                                                   }
                                                                                                               End If
                                                                                                           ElseIf e.Element = ExportElement.GroupHeaderRow Then

                                                                                                               If settings.GroupHeaderBackground IsNot Nothing Then
                                                                                                                   documentVisualExportParameters.Style = New CellSelectionStyle() With {
                                                                                                                       .Fill = New PatternFill(PatternType.Solid, settings.GroupHeaderBackground, settings.GroupHeaderBackground)
                                                                                                                   }
                                                                                                               End If
                                                                                                           ElseIf e.Element = ExportElement.Row Then

                                                                                                               If settings.RowBackground IsNot Nothing Then
                                                                                                                   documentVisualExportParameters.Style = New CellSelectionStyle() With {
                                                                                                                       .Fill = New PatternFill(PatternType.Solid, settings.RowBackground, settings.RowBackground)
                                                                                                                   }
                                                                                                               End If
                                                                                                           End If
                                                                                                       End If
                                                                                                   End Sub

            AddHandler grid.ElementExportingToDocument, elementExporting
            Dim currentWorkbook As Workbook = grid.ExportToWorkbook()
            Return currentWorkbook
        End Function
    End Module
End Namespace

EndOf_PrintAndPrintPreview\PrintAndPrintPreviewExtensions.vb
StartOf_PrintAndPrintPreview\PrintAndPrintPreviewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Media
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.PrintAndPrintPreview
    Public Class PrintAndPrintPreviewModel
        Inherits DependencyObject
        Implements INotifyPropertyChanged

        Public Sub New()
            Me.PrintCommand = New PrintCommand(Me)
            Me.PrintPreviewCommand = New PrintPreviewCommand(Me)
            Me.HeaderBackground = Color.FromArgb(255, 127, 127, 127)
            Me.RowBackground = Color.FromArgb(255, 251, 247, 255)
            Me.GroupHeaderBackground = Color.FromArgb(255, 216, 216, 216)
            PrintAndPrintPreviewExtensions.LoadSpreadsheet()
        End Sub

        Public Event PropertyChanged As PropertyChangedEventHandler

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private headerBackground As Color
        Private rowBackground As Color
        Private groupHeaderBackground As Color
        Private printCommand As PrintCommand = Nothing
        Private printPreviewCommand As PrintPreviewCommand = Nothing

        Public Property PrintCommand As PrintCommand
            Get
                Return Me.printCommand
            End Get
            Set(ByVal value As PrintCommand)

                If Me.printCommand <> value Then
                    Me.printCommand = value
                    OnPropertyChanged("PrintCommand")
                End If
            End Set
        End Property

        Public Property PrintPreviewCommand As PrintPreviewCommand
            Get
                Return Me.printPreviewCommand
            End Get
            Set(ByVal value As PrintPreviewCommand)

                If Me.printPreviewCommand <> value Then
                    Me.printPreviewCommand = value
                    OnPropertyChanged("PrintPreviewCommand")
                End If
            End Set
        End Property

        Public Property GroupHeaderBackground As Color
            Get
                Return Me.groupHeaderBackground
            End Get
            Set(ByVal value As Color)

                If Me.groupHeaderBackground <> value Then
                    Me.groupHeaderBackground = value
                    OnPropertyChanged("GroupHeaderBackground")
                End If
            End Set
        End Property

        Public Property HeaderBackground As Color
            Get
                Return Me.headerBackground
            End Get
            Set(ByVal value As Color)

                If Me.headerBackground <> value Then
                    Me.headerBackground = value
                    OnPropertyChanged("HeaderBackground")
                End If
            End Set
        End Property

        Public Property RowBackground As Color
            Get
                Return Me.rowBackground
            End Get
            Set(ByVal value As Color)

                If Me.rowBackground <> value Then
                    Me.rowBackground = value
                    OnPropertyChanged("RowBackground")
                End If
            End Set
        End Property

        Public Sub Print(ByVal parameter As Object)
            Dim grid = TryCast(parameter, RadGridView)

            If grid IsNot Nothing Then
                grid.Print(New PrintSettings() With {
                    .GroupHeaderBackground = Me.GroupHeaderBackground,
                    .HeaderBackground = Me.HeaderBackground,
                    .RowBackground = Me.RowBackground
                })
            End If
        End Sub

        Public Sub PrintPreview(ByVal parameter As Object)
            Dim grid = TryCast(parameter, RadGridView)

            If grid IsNot Nothing Then
                grid.PrintPreview(New PrintSettings() With {
                    .GroupHeaderBackground = Me.GroupHeaderBackground,
                    .HeaderBackground = Me.HeaderBackground,
                    .RowBackground = Me.RowBackground
                })
            End If
        End Sub
    End Class
End Namespace

EndOf_PrintAndPrintPreview\PrintAndPrintPreviewModel.vb
StartOf_ProgrammaticFiltering\Example.xaml.vb
Imports Telerik.Windows.Controls.GridView
Imports System
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.ProgrammaticFiltering
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.radGridView.FilterDescriptors.SuspendNotifications()
            Dim birthDateFilter As IColumnFilterDescriptor = Me.radGridView.Columns("CompanyName").ColumnFilterDescriptor
            birthDateFilter.SuspendNotifications()
            birthDateFilter.FieldFilter.Filter1.[Operator] = FilterOperator.Contains
            birthDateFilter.FieldFilter.Filter1.Value = "Delikatessen"
            birthDateFilter.FieldFilter.Filter1.IsCaseSensitive = True
            birthDateFilter.FieldFilter.LogicalOperator = FilterCompositionLogicalOperator.[Or]
            birthDateFilter.FieldFilter.Filter2.[Operator] = FilterOperator.Contains
            birthDateFilter.FieldFilter.Filter2.Value = "market"
            birthDateFilter.FieldFilter.Filter2.IsCaseSensitive = False
            birthDateFilter.ResumeNotifications()
            Dim countryFilter As IColumnFilterDescriptor = Me.radGridView.Columns("Country").ColumnFilterDescriptor
            countryFilter.SuspendNotifications()
            countryFilter.DistinctFilter.AddDistinctValue("USA")
            countryFilter.DistinctFilter.AddDistinctValue("Canada")
            countryFilter.DistinctFilter.AddDistinctValue("Germany")
            countryFilter.ResumeNotifications()
            Me.radGridView.FilterDescriptors.ResumeNotifications()
        End Sub

        Private Sub OnDistinctValuesLoading(ByVal sender As Object, ByVal e As GridViewDistinctValuesLoadingEventArgs)
            Dim filterDistinctValues = False
            e.ItemsSource = Me.radGridView.GetDistinctValues(e.Column, filterDistinctValues)
        End Sub
    End Class
End Namespace

EndOf_ProgrammaticFiltering\Example.xaml.vb
StartOf_RealTimeUpdate\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.RealTimeUpdate
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RealTimeUpdate\Example.xaml.vb
StartOf_RealTimeUpdate\MyCellStyleSelector.vb
Imports System.Windows
Imports System.Windows.Media
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports System.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.RealTimeUpdate
    Public Class MyCellStyleSelector
        Inherits StyleSelector

        Public Overrides Function SelectStyle(ByVal item As Object, ByVal container As System.Windows.DependencyObject) As System.Windows.Style
            Dim stockData As StockData = TryCast(item, StockData)

            If stockData IsNot Nothing AndAlso stockData.Change > 0.5 Then
                Return ActiveStyle
            End If

            Return DefaultStyle
        End Function

        Public Property ActiveStyle As Style
        Public Property DefaultStyle As Style
    End Class
End Namespace

EndOf_RealTimeUpdate\MyCellStyleSelector.vb
StartOf_RealTimeUpdate\MyDataContext.vb
Imports System
Imports Telerik.Windows.Data
Imports System.Linq
Imports System.Windows.Threading
Imports System.ComponentModel
Imports System.Collections.Generic
Imports System.Collections.Specialized
Imports System.Collections.ObjectModel

Namespace Telerik.Windows.Examples.GridView.RealTimeUpdate
    Public Class MyDataContext
        ReadOnly letters As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        Private rnd As Random = New Random()
        Private source As ObservableCollection(Of StockData)

        Private Property Source As ObservableCollection(Of StockData)
            Get

                If Me.source Is Nothing Then
                    Me.source = New ObservableCollection(Of StockData)(From i In Enumerable.Range(0, 50) Select Me.CreateNewStockItem())
                    Dim timer = New DispatcherTimer() With {
                        .Interval = TimeSpan.FromMilliseconds(1)
                    }
                    timer.Tick += Function(s, e)
                                      Dim index As Integer = Me.rnd.[Next](0, Me.Source.Count())
                                      Dim item As StockData = Me.CreateNewStockItem()
                                      Me.Source(index) = item
                                  End Function

                    timer.Start()
                End If

                Return Me.source
            End Get
        End Property

        Private Function CreateNewStockItem() As StockData
            Dim item = New StockData()
            Me.SetRandomPropertyValues(item)
            Return item
        End Function

        Private Sub SetRandomPropertyValues(ByVal item As StockData)
            item.Name = String.Format("{0}{1}{2}{3}", Me.letters(Me.rnd.[Next](0, Me.letters.Count())), Me.letters(Me.rnd.[Next](0, Me.letters.Count())), Me.letters(Me.rnd.[Next](0, Me.letters.Count())), Me.letters(Me.rnd.[Next](0, Me.letters.Count())))
            item.LastUpdate = DateTime.Now
            item.Change = Me.rnd.NextDouble()
        End Sub

        Private data As QueryableCollectionView

        Public Property Data As QueryableCollectionView
            Get

                If Me.data Is Nothing Then
                    Me.data = New QueryableCollectionView(Source)
                    Me.data.SortDescriptors.Add(New SortDescriptor() With {
                        .Member = "Name",
                        .SortDirection = System.ComponentModel.ListSortDirection.Descending
                    })
                End If

                Return Me.data
            End Get
        End Property
    End Class
End Namespace

EndOf_RealTimeUpdate\MyDataContext.vb
StartOf_RealTimeUpdate\StockData.vb
Imports System
Imports System.ComponentModel
Imports System.Linq
Imports System.Text

Namespace Telerik.Windows.Examples.GridView.RealTimeUpdate
    Public Class StockData
        Implements INotifyPropertyChanged

        Private name As String

        Public Property Name As String
            Get
                Return Me.name
            End Get
            Set(ByVal value As String)

                If Me.name <> value Then
                    Me.name = value
                    Me.OnPropertyChanged("Name")
                End If
            End Set
        End Property

        Private change As Double

        Public Property Change As Double
            Get
                Return Me.change
            End Get
            Set(ByVal value As Double)

                If Me.change <> value Then
                    Me.change = value
                    Me.OnPropertyChanged("Change")
                End If
            End Set
        End Property

        Private lastUpdate As DateTime

        Public Property LastUpdate As DateTime
            Get
                Return Me.lastUpdate
            End Get
            Set(ByVal value As DateTime)

                If Me.lastUpdate <> value Then
                    Me.lastUpdate = value
                    Me.OnPropertyChanged("LastUpdate")
                End If
            End Set
        End Property

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Public Event PropertyChanged As PropertyChangedEventHandler
    End Class
End Namespace

EndOf_RealTimeUpdate\StockData.vb
StartOf_RowContextMenu\ContextMenuBehavior.vb
Imports System
Imports System.Linq
Imports System.Windows
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.RowContextMenu
    Public Class ContextMenuBehavior
        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly contextMenu As FrameworkElement = Nothing
        Public Shared ReadOnly ContextmenuPropery As DependencyProperty = DependencyProperty.RegisterAttached("ContextMenu", GetType(FrameworkElement), GetType(ContextMenuBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnIsEnabledPropertyChanged)))

        Public Shared Sub SetContextMenu(ByVal dependencyObject As DependencyObject, ByVal contextmenu As FrameworkElement)
            dependencyObject.SetValue(ContextmenuPropery, contextmenu)
        End Sub

        Public Shared Function GetContextMenu(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(ContextmenuPropery), FrameworkElement)
        End Function

        Public Shared Sub OnIsEnabledPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim contextMenu As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If grid IsNot Nothing AndAlso contextMenu IsNot Nothing Then
                Dim behavior As ContextMenuBehavior = New ContextMenuBehavior(grid, contextMenu)
            End If
        End Sub

        Public Sub New(ByVal grid As RadGridView, ByVal contextMenu As FrameworkElement)
            Me.gridView = grid
            Me.contextMenu = contextMenu
            (TryCast(contextMenu, RadContextMenu)).Opened += AddressOf RadContextMenu_Opened
            (TryCast(contextMenu, RadContextMenu)).ItemClick += AddressOf RadContextMenu_ItemClick
        End Sub

        Private Sub RadContextMenu_ItemClick(ByVal sender As Object, ByVal e As RadRoutedEventArgs)
            Dim menu As RadContextMenu = CType(sender, RadContextMenu)
            Dim clickedItem As RadMenuItem = TryCast(e.OriginalSource, RadMenuItem)
            Dim row As GridViewRow = menu.GetClickedElement(Of GridViewRow)()
            Dim groupHeaderRow As GroupHeaderRow = menu.GetClickedElement(Of GroupHeaderRow)()

            If clickedItem IsNot Nothing AndAlso row IsNot Nothing Then
                Dim header As String = Convert.ToString(clickedItem.Header)

                Select Case header
                    Case "Add"
                        gridView.BeginInsert()
                    Case "Edit"
                        gridView.BeginEdit()
                    Case "Delete"
                        gridView.Items.Remove(row.DataContext)
                    Case Else
                End Select
            ElseIf clickedItem IsNot Nothing AndAlso groupHeaderRow IsNot Nothing Then
                Dim header As String = Convert.ToString(clickedItem.Header)

                Select Case header
                    Case "Delete"
                        Dim group = TryCast(groupHeaderRow.DataContext, QueryableCollectionViewGroup)
                        Dim items = group.Items.ToList()

                        For Each item In items
                            gridView.Items.Remove(item)
                        Next

                    Case Else
                End Select
            End If
        End Sub

        Private Sub RadContextMenu_Opened(ByVal sender As Object, ByVal e As RoutedEventArgs)
            Dim menu As RadContextMenu = CType(sender, RadContextMenu)
            Dim row As GridViewRow = menu.GetClickedElement(Of GridViewRow)()
            Dim groupHeaderRow As GroupHeaderRow = menu.GetClickedElement(Of GroupHeaderRow)()

            If row IsNot Nothing AndAlso Not row.IsInEditMode Then
                menu.Items.Clear()
                Dim item As RadMenuItem = New RadMenuItem()
                item.Header = "Add"
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = "Edit"
                menu.Items.Add(item)
                item = New RadMenuItem()
                item.Header = "Delete"
                menu.Items.Add(item)
                row.IsSelected = __InlineAssignHelper(row.IsCurrent, True)
                Dim cell As GridViewCell = menu.GetClickedElement(Of GridViewCell)()

                If cell IsNot Nothing Then
                    cell.IsCurrent = True
                End If
            ElseIf groupHeaderRow IsNot Nothing Then
                menu.Items.Clear()
                Dim item As RadMenuItem = New RadMenuItem()
                item.Header = "Delete"
                menu.Items.Add(item)
            Else
                menu.IsOpen = False
            End If
        End Sub

        <Obsolete("Please refactor code that uses this function, it is a simple work-around to simulate inline assignment in VB!")>
        Private Shared Function __InlineAssignHelper(Of T)(ByRef target As T, value As T) As T
            target = value
            Return value
        End Function
    End Class
End Namespace

EndOf_RowContextMenu\ContextMenuBehavior.vb
StartOf_RowContextMenu\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.RowContextMenu
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowContextMenu\Example.xaml.vb
StartOf_RowDetails\ConfigurationPanelBehavior.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports System.Linq
Imports Telerik.Windows.Controls.GridView
Imports System.Collections.Generic

Namespace Telerik.Windows.Examples.GridView.RowDetails
    Public Class ConfigurationPanelBehavior
        Inherits ViewModelBase

        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly controlPanel As FrameworkElement = Nothing
        Private ReadOnly layoutRoot As FrameworkElement = Nothing
        Private ReadOnly externalDetailsBorder As FrameworkElement = Nothing
        Public ReadOnly DetailsTemplateChoices As IEnumerable(Of String) = New List(Of String)() From {
            "Employee Info",
            "Employee Notes"
        }
        Public ReadOnly InlineDetailsChoices As String() = {"Visible When Selected", "Visible", "Collapsed"}
        Public ReadOnly ExternalDetailsPresenterChoices As String() = {"Collapsed", "Visible"}
        Public ReadOnly HorizontalScrollingChoices As String() = {"Unfrozen", "Frozen"}
        Private _currentDetailsTemplate As String
        Private _currentInlineDetails As String
        Private _currentExternalDetailsPresenter As String
        Private _currentHorizontalScrolling As String

        Public Property CurrentDetailsTemplate As String
            Get
                Return Me._currentDetailsTemplate
            End Get
            Set(ByVal value As String)

                If Me._currentDetailsTemplate <> value Then
                    Me._currentDetailsTemplate = value
                    OnPropertyChanged("CurrentDetailsTemplate")
                    DetailsTemplateSelectionChanged(value)
                End If
            End Set
        End Property

        Public Property CurrentInlineDetails As String
            Get
                Return Me._currentInlineDetails
            End Get
            Set(ByVal value As String)

                If Me._currentInlineDetails <> value Then
                    Me._currentInlineDetails = value
                    OnPropertyChanged("CurrentInlineDetails")
                    InlineDetailsSelectionChanged(value)
                End If
            End Set
        End Property

        Public Property CurrentExternalDetailsPresenter As String
            Get
                Return Me._currentExternalDetailsPresenter
            End Get
            Set(ByVal value As String)

                If Me._currentExternalDetailsPresenter <> value Then
                    Me._currentExternalDetailsPresenter = value
                    OnPropertyChanged("CurrentExternalDetailsPresenter")
                    ExternalDetailsPresenterSelectionChanged(value)
                End If
            End Set
        End Property

        Public Property CurrentHorizontalScrollingchoices As String
            Get
                Return Me._currentHorizontalScrolling
            End Get
            Set(ByVal value As String)

                If Me._currentHorizontalScrolling <> value Then
                    Me._currentHorizontalScrolling = value
                    OnPropertyChanged("CurrentHorizontalScrollingchoices")
                    HorizontalScrollingSelectionChanged(value)
                End If
            End Set
        End Property

        Public Shared ReadOnly ConrolPanelProperty As DependencyProperty = DependencyProperty.RegisterAttached("ControlPanel", GetType(FrameworkElement), GetType(ConfigurationPanelBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnControlPanelPropertyChanged)))

        Public Shared Sub SetControlPanel(ByVal dependencyObject As DependencyObject, ByVal panel As FrameworkElement)
            dependencyObject.SetValue(ConrolPanelProperty, panel)
        End Sub

        Public Shared Function GetControlPanel(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(ConrolPanelProperty), FrameworkElement)
        End Function

        Public Shared Sub OnControlPanelPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim layoutRoot As FrameworkElement = TryCast(dependencyObject, FrameworkElement)
            Dim panel As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If layoutRoot IsNot Nothing AndAlso panel IsNot Nothing Then
                Dim behavior As ConfigurationPanelBehavior = New ConfigurationPanelBehavior(layoutRoot, panel)
            End If
        End Sub

        Public Sub New(ByVal layoutRoot As FrameworkElement, ByVal panel As FrameworkElement)
            Me.layoutRoot = layoutRoot
            Me.controlPanel = panel
            Me.gridView = (From i In layoutRoot.ChildrenOfType(Of RadGridView)() Where i.Name = "radGridView" Select i).FirstOrDefault()
            Me.externalDetailsBorder = (From i In layoutRoot.ChildrenOfType(Of Border)() Where i.Name = "externalDetailsBorder" Select i).FirstOrDefault()
            Me.CurrentDetailsTemplate = DetailsTemplateChoices.FirstOrDefault()
            Me.CurrentInlineDetails = InlineDetailsChoices.FirstOrDefault()
            Me.CurrentExternalDetailsPresenter = ExternalDetailsPresenterChoices.FirstOrDefault()
            Me.CurrentHorizontalScrollingchoices = HorizontalScrollingChoices.FirstOrDefault()
            Me.controlPanel.LayoutUpdated += AddressOf controlPanel_LayoutUpdated
        End Sub

        Private Sub controlPanel_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            Me.controlPanel.DataContext = Me

            For Each comboBox As RadComboBox In controlPanel.ChildrenOfType(Of RadComboBox)()

                Select Case comboBox.Name
                    Case "DetailsTemplateComboBox"
                        comboBox.ItemsSource = Me.DetailsTemplateChoices
                        comboBox.SelectedItem = Me.CurrentDetailsTemplate
                    Case "InlineDetailsComboBox"
                        comboBox.ItemsSource = Me.InlineDetailsChoices
                        comboBox.SelectedItem = Me.CurrentInlineDetails
                    Case "ExternalDetailsComboBox"
                        comboBox.ItemsSource = Me.ExternalDetailsPresenterChoices
                        comboBox.SelectedItem = Me.CurrentExternalDetailsPresenter
                    Case "HorizontalScrollingComboBox"
                        comboBox.ItemsSource = Me.HorizontalScrollingChoices
                        comboBox.SelectedItem = Me.CurrentHorizontalScrollingchoices
                End Select
            Next
        End Sub

        Private Sub HorizontalScrollingSelectionChanged(ByVal scrollingString As String)
            If scrollingString = "Frozen" Then
                Me.gridView.AreRowDetailsFrozen = True
                Return
            End If

            If scrollingString = "Unfrozen" Then
                Me.gridView.AreRowDetailsFrozen = False
                Return
            End If
        End Sub

        Private Sub ExternalDetailsPresenterSelectionChanged(ByVal detailsString As String)
            If detailsString = "Visible" Then
                Me.externalDetailsBorder.Visibility = Visibility.Visible
                Me.CurrentInlineDetails = (From i In Me.InlineDetailsChoices Where i = "Collapsed" Select i).FirstOrDefault()
                Return
            End If

            If detailsString = "Collapsed" Then
                Me.externalDetailsBorder.Visibility = Visibility.Collapsed
                Me.CurrentInlineDetails = (From i In Me.InlineDetailsChoices Where i = "Visible When Selected" Select i).FirstOrDefault()
                Return
            End If
        End Sub

        Private Sub InlineDetailsSelectionChanged(ByVal detailsString As String)
            If detailsString = "Visible" Then

                If Me.gridView.CurrentCell IsNot Nothing Then
                    Me.gridView.CurrentCell.IsCurrent = False
                End If

                Me.gridView.RowDetailsVisibilityMode = GridViewRowDetailsVisibilityMode.Visible
                Return
            End If

            If detailsString = "Visible When Selected" Then

                If Me.gridView.CurrentCell IsNot Nothing Then
                    Me.gridView.CurrentCell.IsCurrent = False
                End If

                Me.gridView.RowDetailsVisibilityMode = GridViewRowDetailsVisibilityMode.VisibleWhenSelected
                Return
            End If

            If detailsString = "Collapsed" Then

                If Me.gridView.CurrentCell IsNot Nothing Then
                    Me.gridView.CurrentCell.IsCurrent = False
                End If

                Me.gridView.RowDetailsVisibilityMode = GridViewRowDetailsVisibilityMode.Collapsed
                Return
            End If
        End Sub

        Private Sub DetailsTemplateSelectionChanged(ByVal templateString As String)
            If templateString = "Employee Info" Then
                Me.gridView.RowDetailsTemplate = CType(Me.layoutRoot.Resources("EmployeeInfoRowDetailsTemplate"), DataTemplate)
                Return
            End If

            If templateString = "Employee Notes" Then
                Me.gridView.RowDetailsTemplate = CType(Me.layoutRoot.Resources("EmployeeNotesRowDetailsTemplate"), DataTemplate)
                Return
            End If
        End Sub
    End Class
End Namespace

EndOf_RowDetails\ConfigurationPanelBehavior.vb
StartOf_RowDetails\EmployeeInfoDetailsTemplate.xaml.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data
Imports System.Windows.Documents
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Imaging
Imports System.Windows.Shapes

Namespace Telerik.Windows.Examples.GridView.RowDetails
    Public Partial Class EmployeeInfoDetailsTemplate
        Inherits UserControl

        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowDetails\EmployeeInfoDetailsTemplate.xaml.vb
StartOf_RowDetails\EmployeeNotesDetailsTemplate.xaml.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data
Imports System.Windows.Documents
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Imaging
Imports System.Windows.Shapes

Namespace Telerik.Windows.Examples.GridView.RowDetails
    Public Partial Class EmployeeNotesDetailsTemplate
        Inherits UserControl

        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowDetails\EmployeeNotesDetailsTemplate.xaml.vb
StartOf_RowDetails\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.RowDetails
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowDetails\Example.xaml.vb
StartOf_RowNumber\Example.xaml.vb
Imports Telerik.Windows.Data
Imports System.ComponentModel

Namespace Telerik.Windows.Examples.GridView.RowNumber
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowNumber\Example.xaml.vb
StartOf_RowNumber\MyColumn.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.RowNumber
    Public Class MyColumn
        Inherits Telerik.Windows.Controls.GridViewColumn

        Public Overrides Function CreateCellElement(ByVal cell As Telerik.Windows.Controls.GridView.GridViewCell, ByVal dataItem As Object) As FrameworkElement
            Dim textBlock As TextBlock = TryCast(cell.Content, TextBlock)

            If textBlock Is Nothing Then
                textBlock = New TextBlock()
            End If

            textBlock.Text = String.Format("{0}", Me.DataControl.Items.IndexOf(dataItem) + 1)
            Return textBlock
        End Function

        Protected Overrides Sub OnPropertyChanged(ByVal args As System.ComponentModel.PropertyChangedEventArgs)
            MyBase.OnPropertyChanged(args)

            If args.PropertyName = "DataControl" Then

                If Me.DataControl IsNot Nothing AndAlso Me.DataControl.Items IsNot Nothing Then
                    Me.DataControl.Items.CollectionChanged += Function(s, e)

                                                                  If e.Action = System.Collections.Specialized.NotifyCollectionChangedAction.Remove Then
                                                                      Me.Refresh()
                                                                  End If
                                                              End Function
                End If
            End If
        End Sub
    End Class
End Namespace

EndOf_RowNumber\MyColumn.vb
StartOf_RowReorder\DropIndicationDetails.vb
Imports System
Imports Telerik.Windows.Controls

Namespace Samples.GridView.RowReorder
    Public Class DropIndicationDetails
        Inherits ViewModelBase

        Private currentDraggedItem As Object
        Private currentDropPosition As DropPosition
        Private currentDraggedOverItem As Object

        Public Property CurrentDraggedOverItem As Object
            Get
                Return currentDraggedOverItem
            End Get
            Set(ByVal value As Object)

                If Me.currentDraggedOverItem <> value Then
                    currentDraggedOverItem = value
                    OnPropertyChanged("CurrentDraggedOverItem")
                End If
            End Set
        End Property

        Public Property DropIndex As Integer

        Public Property CurrentDropPosition As DropPosition
            Get
                Return Me.currentDropPosition
            End Get
            Set(ByVal value As DropPosition)

                If Me.currentDropPosition <> value Then
                    Me.currentDropPosition = value
                    OnPropertyChanged("CurrentDropPosition")
                End If
            End Set
        End Property

        Public Property CurrentDraggedItem As Object
            Get
                Return Me.currentDraggedItem
            End Get
            Set(ByVal value As Object)

                If Me.currentDraggedItem <> value Then
                    Me.currentDraggedItem = value
                    OnPropertyChanged("CurrentDraggedItem")
                End If
            End Set
        End Property
    End Class
End Namespace

EndOf_RowReorder\DropIndicationDetails.vb
StartOf_RowReorder\Example.xaml.vb
Imports Telerik.Windows.Data
Imports System.ComponentModel
Imports Samples.GridView.RowReorder
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers
Imports System.Windows
Imports System

Namespace Telerik.Windows.Examples.GridView.RowReorder
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.root.Resources.MergedDictionaries.Clear()
            Me.root.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/RowReorder/RowStyles.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_RowReorder\Example.xaml.vb
StartOf_RowReorder\RowReorderBehavior.vb
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows
Imports System.Windows.Input
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.DragDrop
Imports Telerik.Windows.Examples.GridView.RowReorder
Imports Telerik.Windows.DragDrop.Behaviors

Namespace Samples.GridView.RowReorder
    Public Partial Class RowReorderBehavior
        Private _associatedObject As RadGridView

        Public Property AssociatedObject As RadGridView
            Get
                Return _associatedObject
            End Get
            Set(ByVal value As RadGridView)
                _associatedObject = value
            End Set
        End Property

        Private Shared instances As Dictionary(Of RadGridView, RowReorderBehavior)

        Private Shared Sub New()
            instances = New Dictionary(Of RadGridView, RowReorderBehavior)()
        End Sub

        Public Shared Function GetIsEnabled(ByVal obj As DependencyObject) As Boolean
            Return CBool(obj.GetValue(IsEnabledProperty))
        End Function

        Public Shared Sub SetIsEnabled(ByVal obj As DependencyObject, ByVal value As Boolean)
            Dim behavior As RowReorderBehavior = GetAttachedBehavior(TryCast(obj, RadGridView))
            behavior.AssociatedObject = TryCast(obj, RadGridView)

            If value Then
                behavior.Initialize()
            Else
                behavior.CleanUp()
            End If

            obj.SetValue(IsEnabledProperty, value)
        End Sub

        Public Shared ReadOnly IsEnabledProperty As DependencyProperty = DependencyProperty.RegisterAttached("IsEnabled", GetType(Boolean), GetType(RowReorderBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnIsEnabledPropertyChanged)))

        Public Shared Sub OnIsEnabledPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            SetIsEnabled(dependencyObject, CBool(e.NewValue))
        End Sub

        Private Shared Function GetAttachedBehavior(ByVal gridview As RadGridView) As RowReorderBehavior
            If Not instances.ContainsKey(gridview) Then
                instances(gridview) = New RowReorderBehavior()
                instances(gridview).AssociatedObject = gridview
            End If

            Return instances(gridview)
        End Function

        Protected Overridable Sub Initialize()
            Me.AssociatedObject.RowLoaded -= AddressOf Me.AssociatedObject_RowLoaded
            Me.AssociatedObject.RowLoaded += AddressOf Me.AssociatedObject_RowLoaded
            Me.UnsubscribeFromDragDropEvents()
            Me.SubscribeToDragDropEvents()
        End Sub

        Protected Overridable Sub CleanUp()
            Me.AssociatedObject.RowLoaded -= AddressOf Me.AssociatedObject_RowLoaded
            Me.UnsubscribeFromDragDropEvents()
        End Sub

        Private Sub AssociatedObject_RowLoaded(ByVal sender As Object, ByVal e As Telerik.Windows.Controls.GridView.RowLoadedEventArgs)
            If TypeOf e.Row Is GridViewHeaderRow OrElse TypeOf e.Row Is GridViewNewRow OrElse TypeOf e.Row Is GridViewFooterRow Then Return
            Dim row As GridViewRow = TryCast(e.Row, GridViewRow)
            Me.InitializeRowDragAndDrop(row)
        End Sub

        Private Sub InitializeRowDragAndDrop(ByVal row As GridViewRow)
            If row Is Nothing Then Return
            DragDropManager.RemoveDragOverHandler(row, AddressOf OnRowDragOver)
            DragDropManager.AddDragOverHandler(row, AddressOf OnRowDragOver)
        End Sub

        Private Sub SubscribeToDragDropEvents()
            DragDropManager.AddDragInitializeHandler(Me.AssociatedObject, AddressOf OnDragInitialize)
            DragDropManager.AddGiveFeedbackHandler(Me.AssociatedObject, AddressOf OnGiveFeedback)
            DragDropManager.AddDropHandler(Me.AssociatedObject, AddressOf OnDrop)
        End Sub

        Private Sub UnsubscribeFromDragDropEvents()
            DragDropManager.RemoveDragInitializeHandler(Me.AssociatedObject, AddressOf OnDragInitialize)
            DragDropManager.RemoveGiveFeedbackHandler(Me.AssociatedObject, AddressOf OnGiveFeedback)
            DragDropManager.RemoveDropHandler(Me.AssociatedObject, AddressOf OnDrop)
        End Sub

        Private Sub OnDragInitialize(ByVal sender As Object, ByVal e As DragInitializeEventArgs)
            Dim sourceRow = If(TryCast(e.OriginalSource, GridViewRow), (TryCast(e.OriginalSource, FrameworkElement)).ParentOfType(Of GridViewRow)())

            If sourceRow IsNot Nothing AndAlso sourceRow.Name <> "PART_RowResizer" Then
                Dim details As DropIndicationDetails = New DropIndicationDetails()
                Dim item = sourceRow.Item
                details.CurrentDraggedItem = item
                Dim dragPayload As IDragPayload = DragDropPayloadManager.GeneratePayload(Nothing)
                dragPayload.SetData("DraggedItem", item)
                dragPayload.SetData("DropDetails", details)
                e.Data = dragPayload
                e.DragVisual = New DragVisual() With {
                    .Content = details,
                    .ContentTemplate = TryCast(Me.AssociatedObject.Resources("DraggedItemTemplate"), DataTemplate)
                }
                e.DragVisualOffset = e.RelativeStartPoint
                e.AllowedEffects = DragDropEffects.All
            End If
        End Sub

        Private Sub OnGiveFeedback(ByVal sender As Object, ByVal e As Telerik.Windows.DragDrop.GiveFeedbackEventArgs)
            e.SetCursor(Cursors.Arrow)
            e.Handled = True
        End Sub

        Private Sub OnDrop(ByVal sender As Object, ByVal e As Telerik.Windows.DragDrop.DragEventArgs)
            Dim draggedItem = DragDropPayloadManager.GetDataFromObject(e.Data, "DraggedItem")
            Dim details = TryCast(DragDropPayloadManager.GetDataFromObject(e.Data, "DropDetails"), DropIndicationDetails)

            If details Is Nothing OrElse draggedItem Is Nothing Then
                Return
            End If

            If e.Effects = DragDropEffects.Move OrElse e.Effects = DragDropEffects.All Then
                (TryCast((TryCast(sender, RadGridView)).ItemsSource, IList)).Remove(draggedItem)
            End If

            If e.Effects <> DragDropEffects.None Then
                Dim collection = TryCast((TryCast(sender, RadGridView)).ItemsSource, IList)
                Dim index As Integer = If(details.DropIndex < 0, 0, details.DropIndex)
                index = If(details.DropIndex > collection.Count - 1, collection.Count, index)
                collection.Insert(index, draggedItem)
            End If
        End Sub

        Private Sub OnRowDragOver(ByVal sender As Object, ByVal e As Telerik.Windows.DragDrop.DragEventArgs)
            Dim row = TryCast(sender, GridViewRow)
            Dim details = TryCast(DragDropPayloadManager.GetDataFromObject(e.Data, "DropDetails"), DropIndicationDetails)

            If details Is Nothing OrElse row Is Nothing Then
                Return
            End If

            details.CurrentDraggedOverItem = row.DataContext

            If details.CurrentDraggedItem = details.CurrentDraggedOverItem Then
                e.Effects = DragDropEffects.None
                e.Handled = True
                Return
            End If

            details.CurrentDropPosition = GetDropPositionFromPoint(e.GetPosition(row), row)
            Dim dropIndex As Integer = (TryCast(Me.AssociatedObject.Items, IList)).IndexOf(row.DataContext)
            Dim draggedItemIdex As Integer = (TryCast(Me.AssociatedObject.Items, IList)).IndexOf(DragDropPayloadManager.GetDataFromObject(e.Data, "DraggedItem"))

            If dropIndex >= row.GridViewDataControl.Items.Count - 1 AndAlso details.CurrentDropPosition = DropPosition.After Then
                details.DropIndex = dropIndex
                Return
            End If

            dropIndex = If(draggedItemIdex > dropIndex, dropIndex, dropIndex - 1)
            details.DropIndex = If(details.CurrentDropPosition = DropPosition.Before, dropIndex, dropIndex + 1)
        End Sub

        Public Overridable Function GetDropPositionFromPoint(ByVal absoluteMousePosition As Point, ByVal row As GridViewRow) As DropPosition
            If row IsNot Nothing Then
                Return If(absoluteMousePosition.Y < row.ActualHeight / 2, DropPosition.Before, DropPosition.After)
            End If

            Return DropPosition.Inside
        End Function
    End Class
End Namespace

EndOf_RowReorder\RowReorderBehavior.vb
StartOf_RowResizing\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.RowResizing
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_RowResizing\Example.xaml.vb
StartOf_SampleData\Club.vb
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel

Namespace Telerik.Windows.Examples
    Public Class Club
        Implements INotifyPropertyChanged

        Public Event PropertyChanged As PropertyChangedEventHandler
        Private name As String
        Private established As DateTime
        Private stadiumCapacity As Integer

        Public Property Name As String
            Get
                Return Me.name
            End Get
            Set(ByVal value As String)

                If value <> Me.name Then
                    Me.name = value
                    Me.OnPropertyChanged("Name")
                End If
            End Set
        End Property

        Public Property Established As DateTime
            Get
                Return Me.established
            End Get
            Set(ByVal value As DateTime)

                If value <> Me.established Then
                    Me.established = value
                    Me.OnPropertyChanged("Established")
                End If
            End Set
        End Property

        Public Property StadiumCapacity As Integer
            Get
                Return Me.stadiumCapacity
            End Get
            Set(ByVal value As Integer)

                If value <> Me.stadiumCapacity Then
                    Me.stadiumCapacity = value
                    Me.OnPropertyChanged("StadiumCapacity")
                End If
            End Set
        End Property

        Public Sub New(ByVal name As String, ByVal established As DateTime, ByVal stadiumCapacity As Integer)
            Me.name = name
            Me.established = established
            Me.stadiumCapacity = stadiumCapacity
        End Sub

        Protected Overridable Sub OnPropertyChanged(ByVal args As PropertyChangedEventArgs)
            RaiseEvent PropertyChanged(Me, args)
        End Sub

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            Me.OnPropertyChanged(New PropertyChangedEventArgs(propertyName))
        End Sub

        Public Shared Function GetClubs() As IEnumerable(Of Club)
            Dim clubs As ObservableCollection(Of Club) = New ObservableCollection(Of Club)()
            clubs.Add(New Club("Arsenal", New DateTime(1886, 1, 1), 60432))
            clubs.Add(New Club("Aston Villa", New DateTime(1874, 1, 1), 39339))
            clubs.Add(New Club("Birmingham City", New DateTime(1875, 1, 1), 30016))
            clubs.Add(New Club("Blackburn Rovers", New DateTime(1875, 1, 1), 31367))
            clubs.Add(New Club("Bolton Wanderers", New DateTime(1874, 1, 1), 27879))
            clubs.Add(New Club("Burnley", New DateTime(1882, 1, 1), 22546))
            clubs.Add(New Club("Chelsea", New DateTime(1905, 1, 1), 42449))
            clubs.Add(New Club("Everton", New DateTime(1878, 1, 1), 40900))
            clubs.Add(New Club("Fulham", New DateTime(1879, 1, 1), 19250))
            clubs.Add(New Club("Hull City", New DateTime(1904, 1, 1), 25404))
            clubs.Add(New Club("Liverpool", New DateTime(1892, 1, 1), 45362))
            clubs.Add(New Club("Manchester City", New DateTime(1887, 1, 1), 48000))
            clubs.Add(New Club("Manchester United", New DateTime(1878, 1, 1), 76212))
            clubs.Add(New Club("Portsmouth", New DateTime(1898, 1, 1), 19179))
            clubs.Add(New Club("Stoke City", New DateTime(1863, 1, 1), 28218))
            clubs.Add(New Club("Sunderland", New DateTime(1879, 1, 1), 49000))
            clubs.Add(New Club("Tottenham Hotspur", New DateTime(1882, 1, 1), 36236))
            clubs.Add(New Club("West Ham United", New DateTime(1895, 1, 1), 35595))
            clubs.Add(New Club("Wigan Athletic", New DateTime(1932, 1, 1), 25138))
            clubs.Add(New Club("Wolverhampton Wanderers", New DateTime(1877, 1, 1), 28525))
            Return clubs
        End Function
    End Class
End Namespace

EndOf_SampleData\Club.vb
StartOf_SampleData\DateTimeConverter.vb
Imports System.ComponentModel
Imports System
Imports System.Globalization
Imports System.Reflection

Namespace Telerik.Windows.Examples
    Public Class DateTimeConverter
        Inherits TypeConverter

        Public Overrides Function ConvertFrom(ByVal context As ITypeDescriptorContext, ByVal culture As CultureInfo, ByVal value As Object) As Object
            Dim s = TryCast(value, String)

            If s IsNot Nothing Then
                s = s.Trim()

                If s.Length = 0 Then
                    Return DateTime.MinValue
                End If

                Try
                    Dim provider As DateTimeFormatInfo = Nothing

                    If culture IsNot Nothing Then
                        provider = CType(culture.GetFormat(GetType(DateTimeFormatInfo)), DateTimeFormatInfo)
                    End If

                    If provider IsNot Nothing Then
                        Return DateTime.Parse(s, provider)
                    End If

                    Return DateTime.Parse(s, culture)
                Catch exception As FormatException
                    Throw New FormatException("Invalid DateTime!")
                End Try
            End If

            Return MyBase.ConvertFrom(context, culture, value)
        End Function
    End Class
End Namespace

EndOf_SampleData\DateTimeConverter.vb
StartOf_SampleData\EndlessPagedCollectionView.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Collections
Imports Telerik.Windows.Data
Imports System.ComponentModel
Imports System.Collections.Specialized
Imports System.Windows.Data
Imports System.Globalization

Namespace Telerik.Windows.Examples.GridView
    Public Class EndlessPagedCollectionView
        Implements IEnumerable, IPagedCollectionView, INotifyPropertyChanged, INotifyCollectionChanged

        Public Event PageChanged As EventHandler(Of EventArgs)
        Public Event PageChanging As EventHandler(Of PageChangingEventArgs)
        Public Event PropertyChanged As PropertyChangedEventHandler
        Public Event CollectionChanged As NotifyCollectionChangedEventHandler
        Private pageIndex As Integer = -1
        Private isPageChanging As Boolean
        Private pageSize As Integer

        Private Property CanChangePage As Boolean
            Get
                Return True
            End Get
        End Property

        Private Property IsPageChanging As Boolean
            Get
                Return Me.isPageChanging
            End Get
        End Property

        Private Sub SetIsPageChanging(ByVal value As Boolean)
            If Me.isPageChanging <> value Then
                Me.isPageChanging = value
                Me.OnPropertyChanged("IsPageChanging")
            End If
        End Sub

        Private Property ItemCount As Integer
            Get
                Return ((CType(Me, IPagedCollectionView)).PageIndex + 1) * (CType(Me, IPagedCollectionView)).PageSize
            End Get
        End Property

        Private Function MoveToFirstPage() As Boolean
            Return (CType(Me, IPagedCollectionView)).MoveToPage(0)
        End Function

        Private Function MoveToLastPage() As Boolean
            Return False
        End Function

        Private Function MoveToNextPage() As Boolean
            Return (CType(Me, IPagedCollectionView)).MoveToPage((CType(Me, IPagedCollectionView)).PageIndex + 1)
        End Function

        Private Function MoveToPage(ByVal pageIndex As Integer) As Boolean
            If Me.OnPageChanging(pageIndex) AndAlso pageIndex <> -1 Then
                Return False
            End If

            Me.SetIsPageChanging(True)
            Me.pageIndex = pageIndex
            Me.SetIsPageChanging(False)
            Me.OnPropertyChanged("PageIndex")
            Me.OnPropertyChanged("ItemCount")
            Me.OnPageChanged()
            Me.OnCollectionChanged()
            Return True
        End Function

        Private Function MoveToPreviousPage() As Boolean
            Return (CType(Me, IPagedCollectionView)).MoveToPage((CType(Me, IPagedCollectionView)).PageIndex - 1)
        End Function

        Private Property PageIndex As Integer
            Get
                Return Me.pageIndex
            End Get
        End Property

        Private Property PageSize As Integer
            Get
                Return Me.pageSize
            End Get
            Set(ByVal value As Integer)

                If value < 1 Then
                    Throw New ArgumentOutOfRangeException("value", "The PageSize of an endless collection should be positive.")
                End If

                If Me.pageSize <> value Then
                    Me.pageSize = value
                    Me.OnPropertyChanged("PageSize")
                    Me.OnPropertyChanged("ItemCount")
                    (CType(Me, IPagedCollectionView)).MoveToFirstPage()
                End If
            End Set
        End Property

        Private Property TotalItemCount As Integer
            Get
                Return -1
            End Get
        End Property

        Public Function GetEnumerator() As System.Collections.IEnumerator
            Dim items As IEnumerable(Of Order) = From id In Enumerable.Range((CType(Me, IPagedCollectionView)).PageIndex * (CType(Me, IPagedCollectionView)).PageSize, (CType(Me, IPagedCollectionView)).PageSize) Select New Order(id)
            Return items.GetEnumerator()
        End Function

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            Dim e As PropertyChangedEventArgs = New PropertyChangedEventArgs(propertyName)
            RaiseEvent PropertyChanged(Me, e)
        End Sub

        Private Function OnPageChanging(ByVal newPageIndex As Integer) As Boolean
            Dim e As PageChangingEventArgs = New PageChangingEventArgs(newPageIndex)
            RaiseEvent PageChanging(Me, e)
            Return e.Cancel
        End Function

        Private Sub OnPageChanged()
            Dim e As EventArgs = EventArgs.Empty
            RaiseEvent PageChanged(Me, e)
        End Sub

        Private Sub OnCollectionChanged()
            Dim e As NotifyCollectionChangedEventArgs = New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)
            RaiseEvent CollectionChanged(Me, e)
        End Sub

        Public Class Order
            Private id As Integer
            Private date As DateTime
            Private amount As Double
            Private confirmed As Boolean
            Private code As String
            Private country As String

            Public Property ID As Integer
                Get
                    Return Me.id
                End Get
            End Property

            Public Property Date As DateTime
                Get
                    Return Me.date
                End Get
                Private Set(ByVal value As DateTime)
                    Me.date = value
                End Set
            End Property

            Public Property Amount As Double
                Get
                    Return Me.amount
                End Get
                Private Set(ByVal value As Double)
                    Me.amount = value
                End Set
            End Property

            Public Property Confirmed As Boolean
                Get
                    Return Me.confirmed
                End Get
                Private Set(ByVal value As Boolean)
                    Me.confirmed = value
                End Set
            End Property

            Public Property Code As String
                Get
                    Return Me.code
                End Get
                Private Set(ByVal value As String)
                    Me.code = value
                End Set
            End Property

            Public Property Country As String
                Get
                    Return Me.country
                End Get
                Private Set(ByVal value As String)
                    Me.country = value
                End Set
            End Property

            Public Sub New(ByVal id As Integer)
                Me.id = id
                Dim random As Integer = New Random(id).[Next](-100, 100)
                Me.Date = DateTime.Now.AddDays(random)
                Me.Amount = Math.Abs(random)
                Me.Confirmed = random Mod 2 = 0
                Dim someRandom As Integer = Math.Abs(Me.id.GetHashCode()) / 10 + Math.Abs(Me.Date.GetHashCode()) / 10 + Math.Abs(Me.Amount.GetHashCode()) / 10 + Math.Abs(Me.Confirmed.GetHashCode()) / 10
                Me.Code = someRandom.ToString() & someRandom.ToString()

                Select Case random Mod 5
                    Case 0
                        Me.Country = "USA"
                    Case 1
                        Me.Country = "UK"
                    Case 2
                        Me.Country = "Germany"
                    Case 3
                        Me.Country = "Spain"
                    Case 4
                        Me.Country = "France"
                    Case Else
                        Me.Country = "Other"
                End Select
            End Sub
        End Class
    End Class
End Namespace

EndOf_SampleData\EndlessPagedCollectionView.vb
StartOf_SampleData\EnumHelper.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection

Namespace Telerik.Windows.Examples.GridView
    Module EnumHelper
        Function GetValuesAsString(ByVal enumType As Type) As String()
            Dim valuesAsString As IEnumerable(Of String) = From v In EnumHelper.GetValues(enumType) Select Convert.ToString(v)
            Return valuesAsString.ToArray()
        End Function

        Function GetValues(ByVal enumType As Type) As Object()
            Dim values As List(Of Object) = New List(Of Object)()
            Dim fields As IEnumerable(Of FieldInfo) = From field In enumType.GetFields() Where field.IsLiteral Select field

            For Each field As FieldInfo In fields
                Dim value As Object = field.GetValue(enumType)
                values.Add(value)
            Next

            Return values.ToArray()
        End Function
    End Module
End Namespace

EndOf_SampleData\EnumHelper.vb
StartOf_SampleData\ExamplesDataContext.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.IO

Namespace Telerik.Windows.Examples
    Public Class ExamplesDataContext
        Private northwind As Northwind

        Public Property Northwind As Northwind
            Get

                If northwind Is Nothing Then
                    northwind = New Northwind()
                End If

                Return northwind
            End Get
        End Property

        Private customers As IEnumerable(Of Customers)

        Public Property Customers As IEnumerable(Of Customers)
            Get

                If customers Is Nothing Then
                    customers = Northwind.CustomersCollection
                End If

                Return customers
            End Get
        End Property

        Private basicProducts As IEnumerable(Of Products)

        Public Property BasicProducts As IEnumerable(Of Products)
            Get

                If Me.basicProducts Is Nothing Then
                    Me.basicProducts = Northwind.ProductsCollection.Take(25)
                End If

                Return Me.basicProducts
            End Get
        End Property

        Private products As IEnumerable(Of Products)

        Public Property Products As IEnumerable(Of Products)
            Get

                If products Is Nothing Then
                    products = Northwind.ProductsCollection
                End If

                Return products
            End Get
        End Property

        Private orders As IEnumerable(Of Order)

        Public Property Orders As IEnumerable(Of Order)
            Get

                If orders Is Nothing Then
                    orders = Northwind.OrdersCollection
                End If

                Return orders
            End Get
        End Property

        Private employees As IEnumerable(Of Employee)

        Public Property Employees As IEnumerable(Of Employee)
            Get

                If employees Is Nothing Then
                    employees = Northwind.EmployeesCollection
                End If

                Return employees
            End Get
        End Property

        Private orderDetails As IEnumerable(Of Order_Detail)

        Public Property OrderDetails As IEnumerable(Of Order_Detail)
            Get

                If orderDetails Is Nothing Then
                    orderDetails = Northwind.Order_DetailsCollection
                End If

                Return orderDetails
            End Get
        End Property

        Private randomProducts As IList(Of MyBusinessObject)

        Public Property RandomProducts As IList(Of MyBusinessObject)
            Get

                If randomProducts Is Nothing Then
                    randomProducts = New MyBusinessObjects().GetData(100).ToList()
                End If

                Return randomProducts
            End Get
        End Property

        Private largeRandomProducts As IList(Of MyBusinessObject)

        Public Property LargeRandomProducts As IList(Of MyBusinessObject)
            Get

                If largeRandomProducts Is Nothing Then
                    largeRandomProducts = New MyBusinessObjects().GetData(1000000).ToList()
                End If

                Return largeRandomProducts
            End Get
        End Property

        Private clubs As IEnumerable(Of Club)

        Public Property Clubs As IEnumerable(Of Club)
            Get

                If clubs Is Nothing Then
                    clubs = Club.GetClubs()
                End If

                Return clubs
            End Get
        End Property
    End Class
End Namespace

EndOf_SampleData\ExamplesDataContext.vb
StartOf_SampleData\MyBusinessObjects.vb
Imports System
Imports System.Net
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Documents
Imports System.Windows.Ink
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Animation
Imports System.Windows.Shapes
Imports System.ComponentModel
Imports System.Collections.Generic
Imports System.Linq

Namespace Telerik.Windows.Examples
    Public Class MyBusinessObjects
        Shared names As String() = New String() {"Côte de Blaye", "Boston Crab Meat", "Singaporean Hokkien Fried Mee", "Gula Malacca", "Rogede sild", "Spegesild", "Zaanse koeken", "Chocolade", "Maxilaku", "Valkoinen suklaa"}
        Shared prizes As Double() = New Double() {23.25, 9, 45.6, 32, 14, 19, 263.5, 18.4, 3, 14}
        Shared dates As DateTime() = New DateTime() {New DateTime(2007, 5, 10), New DateTime(2008, 9, 13), New DateTime(2008, 2, 22), New DateTime(2009, 1, 2), New DateTime(2007, 4, 13), New DateTime(2008, 5, 12), New DateTime(2008, 1, 19), New DateTime(2008, 8, 26), New DateTime(2008, 7, 31), New DateTime(2007, 7, 16)}
        Shared bools As Boolean() = New Boolean() {True, False, True, False, True, False, True, False, True, False}

        Public Function GetData(ByVal maxItems As Integer) As IEnumerable(Of MyBusinessObject)
            Dim rnd As Random = New Random()
            Return From i In Enumerable.Range(1, maxItems) Select New MyBusinessObject(i, names(rnd.[Next](9)), prizes(rnd.[Next](9)), dates(rnd.[Next](9)), bools(rnd.[Next](9)))
        End Function

        Public Shared Function GenerateRandomBusinessObject(ByVal random As Random) As MyBusinessObject
            Return New MyBusinessObject(random.[Next](0, 100), names(random.[Next](9)), prizes(random.[Next](9)), dates(random.[Next](9)), bools(random.[Next](9)))
        End Function

        Public Shared Sub SetRandomPropertyValues(ByVal obj As MyBusinessObject, ByVal random As Random)
            obj.Name = names(random.[Next](9))
            obj.UnitPrice = prizes(random.[Next](9))
            obj.Date = dates(random.[Next](9))
            obj.Discontinued = bools(random.[Next](9))
        End Sub
    End Class

    Public Class MyBusinessObject
        Implements INotifyPropertyChanged

        Private id As Integer
        Private name As String
        Private unitPrice As Double
        Private date As DateTime
        Private discontinued As Boolean

        Public Sub New()
        End Sub

        Public Sub New(ByVal random As Random)
            MyBusinessObjects.SetRandomPropertyValues(Me, random)
        End Sub

        Public Sub New(ByVal ID As Integer, ByVal Name As String, ByVal UnitPrice As Double, ByVal Date As DateTime, ByVal Discontinued As Boolean)
            Me.ID = ID
            Me.Name = Name
            Me.UnitPrice = UnitPrice
            Me.Date = Date
            Me.Discontinued = Discontinued
        End Sub

        Public Property ID As Integer
            Get
                Return id
            End Get
            Set(ByVal value As Integer)
                id = value
                OnPropertyChanged("ID")
            End Set
        End Property

        Public Property Name As String
            Get
                Return name
            End Get
            Set(ByVal value As String)
                name = value
                OnPropertyChanged("Name")
            End Set
        End Property

        Public Property UnitPrice As Double
            Get
                Return unitPrice
            End Get
            Set(ByVal value As Double)
                unitPrice = value
                OnPropertyChanged("UnitPrice")
            End Set
        End Property

        Public Property Date As DateTime
            Get
                Return date
            End Get
            Set(ByVal value As DateTime)
                date = value
                OnPropertyChanged("Date")
            End Set
        End Property

        Public Property Discontinued As Boolean
            Get
                Return discontinued
            End Get
            Set(ByVal value As Boolean)
                discontinued = value
                OnPropertyChanged("Discontinued")
            End Set
        End Property

        Public Event PropertyChanged As PropertyChangedEventHandler

        Private Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace

EndOf_SampleData\MyBusinessObjects.vb
StartOf_SampleData\MyColumnsBindingBehavior.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls
Imports System.Collections.Specialized
Imports System.Collections
Imports System.Windows.Data

Namespace Telerik.Windows.Examples.GridView
    Public Class MyColumnsBindingBehavior
        Private ReadOnly grid As RadGridView = Nothing
        Private ReadOnly columns As INotifyCollectionChanged = Nothing
        Public Shared ReadOnly ColumnsProperty As DependencyProperty = DependencyProperty.RegisterAttached("Columns", GetType(INotifyCollectionChanged), GetType(MyColumnsBindingBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnColumnsPropertyChanged)))

        Public Shared Sub SetColumns(ByVal dependencyObject As DependencyObject, ByVal columns As INotifyCollectionChanged)
            dependencyObject.SetValue(ColumnsProperty, columns)
        End Sub

        Public Shared Function GetColumns(ByVal dependencyObject As DependencyObject) As INotifyCollectionChanged
            Return CType(dependencyObject.GetValue(ColumnsProperty), INotifyCollectionChanged)
        End Function

        Private Shared Sub OnColumnsPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim columns As INotifyCollectionChanged = TryCast(e.NewValue, INotifyCollectionChanged)

            If grid IsNot Nothing AndAlso columns IsNot Nothing Then
                Dim behavior As MyColumnsBindingBehavior = New MyColumnsBindingBehavior(grid, columns)
                behavior.Attach()
            End If
        End Sub

        Private Sub Attach()
            If grid IsNot Nothing AndAlso columns IsNot Nothing Then
                Me.grid.Unloaded += AddressOf OnGridUnloaded
                Transfer(TryCast(GetColumns(grid), IList), grid.Columns)
                RemoveHandler columns.CollectionChanged, AddressOf ContextColumns_CollectionChanged
                AddHandler columns.CollectionChanged, AddressOf ContextColumns_CollectionChanged
            End If
        End Sub

        Public Sub New(ByVal grid As RadGridView, ByVal columns As INotifyCollectionChanged)
            Me.grid = grid
            Me.columns = columns
        End Sub

        Private Sub OnGridUnloaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
            UnsubscribeFromEvents()
        End Sub

        Private Sub ContextColumns_CollectionChanged(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
            UnsubscribeFromEvents()
            Transfer(TryCast(GetColumns(grid), IList), grid.Columns)
            SubscribeToEvents()
        End Sub

        Private Sub GridColumns_CollectionChanged(ByVal sender As Object, ByVal e As System.Collections.Specialized.NotifyCollectionChangedEventArgs)
            UnsubscribeFromEvents()
            Transfer(grid.Columns, TryCast(GetColumns(grid), IList))
            SubscribeToEvents()
        End Sub

        Private Sub SubscribeToEvents()
            grid.Columns.CollectionChanged += AddressOf GridColumns_CollectionChanged

            If GetColumns(grid) IsNot Nothing Then
                AddHandler GetColumns(grid).CollectionChanged, AddressOf ContextColumns_CollectionChanged
            End If
        End Sub

        Private Sub UnsubscribeFromEvents()
            grid.Columns.CollectionChanged -= AddressOf GridColumns_CollectionChanged

            If GetColumns(grid) IsNot Nothing Then
                RemoveHandler GetColumns(grid).CollectionChanged, AddressOf ContextColumns_CollectionChanged
            End If
        End Sub

        Public Shared Sub Transfer(ByVal source As IList, ByVal target As IList)
            If source Is Nothing OrElse target Is Nothing Then Return
            target.Clear()

            For Each o As Object In source
                target.Add(o)
            Next
        End Sub
    End Class
End Namespace

EndOf_SampleData\MyColumnsBindingBehavior.vb
StartOf_SampleData\CustomersSampleDataSource\CustomersSampleDataSource.xaml.vb
Imports System
Imports System.Linq
Imports System.Collections.Generic

Namespace Telerik.Windows.Examples
    Public Partial Class Northwind
        Implements System.ComponentModel.INotifyPropertyChanged

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private _CustomersCollection As CustomersCollection

        Public Property CustomersCollection As CustomersCollection
            Get

                If Me._CustomersCollection Is Nothing Then
                    Me._CustomersCollection = New CustomersCollection()
                    Dim resourceUri As System.Uri = New System.Uri("/GridView;component/SampleData/CustomersSampleDataSource/CustomersSampleDataSource.xaml", System.UriKind.Relative)

                    If System.Windows.Application.GetResourceStream(resourceUri) IsNot Nothing Then
                        System.Windows.Application.LoadComponent(Me, resourceUri)
                    End If
                End If

                Return Me._CustomersCollection
            End Get
        End Property
    End Class

    Public Class Customers
        Implements System.ComponentModel.INotifyPropertyChanged

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Shared _Northwind As Northwind

        Public Shared Property Northwind As Northwind
            Get

                If _Northwind Is Nothing Then
                    _Northwind = New Northwind()
                End If

                Return _Northwind
            End Get
        End Property

        Private orders As IEnumerable(Of Order)

        <System.ComponentModel.Browsable(False)> <System.ComponentModel.DataAnnotations.Display(AutoGenerateField:=False)>
        Public Property Orders As IEnumerable(Of Order)
            Get

                If orders Is Nothing Then
                    orders = From o In Northwind.OrdersCollection Where o.CustomerID = CustomerID Select o
                End If

                Return orders
            End Get
        End Property

        Private _CustomerID As String = String.Empty

        Public Property CustomerID As String
            Get
                Return Me._CustomerID
            End Get
            Set(ByVal value As String)

                If Me._CustomerID <> value Then
                    Me._CustomerID = value
                    Me.OnPropertyChanged("CustomerID")
                End If
            End Set
        End Property

        Private _CompanyName As String = String.Empty

        Public Property CompanyName As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)

                If Me._CompanyName <> value Then
                    Me._CompanyName = value
                    Me.OnPropertyChanged("CompanyName")
                End If
            End Set
        End Property

        Private _ContactName As String = String.Empty

        Public Property ContactName As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)

                If Me._ContactName <> value Then
                    Me._ContactName = value
                    Me.OnPropertyChanged("ContactName")
                End If
            End Set
        End Property

        Private _ContactTitle As String = String.Empty

        Public Property ContactTitle As String
            Get
                Return Me._ContactTitle
            End Get
            Set(ByVal value As String)

                If Me._ContactTitle <> value Then
                    Me._ContactTitle = value
                    Me.OnPropertyChanged("ContactTitle")
                End If
            End Set
        End Property

        Private _Address As String = String.Empty

        Public Property Address As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)

                If Me._Address <> value Then
                    Me._Address = value
                    Me.OnPropertyChanged("Address")
                End If
            End Set
        End Property

        Private _City As String = String.Empty

        Public Property City As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)

                If Me._City <> value Then
                    Me._City = value
                    Me.OnPropertyChanged("City")
                End If
            End Set
        End Property

        Private _PostalCode As String = String.Empty

        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)

                If Me._PostalCode <> value Then
                    Me._PostalCode = value
                    Me.OnPropertyChanged("PostalCode")
                End If
            End Set
        End Property

        Private _Country As String = String.Empty

        Public Property Country As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)

                If Me._Country <> value Then
                    Me._Country = value
                    Me.OnPropertyChanged("Country")
                End If
            End Set
        End Property

        Private _Phone As String = String.Empty

        Public Property Phone As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)

                If Me._Phone <> value Then
                    Me._Phone = value
                    Me.OnPropertyChanged("Phone")
                End If
            End Set
        End Property

        Private _Fax As String = String.Empty

        Public Property Fax As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)

                If Me._Fax <> value Then
                    Me._Fax = value
                    Me.OnPropertyChanged("Fax")
                End If
            End Set
        End Property

        Private _Region As String = String.Empty

        Public Property Region As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)

                If Me._Region <> value Then
                    Me._Region = value
                    Me.OnPropertyChanged("Region")
                End If
            End Set
        End Property

        Public Overrides Function ToString() As String
            Return String.Format("Customer: " & Me.CustomerID)
        End Function
    End Class

    Public Class CustomersCollection
        Inherits System.Collections.ObjectModel.ObservableCollection(Of Customers)
    End Class
End Namespace

EndOf_SampleData\CustomersSampleDataSource\CustomersSampleDataSource.xaml.vb
StartOf_SampleData\EmployeesSampleDataSource\EmployeesSampleDataSource.xaml.vb
Imports System
Imports System.Linq
Imports System.Collections.Generic
Imports System.ComponentModel

Namespace Telerik.Windows.Examples
    Public Partial Class Northwind
        Private _EmployeesCollection As EmployeesCollection

        Public Property EmployeesCollection As EmployeesCollection
            Get

                If Me._EmployeesCollection Is Nothing Then
                    Me._EmployeesCollection = New EmployeesCollection()
                    Dim resourceUri As System.Uri = New System.Uri("/GridView;component/SampleData/EmployeesSampleDataSource/EmployeesSampleDataSource.xaml", System.UriKind.Relative)

                    If System.Windows.Application.GetResourceStream(resourceUri) IsNot Nothing Then
                        System.Windows.Application.LoadComponent(Me, resourceUri)
                    End If
                End If

                Return Me._EmployeesCollection
            End Get
        End Property
    End Class

    Public Partial Class Employee
        Implements System.ComponentModel.INotifyPropertyChanged

        Shared _Northwind As Northwind

        Public Shared Property Northwind As Northwind
            Get

                If _Northwind Is Nothing Then
                    _Northwind = New Northwind()
                End If

                Return _Northwind
            End Get
        End Property

        Private orders As IEnumerable(Of Order)

        <System.ComponentModel.Browsable(False)>
        Public Property Orders As IEnumerable(Of Order)
            Get

                If orders Is Nothing Then
                    orders = From o In Northwind.OrdersCollection Where o.EmployeeID = EmployeeID Select o
                End If

                Return orders
            End Get
        End Property

        Private _Picture As Byte()

        Public Property Picture As Byte()
            Get

                If _Picture Is Nothing Then

                    If Not String.IsNullOrEmpty(Me.Photo) Then
                        Me._Picture = Convert.FromBase64String(Me.Photo)
                    End If
                End If

                Return Me._Picture
            End Get
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private _EmployeeID As Double = 0

        Public Property EmployeeID As Double
            Get
                Return Me._EmployeeID
            End Get
            Set(ByVal value As Double)

                If Me._EmployeeID <> value Then
                    Me._EmployeeID = value
                    Me.OnPropertyChanged("EmployeeID")
                End If
            End Set
        End Property

        Private _LastName As String = String.Empty

        Public Property LastName As String
            Get
                Return Me._LastName
            End Get
            Set(ByVal value As String)

                If Me._LastName <> value Then
                    Me._LastName = value
                    Me.OnPropertyChanged("LastName")
                End If
            End Set
        End Property

        Private _FirstName As String = String.Empty

        Public Property FirstName As String
            Get
                Return Me._FirstName
            End Get
            Set(ByVal value As String)

                If Me._FirstName <> value Then
                    Me._FirstName = value
                    Me.OnPropertyChanged("FirstName")
                End If
            End Set
        End Property

        Private _Title As String = String.Empty

        Public Property Title As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)

                If Me._Title <> value Then
                    Me._Title = value
                    Me.OnPropertyChanged("Title")
                End If
            End Set
        End Property

        Private _TitleOfCourtesy As String = String.Empty

        Public Property TitleOfCourtesy As String
            Get
                Return Me._TitleOfCourtesy
            End Get
            Set(ByVal value As String)

                If Me._TitleOfCourtesy <> value Then
                    Me._TitleOfCourtesy = value
                    Me.OnPropertyChanged("TitleOfCourtesy")
                End If
            End Set
        End Property

        Private _BirthDate As DateTime

        Public Property BirthDate As DateTime
            Get
                Return Me._BirthDate
            End Get
            Set(ByVal value As DateTime)

                If Me._BirthDate <> value Then
                    Me._BirthDate = value
                    Me.OnPropertyChanged("BirthDate")
                End If
            End Set
        End Property

        Private _HireDate As DateTime

        Public Property HireDate As DateTime
            Get
                Return Me._HireDate
            End Get
            Set(ByVal value As DateTime)

                If Me._HireDate <> value Then
                    Me._HireDate = value
                    Me.OnPropertyChanged("HireDate")
                End If
            End Set
        End Property

        Private _Address As String = String.Empty

        Public Property Address As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)

                If Me._Address <> value Then
                    Me._Address = value
                    Me.OnPropertyChanged("Address")
                End If
            End Set
        End Property

        Private _City As String = String.Empty

        Public Property City As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)

                If Me._City <> value Then
                    Me._City = value
                    Me.OnPropertyChanged("City")
                End If
            End Set
        End Property

        Private _Region As String = String.Empty

        Public Property Region As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)

                If Me._Region <> value Then
                    Me._Region = value
                    Me.OnPropertyChanged("Region")
                End If
            End Set
        End Property

        Private _PostalCode As String = String.Empty

        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)

                If Me._PostalCode <> value Then
                    Me._PostalCode = value
                    Me.OnPropertyChanged("PostalCode")
                End If
            End Set
        End Property

        Private _Country As String = String.Empty

        Public Property Country As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)

                If Me._Country <> value Then
                    Me._Country = value
                    Me.OnPropertyChanged("Country")
                End If
            End Set
        End Property

        Private _HomePhone As String = String.Empty

        Public Property HomePhone As String
            Get
                Return Me._HomePhone
            End Get
            Set(ByVal value As String)

                If Me._HomePhone <> value Then
                    Me._HomePhone = value
                    Me.OnPropertyChanged("HomePhone")
                End If
            End Set
        End Property

        Private _Extension As Double = 0

        Public Property Extension As Double
            Get
                Return Me._Extension
            End Get
            Set(ByVal value As Double)

                If Me._Extension <> value Then
                    Me._Extension = value
                    Me.OnPropertyChanged("Extension")
                End If
            End Set
        End Property

        Private _Photo As String = String.Empty

        Public Property Photo As String
            Get
                Return Me._Photo
            End Get
            Set(ByVal value As String)

                If Me._Photo <> value Then
                    Me._Photo = value
                    Me.OnPropertyChanged("Photo")
                End If
            End Set
        End Property

        Private _Notes As String = String.Empty

        Public Property Notes As String
            Get
                Return Me._Notes
            End Get
            Set(ByVal value As String)

                If Me._Notes <> value Then
                    Me._Notes = value
                    Me.OnPropertyChanged("Notes")
                End If
            End Set
        End Property

        Private _ReportsTo As Double = 0

        Public Property ReportsTo As Double
            Get
                Return Me._ReportsTo
            End Get
            Set(ByVal value As Double)

                If Me._ReportsTo <> value Then
                    Me._ReportsTo = value
                    Me.OnPropertyChanged("ReportsTo")
                End If
            End Set
        End Property
    End Class

    Public Class EmployeesCollection
        Inherits System.Collections.ObjectModel.ObservableCollection(Of Employee)
    End Class
End Namespace

EndOf_SampleData\EmployeesSampleDataSource\EmployeesSampleDataSource.xaml.vb
StartOf_SampleData\OrdersSampleDataSource\OrdersSampleDataSource.xaml.vb
Imports System
Imports System.Linq
Imports System.Collections.Generic
Imports System.ComponentModel

Namespace Telerik.Windows.Examples
    Public Partial Class Northwind
        Private _OrdersCollection As OrdersCollection

        Public Property OrdersCollection As OrdersCollection
            Get

                If Me._OrdersCollection Is Nothing Then
                    Me._OrdersCollection = New OrdersCollection()
                    Dim resourceUri As System.Uri = New System.Uri("/GridView;component/SampleData/OrdersSampleDataSource/OrdersSampleDataSource.xaml", System.UriKind.Relative)

                    If System.Windows.Application.GetResourceStream(resourceUri) IsNot Nothing Then
                        System.Windows.Application.LoadComponent(Me, resourceUri)
                    End If
                End If

                Return Me._OrdersCollection
            End Get
        End Property
    End Class

    Public Partial Class Order
        Implements System.ComponentModel.INotifyPropertyChanged

        Shared _Northwind As Northwind

        Public Shared Property Northwind As Northwind
            Get

                If _Northwind Is Nothing Then
                    _Northwind = New Northwind()
                End If

                Return _Northwind
            End Get
        End Property

        Private details As IEnumerable(Of Order_Detail)

        <System.ComponentModel.Browsable(False)>
        Public Property Details As IEnumerable(Of Order_Detail)
            Get

                If details Is Nothing Then
                    details = From o In Northwind.Order_DetailsCollection Where o.OrderID = OrderID Select o
                End If

                Return details
            End Get
        End Property

        Private employee As Employee

        <System.ComponentModel.Browsable(False)>
        Public Property Employee As Employee
            Get

                If employee Is Nothing Then
                    employee = (From o In Northwind.EmployeesCollection Where o.EmployeeID = EmployeeID Select o).FirstOrDefault()
                End If

                Return employee
            End Get
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private _OrderID As Double = 0

        Public Property OrderID As Double
            Get
                Return Me._OrderID
            End Get
            Set(ByVal value As Double)

                If Me._OrderID <> value Then
                    Me._OrderID = value
                    Me.OnPropertyChanged("OrderID")
                End If
            End Set
        End Property

        Private _CustomerID As String = String.Empty

        Public Property CustomerID As String
            Get
                Return Me._CustomerID
            End Get
            Set(ByVal value As String)

                If Me._CustomerID <> value Then
                    Me._CustomerID = value
                    Me.OnPropertyChanged("CustomerID")
                End If
            End Set
        End Property

        Private _EmployeeID As Double = 0

        Public Property EmployeeID As Double
            Get
                Return Me._EmployeeID
            End Get
            Set(ByVal value As Double)

                If Me._EmployeeID <> value Then
                    Me._EmployeeID = value
                    Me.OnPropertyChanged("EmployeeID")
                End If
            End Set
        End Property

        Private _OrderDate As DateTime

        Public Property OrderDate As DateTime
            Get
                Return Me._OrderDate
            End Get
            Set(ByVal value As DateTime)

                If Me._OrderDate <> value Then
                    Me._OrderDate = value
                    Me.OnPropertyChanged("OrderDate")
                End If
            End Set
        End Property

        Private _RequiredDate As DateTime

        Public Property RequiredDate As DateTime
            Get
                Return Me._RequiredDate
            End Get
            Set(ByVal value As DateTime)

                If Me._RequiredDate <> value Then
                    Me._RequiredDate = value
                    Me.OnPropertyChanged("RequiredDate")
                End If
            End Set
        End Property

        Private _ShippedDate As DateTime

        Public Property ShippedDate As DateTime
            Get
                Return Me._ShippedDate
            End Get
            Set(ByVal value As DateTime)

                If Me._ShippedDate <> value Then
                    Me._ShippedDate = value
                    Me.OnPropertyChanged("ShippedDate")
                End If
            End Set
        End Property

        Private _ShipVia As Double = 0

        Public Property ShipVia As Double
            Get
                Return Me._ShipVia
            End Get
            Set(ByVal value As Double)

                If Me._ShipVia <> value Then
                    Me._ShipVia = value
                    Me.OnPropertyChanged("ShipVia")
                End If
            End Set
        End Property

        Private _Freight As Double = 0

        Public Property Freight As Double
            Get
                Return Me._Freight
            End Get
            Set(ByVal value As Double)

                If Me._Freight <> value Then
                    Me._Freight = value
                    Me.OnPropertyChanged("Freight")
                End If
            End Set
        End Property

        Private _ShipName As String = String.Empty

        Public Property ShipName As String
            Get
                Return Me._ShipName
            End Get
            Set(ByVal value As String)

                If Me._ShipName <> value Then
                    Me._ShipName = value
                    Me.OnPropertyChanged("ShipName")
                End If
            End Set
        End Property

        Private _ShipAddress As String = String.Empty

        Public Property ShipAddress As String
            Get
                Return Me._ShipAddress
            End Get
            Set(ByVal value As String)

                If Me._ShipAddress <> value Then
                    Me._ShipAddress = value
                    Me.OnPropertyChanged("ShipAddress")
                End If
            End Set
        End Property

        Private _ShipCity As String = String.Empty

        Public Property ShipCity As String
            Get
                Return Me._ShipCity
            End Get
            Set(ByVal value As String)

                If Me._ShipCity <> value Then
                    Me._ShipCity = value
                    Me.OnPropertyChanged("ShipCity")
                End If
            End Set
        End Property

        Private _ShipPostalCode As String = String.Empty

        Public Property ShipPostalCode As String
            Get
                Return Me._ShipPostalCode
            End Get
            Set(ByVal value As String)

                If Me._ShipPostalCode <> value Then
                    Me._ShipPostalCode = value
                    Me.OnPropertyChanged("ShipPostalCode")
                End If
            End Set
        End Property

        Private _ShipCountry As String = String.Empty

        Public Property ShipCountry As String
            Get
                Return Me._ShipCountry
            End Get
            Set(ByVal value As String)

                If Me._ShipCountry <> value Then
                    Me._ShipCountry = value
                    Me.OnPropertyChanged("ShipCountry")
                End If
            End Set
        End Property

        Private _ShipRegion As String = String.Empty

        Public Property ShipRegion As String
            Get
                Return Me._ShipRegion
            End Get
            Set(ByVal value As String)

                If Me._ShipRegion <> value Then
                    Me._ShipRegion = value
                    Me.OnPropertyChanged("ShipRegion")
                End If
            End Set
        End Property
    End Class

    Public Class OrdersCollection
        Inherits System.Collections.ObjectModel.ObservableCollection(Of Order)
    End Class
End Namespace

EndOf_SampleData\OrdersSampleDataSource\OrdersSampleDataSource.xaml.vb
StartOf_SampleData\Order_DetailsSampleDataSource\Order_DetailsSampleDataSource.xaml.vb
Imports System
Imports System.Linq

Namespace Telerik.Windows.Examples
    Public Partial Class Northwind
        Private _Order_DetailsCollection As Order_DetailsCollection

        Public Property Order_DetailsCollection As Order_DetailsCollection
            Get

                If Me._Order_DetailsCollection Is Nothing Then
                    Me._Order_DetailsCollection = New Order_DetailsCollection()
                    Dim resourceUri As System.Uri = New System.Uri("/GridView;component/SampleData/Order_DetailsSampleDataSource/Order_DetailsSampleDataSource.xaml", System.UriKind.Relative)

                    If System.Windows.Application.GetResourceStream(resourceUri) IsNot Nothing Then
                        System.Windows.Application.LoadComponent(Me, resourceUri)
                    End If
                End If

                Return Me._Order_DetailsCollection
            End Get
        End Property
    End Class

    Public Partial Class Order_Detail
        Implements System.ComponentModel.INotifyPropertyChanged

        Shared _Northwind As Northwind

        Public Shared Property Northwind As Northwind
            Get

                If _Northwind Is Nothing Then
                    _Northwind = New Northwind()
                End If

                Return _Northwind
            End Get
        End Property

        Private product As Products

        <System.ComponentModel.Browsable(False)>
        Public Property Product As Products
            Get

                If product Is Nothing Then
                    product = (From o In Northwind.ProductsCollection Where o.ProductID = ProductID Select o).FirstOrDefault()
                End If

                Return product
            End Get
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private _OrderID As Double = 0

        Public Property OrderID As Double
            Get
                Return Me._OrderID
            End Get
            Set(ByVal value As Double)

                If Me._OrderID <> value Then
                    Me._OrderID = value
                    Me.OnPropertyChanged("OrderID")
                End If
            End Set
        End Property

        Private _ProductID As Double = 0

        Public Property ProductID As Double
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Double)

                If Me._ProductID <> value Then
                    Me._ProductID = value
                    Me.OnPropertyChanged("ProductID")
                End If
            End Set
        End Property

        Private _UnitPrice As Double = 0

        Public Property UnitPrice As Double
            Get
                Return Me._UnitPrice
            End Get
            Set(ByVal value As Double)

                If Me._UnitPrice <> value Then
                    Me._UnitPrice = value
                    Me.OnPropertyChanged("UnitPrice")
                End If
            End Set
        End Property

        Private _Quantity As Double = 0

        Public Property Quantity As Double
            Get
                Return Me._Quantity
            End Get
            Set(ByVal value As Double)

                If Me._Quantity <> value Then
                    Me._Quantity = value
                    Me.OnPropertyChanged("Quantity")
                End If
            End Set
        End Property

        Private _Discount As Double = 0

        Public Property Discount As Double
            Get
                Return Me._Discount
            End Get
            Set(ByVal value As Double)

                If Me._Discount <> value Then
                    Me._Discount = value
                    Me.OnPropertyChanged("Discount")
                End If
            End Set
        End Property
    End Class

    Public Class Order_DetailsCollection
        Inherits System.Collections.ObjectModel.ObservableCollection(Of Order_Detail)
    End Class
End Namespace

EndOf_SampleData\Order_DetailsSampleDataSource\Order_DetailsSampleDataSource.xaml.vb
StartOf_SampleData\ProductsSampleDataSource\ProductsSampleDataSource.xaml.vb
Imports System

Namespace Telerik.Windows.Examples
    Public Partial Class Northwind
        Private _ProductsCollection As ProductsCollection

        Public Property ProductsCollection As ProductsCollection
            Get

                If Me._ProductsCollection Is Nothing Then
                    Me._ProductsCollection = New ProductsCollection()
                    Dim resourceUri As System.Uri = New System.Uri("/GridView;component/SampleData/ProductsSampleDataSource/ProductsSampleDataSource.xaml", System.UriKind.Relative)

                    If System.Windows.Application.GetResourceStream(resourceUri) IsNot Nothing Then
                        System.Windows.Application.LoadComponent(Me, resourceUri)
                    End If
                End If

                Return Me._ProductsCollection
            End Get
        End Property
    End Class

    Public Class Products
        Implements System.ComponentModel.INotifyPropertyChanged

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler

        Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private _ProductID As Double = 0

        Public Property ProductID As Double
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Double)

                If Me._ProductID <> value Then
                    Me._ProductID = value
                    Me.OnPropertyChanged("ProductID")
                End If
            End Set
        End Property

        Private _ProductName As String = String.Empty

        Public Property ProductName As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)

                If Me._ProductName <> value Then
                    Me._ProductName = value
                    Me.OnPropertyChanged("ProductName")
                End If
            End Set
        End Property

        Private _SupplierID As Double = 0

        Public Property SupplierID As Double
            Get
                Return Me._SupplierID
            End Get
            Set(ByVal value As Double)

                If Me._SupplierID <> value Then
                    Me._SupplierID = value
                    Me.OnPropertyChanged("SupplierID")
                End If
            End Set
        End Property

        Private _CategoryID As Double = 0

        Public Property CategoryID As Double
            Get
                Return Me._CategoryID
            End Get
            Set(ByVal value As Double)

                If Me._CategoryID <> value Then
                    Me._CategoryID = value
                    Me.OnPropertyChanged("CategoryID")
                End If
            End Set
        End Property

        Private _QuantityPerUnit As String = String.Empty

        Public Property QuantityPerUnit As String
            Get
                Return Me._QuantityPerUnit
            End Get
            Set(ByVal value As String)

                If Me._QuantityPerUnit <> value Then
                    Me._QuantityPerUnit = value
                    Me.OnPropertyChanged("QuantityPerUnit")
                End If
            End Set
        End Property

        Private _UnitPrice As Double = 0

        Public Property UnitPrice As Double
            Get
                Return Me._UnitPrice
            End Get
            Set(ByVal value As Double)

                If Me._UnitPrice <> value Then
                    Me._UnitPrice = value
                    Me.OnPropertyChanged("UnitPrice")
                End If
            End Set
        End Property

        Private _UnitsInStock As Double = 0

        Public Property UnitsInStock As Double
            Get
                Return Me._UnitsInStock
            End Get
            Set(ByVal value As Double)

                If Me._UnitsInStock <> value Then
                    Me._UnitsInStock = value
                    Me.OnPropertyChanged("UnitsInStock")
                End If
            End Set
        End Property

        Private _UnitsOnOrder As Double = 0

        Public Property UnitsOnOrder As Double
            Get
                Return Me._UnitsOnOrder
            End Get
            Set(ByVal value As Double)

                If Me._UnitsOnOrder <> value Then
                    Me._UnitsOnOrder = value
                    Me.OnPropertyChanged("UnitsOnOrder")
                End If
            End Set
        End Property

        Private _ReorderLevel As Double = 0

        Public Property ReorderLevel As Double
            Get
                Return Me._ReorderLevel
            End Get
            Set(ByVal value As Double)

                If Me._ReorderLevel <> value Then
                    Me._ReorderLevel = value
                    Me.OnPropertyChanged("ReorderLevel")
                End If
            End Set
        End Property

        Private _Discontinued As Double = 0

        Public Property Discontinued As Double
            Get
                Return Me._Discontinued
            End Get
            Set(ByVal value As Double)

                If Me._Discontinued <> value Then
                    Me._Discontinued = value
                    Me.OnPropertyChanged("Discontinued")
                End If
            End Set
        End Property
    End Class

    Public Class ProductsCollection
        Inherits System.Collections.ObjectModel.ObservableCollection(Of Products)
    End Class
End Namespace

EndOf_SampleData\ProductsSampleDataSource\ProductsSampleDataSource.xaml.vb
StartOf_Scroll\Example.xaml.vb
Imports System
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Scroll
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Scroll\Example.xaml.vb
StartOf_Search\CustomFilterBehavior.vb
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.Search
    Public Class CustomFilterBehavior
        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly tb As TextBox = Nothing
        Private _customFilterDescriptor As CustomFilterDescriptor

        Public Property CustomFilterDescriptor As CustomFilterDescriptor
            Get

                If Me._customFilterDescriptor Is Nothing Then
                    Me._customFilterDescriptor = New CustomFilterDescriptor(Me.gridView.Columns.OfType(Of Telerik.Windows.Controls.GridViewColumn)())
                    Me.gridView.FilterDescriptors.Add(Me._customFilterDescriptor)
                End If

                Return Me._customFilterDescriptor
            End Get
        End Property

        Public Shared ReadOnly TextBoxProperty As DependencyProperty = DependencyProperty.RegisterAttached("TextBox", GetType(TextBox), GetType(CustomFilterBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnTextBoxPropertyChanged)))

        Public Shared Sub SetTextBox(ByVal dependencyObject As DependencyObject, ByVal tb As TextBox)
            dependencyObject.SetValue(TextBoxProperty, tb)
        End Sub

        Public Shared Function GetTextBox(ByVal dependencyObject As DependencyObject) As TextBox
            Return CType(dependencyObject.GetValue(TextBoxProperty), TextBox)
        End Function

        Public Shared Sub OnTextBoxPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim tb As TextBox = TryCast(e.NewValue, TextBox)

            If grid IsNot Nothing AndAlso tb IsNot Nothing Then
                Dim behavior As CustomFilterBehavior = New CustomFilterBehavior(grid, tb)
            End If
        End Sub

        Public Sub New(ByVal gridView As RadGridView, ByVal tb As TextBox)
            Me.gridView = gridView
            Me.tb = tb
            Me.tb.TextChanged -= AddressOf FilterValue_TextChanged
            Me.tb.TextChanged += AddressOf FilterValue_TextChanged
        End Sub

        Private Sub FilterValue_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
            Me.CustomFilterDescriptor.FilterValue = tb.Text
            tb.Focus()
        End Sub
    End Class
End Namespace

EndOf_Search\CustomFilterBehavior.vb
StartOf_Search\CustomFilterDescriptor.vb
Imports System
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq.Expressions
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples.GridView.Search
    Public Class CustomFilterDescriptor
        Inherits FilterDescriptorBase

        Private ReadOnly compositeFilterDescriptor As CompositeFilterDescriptor
        Private Shared ReadOnly TrueExpression As ConstantExpression = System.Linq.Expressions.Expression.Constant(True)
        Private filterValue As String

        Public Sub New(ByVal columns As IEnumerable(Of Telerik.Windows.Controls.GridViewColumn))
            Me.compositeFilterDescriptor = New CompositeFilterDescriptor()
            Me.compositeFilterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.[Or]

            For Each column As GridViewColumn In columns

                If TypeOf column Is GridViewDataColumn Then
                    Me.compositeFilterDescriptor.FilterDescriptors.Add(Me.CreateFilterForColumn(CType(column, GridViewDataColumn)))
                End If
            Next
        End Sub

        Public Property FilterValue As String
            Get
                Return Me.filterValue
            End Get
            Set(ByVal value As String)

                If Me.filterValue <> value Then
                    Me.filterValue = value
                    Me.UpdateCompositeFilterValues()
                    Me.OnPropertyChanged("FilterValue")
                End If
            End Set
        End Property

        Protected Overrides Function CreateFilterExpression(ByVal parameterExpression As ParameterExpression) As System.Linq.Expressions.Expression
            If String.IsNullOrEmpty(Me.FilterValue) Then
                Return TrueExpression
            End If

            Try
                Return Me.compositeFilterDescriptor.CreateFilterExpression(parameterExpression)
            Catch
            End Try

            Return TrueExpression
        End Function

        Private Function CreateFilterForColumn(ByVal column As GridViewDataColumn) As IFilterDescriptor
            Dim filterOperator As FilterOperator = GetFilterOperatorForType(column.DataType)
            Dim descriptor As FilterDescriptor = New FilterDescriptor(column.UniqueName, filterOperator, Me.filterValue)
            descriptor.MemberType = column.DataType
            Return descriptor
        End Function

        Private Shared Function GetFilterOperatorForType(ByVal dataType As Type) As FilterOperator
            Return If(dataType = GetType(String), FilterOperator.Contains, FilterOperator.IsEqualTo)
        End Function

        Private Sub UpdateCompositeFilterValues()
            For Each descriptor As FilterDescriptor In Me.compositeFilterDescriptor.FilterDescriptors
                Dim convertedValue As Object = DefaultValue(descriptor.MemberType)

                Try
                    convertedValue = Convert.ChangeType(Me.FilterValue, descriptor.MemberType, CultureInfo.InvariantCulture)
                Catch
                    convertedValue = Telerik.Windows.Data.FilterDescriptor.UnsetValue
                End Try

                If descriptor.MemberType.IsAssignableFrom(GetType(DateTime)) Then
                    Dim date As DateTime

                    If DateTime.TryParse(Me.FilterValue, date) Then
                        convertedValue = date
                    End If
                End If

                descriptor.Value = convertedValue
            Next
        End Sub

        Private Shared Function DefaultValue(ByVal type As Type) As Object
            If type.IsValueType Then
                Return Activator.CreateInstance(type)
            End If

            Return Nothing
        End Function
    End Class
End Namespace

EndOf_Search\CustomFilterDescriptor.vb
StartOf_Search\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Search
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Search\Example.xaml.vb
StartOf_Selection\CellToStringConverter.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Windows.Data
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Selection
    Public Class CellToStringConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim cellInfo = TryCast(value, GridViewCellInfo)

            If cellInfo IsNot Nothing Then
                Dim grid = TryCast(cellInfo.Column.DataControl, RadGridView)

                If grid IsNot Nothing Then
                    Return String.Format("Row: {0}. Column: {1}", grid.Items.IndexOf(cellInfo.Item), cellInfo.Column.DisplayIndex)
                End If
            End If

            Return String.Empty
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selection\CellToStringConverter.vb
StartOf_Selection\Example.xaml.vb
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Linq
Imports System.Text
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data
Imports System.Windows.Documents
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Imaging
Imports System.Windows.Navigation
Imports System.Windows.Shapes
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Selection
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selection\Example.xaml.vb
StartOf_Selection\MyViewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Selection
    Public Class MyViewModel
        Inherits ViewModelBase

        Private _modes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property Modes As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _modes Is Nothing Then
                    _modes = Telerik.Windows.Data.EnumDataSource.FromType(Of System.Windows.Controls.SelectionMode)()
                End If

                Return _modes
            End Get
        End Property

        Private _units As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property Units As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _units Is Nothing Then
                    _units = Telerik.Windows.Data.EnumDataSource.FromType(Of GridViewSelectionUnit)()
                End If

                Return _units
            End Get
        End Property

        Private selectionUnit As GridViewSelectionUnit = GridViewSelectionUnit.FullRow

        Public Property SelectionUnit As GridViewSelectionUnit
            Get
                Return Me.selectionUnit
            End Get
            Set(ByVal value As GridViewSelectionUnit)

                If value <> Me.selectionUnit Then
                    Me.selectionUnit = value

                    If value = GridViewSelectionUnit.FullRow Then
                        Me.CanUserSelectColumns = False
                    End If

                    Me.OnPropertyChanged("SelectionUnit")
                    Me.OnPropertyChanged("IsCanUserSelectColumnsVisible")
                End If
            End Set
        End Property

        Private selectionMode As System.Windows.Controls.SelectionMode = System.Windows.Controls.SelectionMode.Single

        Public Property SelectionMode As System.Windows.Controls.SelectionMode
            Get
                Return Me.selectionMode
            End Get
            Set(ByVal value As System.Windows.Controls.SelectionMode)

                If value <> Me.selectionMode Then
                    Me.selectionMode = value

                    If value = System.Windows.Controls.SelectionMode.Single Then
                        Me.CanUserSelectColumns = False
                    End If

                    Me.OnPropertyChanged("SelectionMode")
                    Me.OnPropertyChanged("IsCanUserSelectColumnsVisible")
                End If
            End Set
        End Property

        Private canUserSelectColumns As Boolean

        Public Property CanUserSelectColumns As Boolean
            Get
                Return Me.canUserSelectColumns
            End Get
            Set(ByVal value As Boolean)

                If value <> Me.canUserSelectColumns Then
                    Me.canUserSelectColumns = value
                    Me.OnPropertyChanged("CanUserSelectColumns")
                End If
            End Set
        End Property

        Public Property IsCanUserSelectColumnsVisible As Boolean
            Get
                Return Me.selectionMode <> System.Windows.Controls.SelectionMode.Single AndAlso Me.selectionUnit <> GridViewSelectionUnit.FullRow
            End Get
        End Property
    End Class
End Namespace

EndOf_Selection\MyViewModel.vb
StartOf_Selection\SelectedCellsBindingBehavior.vb
Imports System
Imports System.Collections.ObjectModel
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Selection
    Public Class SelectedCellsBindingBehavior
        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly listBox As System.Windows.Controls.ListBox = Nothing
        Private selectedCells As ObservableCollection(Of GridViewCellInfo) = New ObservableCollection(Of GridViewCellInfo)()
        Public Shared ReadOnly ListBoxProperty As DependencyProperty = DependencyProperty.RegisterAttached("ListBox", GetType(FrameworkElement), GetType(SelectedCellsBindingBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnListBoxPropertyChanged)))

        Public Shared Sub SetListBox(ByVal dependencyObject As DependencyObject, ByVal lb As System.Windows.Controls.ListBox)
            dependencyObject.SetValue(ListBoxProperty, lb)
        End Sub

        Public Shared Function GetListBox(ByVal dependencyObject As DependencyObject) As System.Windows.Controls.ListBox
            Return CType(dependencyObject.GetValue(ListBoxProperty), System.Windows.Controls.ListBox)
        End Function

        Public Shared Sub OnListBoxPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim listBox As System.Windows.Controls.ListBox = TryCast(e.NewValue, System.Windows.Controls.ListBox)

            If grid IsNot Nothing AndAlso listBox IsNot Nothing Then
                Dim behavior As SelectedCellsBindingBehavior = New SelectedCellsBindingBehavior(grid, listBox)
            End If
        End Sub

        Public Sub New(ByVal gridView As RadGridView, ByVal listBox As System.Windows.Controls.ListBox)
            Me.gridView = gridView
            Me.listBox = listBox
            Me.listBox.ItemsSource = Me.selectedCells
            Me.gridView.SelectedCellsChanged += AddressOf gridView_SelectedCellsChanged
        End Sub

        Private Sub gridView_SelectedCellsChanged(ByVal sender As Object, ByVal e As Controls.GridView.GridViewSelectedCellsChangedEventArgs)
            Me.selectedCells.Clear()

            For Each cell In Me.gridView.SelectedCells
                Me.selectedCells.Add(cell)
            Next
        End Sub
    End Class
End Namespace

EndOf_Selection\SelectedCellsBindingBehavior.vb
StartOf_Selection\UnitToVisibilityConverter.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Windows
Imports System.Windows.Data
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples.GridView.Selection
    Public Class UnitToVisibilityConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            If TypeOf value Is GridViewSelectionUnit AndAlso CType(value, GridViewSelectionUnit) <> GridViewSelectionUnit.Cell Then
                Return Visibility.Visible
            End If

            Return Visibility.Collapsed
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selection\UnitToVisibilityConverter.vb
StartOf_Selectors\DataTemplateSelectors\AverageUnitPriceConveter.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Data
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class AverageUnitPriceConveter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim aggregates = TryCast((CType(value, CollectionViewSource)).Source, List(Of AggregateResult))

            If aggregates IsNot Nothing Then
                Dim result As AggregateResult = aggregates.FirstOrDefault(Function(a) a.FunctionName = "UnitPrice")

                If result IsNot Nothing AndAlso result.Value IsNot Nothing AndAlso Object.Equals(result.Value.[GetType](), GetType(Double)) AndAlso CDbl(result.Value) > 10 Then
                    Return True
                End If

                Return False
            End If

            Return Nothing
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\AverageUnitPriceConveter.vb
StartOf_Selectors\DataTemplateSelectors\ConditionalDataTemplateSelector.vb
Imports System.Collections.Generic
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class ConditionalDataTemplateSelector
        Inherits DataTemplateSelector

        Public Overrides Function SelectTemplate(ByVal item As Object, ByVal container As DependencyObject) As DataTemplate
            Dim conditionValue As Object = Me.ConditionConverter.Convert(item, Nothing, Nothing, Nothing)

            For Each rule As ConditionalDataTemplateRule In Me.Rules

                If Equals(rule.Value, conditionValue) Then
                    Return rule.DataTemplate
                End If
            Next

            Return MyBase.SelectTemplate(item, container)
        End Function

        Private _Rules As List(Of ConditionalDataTemplateRule)

        Public Property Rules As List(Of ConditionalDataTemplateRule)
            Get

                If Me._Rules Is Nothing Then
                    Me._Rules = New List(Of ConditionalDataTemplateRule)()
                End If

                Return Me._Rules
            End Get
        End Property

        Private _ConditionConverter As IValueConverter

        Public Property ConditionConverter As IValueConverter
            Get
                Return Me._ConditionConverter
            End Get
            Set(ByVal value As IValueConverter)
                Me._ConditionConverter = value
            End Set
        End Property
    End Class

    Public Class ConditionalDataTemplateRule
        Private _Value As Object

        Public Property Value As Object
            Get
                Return Me._Value
            End Get
            Set(ByVal value As Object)
                Me._Value = value
            End Set
        End Property

        Private _DataTemplate As DataTemplate

        Public Property DataTemplate As DataTemplate
            Get
                Return Me._DataTemplate
            End Get
            Set(ByVal value As DataTemplate)
                Me._DataTemplate = value
            End Set
        End Property
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\ConditionalDataTemplateSelector.vb
StartOf_Selectors\DataTemplateSelectors\CountryConveter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class CountryConveter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim customer As Customers = TryCast(value, Customers)

            If customer IsNot Nothing Then

                If customer.Country = "Mexico" Then
                    Return True
                End If

                Return False
            End If

            Return Nothing
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\CountryConveter.vb
StartOf_Selectors\DataTemplateSelectors\CellEditTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.CellEditTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\CellEditTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\CellTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.CellTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\CellTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\DeclarativeDefinition\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.DeclarativeDefinition
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\DeclarativeDefinition\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\GroupFooterTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.GroupFooterTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\GroupFooterTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\GroupHeaderTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.GroupHeaderTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\GroupHeaderTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\HierarchyChildTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.HierarchyChildTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\HierarchyChildTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\RowDetailsTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.RowDetailsTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\RowDetailsTemplateSelector\Example.xaml.vb
StartOf_Selectors\DataTemplateSelectors\ToolTipTemplateSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.DataTemplateSelectors.ToolTipTemplateSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\DataTemplateSelectors\ToolTipTemplateSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\ConditionalStyleSelector.vb
Imports System.Collections.Generic
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class ConditionalStyleSelector
        Inherits StyleSelector

        Public Overrides Function SelectStyle(ByVal item As Object, ByVal container As System.Windows.DependencyObject) As System.Windows.Style
            Dim conditionValue As Object = Me.ConditionConverter.Convert(item, Nothing, Nothing, Nothing)

            For Each rule As ConditionalStyleRule In Me.Rules

                If Equals(rule.Value, conditionValue) Then
                    Return rule.Style
                End If
            Next

            Return MyBase.SelectStyle(item, container)
        End Function

        Private _Rules As List(Of ConditionalStyleRule)

        Public Property Rules As List(Of ConditionalStyleRule)
            Get

                If Me._Rules Is Nothing Then
                    Me._Rules = New List(Of ConditionalStyleRule)()
                End If

                Return Me._Rules
            End Get
        End Property

        Private _ConditionConverter As IValueConverter

        Public Property ConditionConverter As IValueConverter
            Get
                Return Me._ConditionConverter
            End Get
            Set(ByVal value As IValueConverter)
                Me._ConditionConverter = value
            End Set
        End Property
    End Class

    Public Class ConditionalStyleRule
        Private _Value As Object

        Public Property Value As Object
            Get
                Return Me._Value
            End Get
            Set(ByVal value As Object)
                Me._Value = value
            End Set
        End Property

        Private _Style As Style

        Public Property Style As Style
            Get
                Return Me._Style
            End Get
            Set(ByVal value As Style)
                Me._Style = value
            End Set
        End Property
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\ConditionalStyleSelector.vb
StartOf_Selectors\StyleSelectors\GroupItemCountConveter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data
Imports Telerik.Windows.Data
Imports Telerik.Windows.Controls.GridView

Namespace Telerik.Windows.Examples
    Public Class GroupItemCountConveter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim group As IGroup = TryCast(value, IGroup)

            If group IsNot Nothing Then
                Return If(group.ItemCount < 3, True, False)
            End If

            Dim groupViewModel As GroupViewModel = TryCast(value, GroupViewModel)

            If groupViewModel IsNot Nothing Then
                Return If(groupViewModel.Group.ItemCount < 3, True, False)
            End If

            Return Nothing
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\GroupItemCountConveter.vb
StartOf_Selectors\StyleSelectors\UnitPriceConveter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class UnitPriceConveter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Dim product As Products = TryCast(value, Products)

            If product IsNot Nothing Then
                Return If(product.UnitPrice > 30, True, False)
            End If

            Return Nothing
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\UnitPriceConveter.vb
StartOf_Selectors\StyleSelectors\AlternateRowStyleSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.AlternateRowStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\AlternateRowStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\CellStyleSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.CellStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\CellStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\DeclarativeDefinition\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.DeclarativeDefinition
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\DeclarativeDefinition\Example.xaml.vb
StartOf_Selectors\StyleSelectors\GroupFooterCellStyleSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.GroupFooterCellStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\GroupFooterCellStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\GroupFooterCellStyleSelector\MyGroupFooterCellStyleSelector.vb
Imports System.Linq
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls.GridView
Imports Telerik.Windows.Data

Namespace Telerik.Windows.Examples
    Public Class MyGroupFooterCellStyleSelector
        Inherits StyleSelector

        Public Overrides Function SelectStyle(ByVal item As Object, ByVal container As System.Windows.DependencyObject) As System.Windows.Style
            Dim cell As GridViewGroupFooterCell = TryCast(container, GridViewGroupFooterCell)
            Dim groupFooterRow As GridViewGroupFooterRow = TryCast(cell.ParentRow, GridViewGroupFooterRow)
            Dim group As QueryableCollectionViewGroup = TryCast(groupFooterRow.Group, QueryableCollectionViewGroup)

            If group IsNot Nothing Then
                Dim f As AggregateFunction = cell.Column.AggregateFunctions.FirstOrDefault()

                If f IsNot Nothing Then
                    Dim result As AggregateResult = group.AggregateResults(f.FunctionName)

                    If result IsNot Nothing AndAlso result.Value IsNot Nothing AndAlso Object.Equals(result.Value.[GetType](), GetType(Double)) AndAlso CDbl(result.Value) > 5 Then
                        Return Me.GroupFooterCellStyle
                    Else
                        Return Me.DefaultGroupFooterCellStyle
                    End If
                End If
            End If

            Return New Style(GetType(GridViewGroupFooterCell))
        End Function

        Public Property GroupFooterCellStyle As Style
        Public Property DefaultGroupFooterCellStyle As Style
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\GroupFooterCellStyleSelector\MyGroupFooterCellStyleSelector.vb
StartOf_Selectors\StyleSelectors\GroupFooterRowStyleSelector\Example.xaml.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers

Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.GroupFooterRowStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.root.Resources.MergedDictionaries.Clear()
            Me.root.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/Selectors/StyleSelectors/GroupFooterRowStyleSelector/GridViewStyles.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\GroupFooterRowStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\GroupRowStyleSelector\Example.xaml.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers

Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.GroupRowStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.root.Resources.MergedDictionaries.Clear()
            Me.root.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/Selectors/StyleSelectors/GroupRowStyleSelector/GroupHeaderRowStyle.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\GroupRowStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\RowDetailsStyleSelector\Example.xaml.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls.QuickStart.Common.Helpers

Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.RowDetailsStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.Loaded += AddressOf Example_Loaded
            Me.Unloaded += AddressOf Example_Unloaded
        End Sub

        Private Sub Example_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged += AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_Unloaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs)
            ApplicationThemeManager.GetInstance().ThemeChanged -= AddressOf Me.Example_ThemeChanged
        End Sub

        Private Sub Example_ThemeChanged(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.root.Resources.MergedDictionaries.Clear()
            Me.root.Resources.MergedDictionaries.Add(New ResourceDictionary() With {
                .Source = New Uri("/GridView;component/Selectors/StyleSelectors/RowDetailsStyleSelector/DetailsPresenterStyle.xaml", UriKind.RelativeOrAbsolute)
            })
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\RowDetailsStyleSelector\Example.xaml.vb
StartOf_Selectors\StyleSelectors\RowStyleSelector\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Selectors.StyleSelectors.RowStyleSelector
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Selectors\StyleSelectors\RowStyleSelector\Example.xaml.vb
StartOf_Sorting\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Sorting
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Sorting\Example.xaml.vb
StartOf_Sorting\MyModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.Sorting
    Public Class MyModel
        Inherits ViewModelBase

        Private _directions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)

        Public Property Directions As IEnumerable(Of Telerik.Windows.Data.EnumMemberViewModel)
            Get

                If _directions Is Nothing Then
                    _directions = Telerik.Windows.Data.EnumDataSource.FromType(Of System.ComponentModel.ListSortDirection)()
                End If

                Return _directions
            End Get
        End Property
    End Class
End Namespace

EndOf_Sorting\MyModel.vb
StartOf_SpreadsheetStreamingExport\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.SpreadsheetStreamingExport
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_SpreadsheetStreamingExport\Example.xaml.vb
StartOf_SpreadsheetStreamingExport\ExampleViewModel.vb
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Input
Imports System.Windows.Media
Imports Telerik.Windows.Controls
Imports Telerik.Windows.Controls.GridView.SpreadsheetStreamingExport
Imports SaveFileDialog = Microsoft.Win32.SaveFileDialog

Namespace Telerik.Windows.Examples.GridView.SpreadsheetStreamingExport
    Public Class ExampleViewModel
        Inherits ViewModelBase

        Private exportCommand As ICommand = Nothing
        Private asyncExportCommand As ICommand = Nothing
        Private asyncExportDefaultStylesCommand As ICommand = Nothing
        Private resetItemsSourceCommand As ICommand = Nothing
        Private selectedExportFormat As String
        Private busyContent As String
        Private showLoadingIndicatorWhileAsyncExport As Boolean = True
        Private rowsCount As Integer

        Public Property ExportCommand As ICommand
            Get
                Return Me.exportCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.exportCommand <> value Then
                    Me.exportCommand = value
                    OnPropertyChanged("ExportCommand")
                End If
            End Set
        End Property

        Public Property AsyncExportCommand As ICommand
            Get
                Return Me.asyncExportCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.asyncExportCommand <> value Then
                    Me.asyncExportCommand = value
                    OnPropertyChanged("AsyncExportCommand")
                End If
            End Set
        End Property

        Public Property AsyncExportDefaultStylesCommand As ICommand
            Get
                Return Me.asyncExportDefaultStylesCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.asyncExportDefaultStylesCommand <> value Then
                    Me.asyncExportDefaultStylesCommand = value
                    OnPropertyChanged("AsyncExportDefaultStylesCommand")
                End If
            End Set
        End Property

        Public Property ResetItemsSourceCommand As ICommand
            Get
                Return Me.resetItemsSourceCommand
            End Get
            Set(ByVal value As ICommand)

                If Me.resetItemsSourceCommand <> value Then
                    Me.resetItemsSourceCommand = value
                    OnPropertyChanged("RebindCommand")
                End If
            End Set
        End Property

        Private exportFormats As IEnumerable(Of String)

        Public Property ExportFormats As IEnumerable(Of String)
            Get

                If exportFormats Is Nothing Then
                    exportFormats = New String() {"xlsx", "csv"}
                End If

                Return exportFormats
            End Get
        End Property

        Public Property SelectedExportFormat As String
            Get
                Return selectedExportFormat
            End Get
            Set(ByVal value As String)

                If Not Object.Equals(selectedExportFormat, value) Then
                    selectedExportFormat = value
                    OnPropertyChanged("SelectedExportFormat")
                End If
            End Set
        End Property

        Public Property BusyContent As String
            Get
                Return Me.busyContent
            End Get
            Set(ByVal value As String)

                If Me.busyContent <> value Then
                    Me.busyContent = value
                    OnPropertyChanged("BusyContent")
                End If
            End Set
        End Property

        Public Property ShowLoadingIndicatorWhileAsyncExport As Boolean
            Get
                Return Me.showLoadingIndicatorWhileAsyncExport
            End Get
            Set(ByVal value As Boolean)

                If Me.showLoadingIndicatorWhileAsyncExport <> value Then
                    Me.showLoadingIndicatorWhileAsyncExport = value
                    OnPropertyChanged("ShowLoadingIndicatorWhileAsyncExport")
                End If
            End Set
        End Property

        Public Property RowsCount As Integer
            Get
                Return Me.rowsCount
            End Get
            Set(ByVal value As Integer)

                If Me.rowsCount <> value Then
                    Me.rowsCount = value
                    Me.OnPropertyChanged("RowsCount")
                End If
            End Set
        End Property

        Public Property BusinessObjects As IList(Of MyBusinessObject)
            Get
                Return New MyBusinessObjects().GetData(Me.RowsCount).ToList()
            End Get
        End Property

        Public Sub New()
            Me.RowsCount = 100
            Me.BusyContent = "Exporting Please Wait"
            Me.SelectedExportFormat = Me.ExportFormats.FirstOrDefault()
            Me.ResetItemsSourceCommand = New DelegateCommand(AddressOf Me.ResetItemsSource)
            Me.ExportCommand = New DelegateCommand(AddressOf Me.Export)
            Me.AsyncExportCommand = New DelegateCommand(AddressOf Me.AsyncExport)
            Me.AsyncExportDefaultStylesCommand = New DelegateCommand(AddressOf Me.AsyncExportDefaultStyles)
        End Sub

        Private Sub ResetItemsSource(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)

            If grid IsNot Nothing Then
                grid.ItemsSource = Nothing
                grid.ItemsSource = Me.BusinessObjects
            End If
        End Sub

        Private Sub Export(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)
            Dim dialog = New SaveFileDialog() With {
                .DefaultExt = Me.SelectedExportFormat,
                .Filter = String.Format("(*.{0})|*.{1}", Me.SelectedExportFormat, Me.SelectedExportFormat)
            }

            If dialog.ShowDialog() = True Then

                Select Case Me.SelectedExportFormat
                    Case "xlsx"
                        Dim spreadStreamXlsxExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamXlsxExport.RunExport(dialog.FileName.ToString(), New SpreadStreamExportRenderer())
                    Case "csv"
                        Dim spreadStreamCsvExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamCsvExport.ExportFormat = SpreadStreamExportFormat.Csv
                        spreadStreamCsvExport.RunExport(dialog.FileName.ToString(), New SpreadStreamExportRenderer())
                End Select
            End If
        End Sub

        Private Sub AsyncExport(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)
            Dim dialog = New SaveFileDialog() With {
                .DefaultExt = Me.SelectedExportFormat,
                .Filter = String.Format("(*.{0})|*.{1}", Me.SelectedExportFormat, Me.SelectedExportFormat)
            }

            If dialog.ShowDialog() = True Then

                Select Case Me.SelectedExportFormat
                    Case "xlsx"
                        Dim spreadStreamXlsxExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamXlsxExport.ShowLoadingIndicatorWhileAsyncExport = Me.ShowLoadingIndicatorWhileAsyncExport
                        spreadStreamXlsxExport.RunExportAsync(dialog.FileName.ToString(), New SpreadStreamExportRenderer())
                    Case "csv"
                        Dim spreadStreamCsvExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamCsvExport.ExportFormat = SpreadStreamExportFormat.Csv
                        spreadStreamCsvExport.RunExportAsync(dialog.FileName.ToString(), New SpreadStreamExportRenderer())
                End Select
            End If
        End Sub

        Private Sub AsyncExportDefaultStyles(ByVal param As Object)
            Dim grid = TryCast(param, RadGridView)
            Dim exportOptions = New GridViewSpreadStreamExportOptions() With {
                .ExportDefaultStyles = True,
                .ShowColumnFooters = grid.ShowColumnFooters,
                .ShowColumnHeaders = grid.ShowColumnHeaders,
                .ShowGroupFooters = grid.ShowGroupFooters
            }
            Dim dialog = New SaveFileDialog() With {
                .DefaultExt = Me.SelectedExportFormat,
                .Filter = String.Format("(*.{0})|*.{1}", Me.SelectedExportFormat, Me.SelectedExportFormat)
            }

            If dialog.ShowDialog() = True Then

                Select Case Me.SelectedExportFormat
                    Case "xlsx"
                        Dim spreadStreamXlsxExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamXlsxExport.ShowLoadingIndicatorWhileAsyncExport = Me.ShowLoadingIndicatorWhileAsyncExport
                        spreadStreamXlsxExport.ElementExportingToDocument += Function(s, e)

                                                                                 If e.Element <> SpreadStreamExportElement.Cell Then
                                                                                     e.Style = New SpreadStreamCellStyle() With {
                                                                                         .IsBold = True,
                                                                                         .FontSize = 12,
                                                                                         .Background = CType(ColorConverter.ConvertFromString("#FFF2F2F2"), Color)
                                                                                     }
                                                                                 End If
                                                                             End Function

                        spreadStreamXlsxExport.RunExportAsync(dialog.FileName.ToString(), New SpreadStreamExportRenderer(), exportOptions)
                    Case "csv"
                        Dim spreadStreamCsvExport As GridViewSpreadStreamExport = New GridViewSpreadStreamExport(grid)
                        spreadStreamCsvExport.ExportFormat = SpreadStreamExportFormat.Csv
                        spreadStreamCsvExport.RunExportAsync(dialog.FileName.ToString(), New SpreadStreamExportRenderer())
                End Select
            End If
        End Sub
    End Class
End Namespace

EndOf_SpreadsheetStreamingExport\ExampleViewModel.vb
StartOf_StickyGroups\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.StickyGroups
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_StickyGroups\Example.xaml.vb
StartOf_TextSearch\Example.xaml.vb
Imports System.Windows.Media

Namespace Telerik.Windows.Examples.GridView.TextSearch
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
            Me.searchPanelBackgroundColorPicker.SelectedColor = Colors.DarkGray
            Me.searchPanelForegroundColorPicker.SelectedColor = Colors.White
        End Sub
    End Class
End Namespace

EndOf_TextSearch\Example.xaml.vb
StartOf_Theming\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Theming
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Theming\Example.xaml.vb
StartOf_Totals\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Totals
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Totals\Example.xaml.vb
StartOf_UIVirtualization\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.UIVirtualization
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_UIVirtualization\Example.xaml.vb
StartOf_UIVirtualization\MyConverter.vb
Imports System
Imports System.Linq
Imports System.Windows.Data

Namespace Telerik.Windows.Examples.GridView.UIVirtualization
    Public Class MyConverter
        Inherits IValueConverter

        Public Function Convert(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Return String.Format("Cell {0} {1}", value, parameter)
        End Function

        Public Function ConvertBack(ByVal value As Object, ByVal targetType As Type, ByVal parameter As Object, ByVal culture As System.Globalization.CultureInfo) As Object
            Throw New NotImplementedException()
        End Function
    End Class
End Namespace

EndOf_UIVirtualization\MyConverter.vb
StartOf_UIVirtualization\MyModel.vb
Imports System
Imports Telerik.Windows.Controls
Imports System.Windows.Data
Imports System.Collections.ObjectModel
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.UIVirtualization
    Public Class MyModel
        Inherits ViewModelBase

        Private _items As ObservableCollection(Of MyObject)

        Public Property Items As ObservableCollection(Of MyObject)
            Get
                Return Me._items
            End Get
            Set(ByVal value As ObservableCollection(Of MyObject))
                Me._items = value
                OnPropertyChanged("Items")
            End Set
        End Property

        Private _columns As Telerik.Windows.Controls.GridViewColumnCollection

        Public Property Columns As Telerik.Windows.Controls.GridViewColumnCollection
            Get

                If Me._columns Is Nothing OrElse Me._columns.OfType(Of Telerik.Windows.Controls.GridViewColumn)().Count() = 0 Then
                    Me._columns = CreateColumns()
                End If

                Return Me._columns
            End Get
            Set(ByVal value As Telerik.Windows.Controls.GridViewColumnCollection)
                Me._columns = value
            End Set
        End Property

        Private Function CreateColumns() As Telerik.Windows.Controls.GridViewColumnCollection
            Dim columnCount As Integer = 1000
            Dim rowCount As Integer = 1000000
            Items = New ObservableCollection(Of MyObject)(From i In Enumerable.Range(0, rowCount) Select New MyObject(i))
            Dim converter As MyConverter = New MyConverter()
            Dim columns As Telerik.Windows.Controls.GridViewColumnCollection = New Telerik.Windows.Controls.GridViewColumnCollection()

            For i As Integer = 0 To columnCount - 1
                Dim column As GridViewDataColumn = New GridViewDataColumn()
                column.Header = String.Format("Column {0}", i)
                column.IsReadOnly = True
                column.ShowFieldFilters = False
                column.Width = 150
                Dim binding As Binding = New Binding("ID")
                binding.Converter = converter
                binding.ConverterParameter = i
                column.DataMemberBinding = binding
                columns.Add(column)
            Next

            Return columns
        End Function
    End Class
End Namespace

EndOf_UIVirtualization\MyModel.vb
StartOf_UIVirtualization\MyObject.vb
Imports System
Imports System.Linq
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.UIVirtualization
    Public Class MyObject
        Inherits ViewModelBase

        Public Sub New(ByVal id As Integer)
            Me.ID = id
        End Sub

        Public Property ID As Integer
    End Class
End Namespace

EndOf_UIVirtualization\MyObject.vb
StartOf_UnboundMode\Commands.vb
Imports System
Imports System.Windows.Input

Namespace Telerik.Windows.Examples.GridView.UnboundMode
    Public Class AddCommand
        Implements ICommand

        Private ReadOnly model As ControlPanelBehavior

        Public Sub New(ByVal model As ControlPanelBehavior)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            model.AddItem()
        End Sub
    End Class

    Public Class RemoveCommand
        Implements ICommand

        Private ReadOnly model As ControlPanelBehavior

        Public Sub New(ByVal model As ControlPanelBehavior)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            model.RemoveItem()
        End Sub
    End Class

    Public Class ClearCommand
        Implements ICommand

        Private ReadOnly model As ControlPanelBehavior

        Public Sub New(ByVal model As ControlPanelBehavior)
            Me.model = model
        End Sub

        Public Function CanExecute(ByVal parameter As Object) As Boolean
            Return True
        End Function

        Public Event CanExecuteChanged As EventHandler

        Public Sub Execute(ByVal parameter As Object)
            model.ClearItems()
        End Sub
    End Class
End Namespace

EndOf_UnboundMode\Commands.vb
StartOf_UnboundMode\ControlPanelBehavior.vb
Imports System
Imports System.Windows
Imports Telerik.Windows.Controls

Namespace Telerik.Windows.Examples.GridView.UnboundMode
    Public Class ControlPanelBehavior
        Private ReadOnly random As Random = New Random()
        Private ReadOnly businessObjectGenerator As MyBusinessObjects = New MyBusinessObjects()
        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly panel As FrameworkElement = Nothing
        Private _addCommand As AddCommand
        Private _removeCommand As RemoveCommand
        Private _clearCommand As ClearCommand
        Public Shared ReadOnly PanelProperty As DependencyProperty = DependencyProperty.RegisterAttached("Panel", GetType(FrameworkElement), GetType(ControlPanelBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnPanelPropertyChanged)))

        Public Property AddCommand As AddCommand
            Get
                Return Me._addCommand
            End Get
            Set(ByVal value As AddCommand)
                Me._addCommand = value
            End Set
        End Property

        Public Property RemoveCommand As RemoveCommand
            Get
                Return Me._removeCommand
            End Get
            Set(ByVal value As RemoveCommand)
                Me._removeCommand = value
            End Set
        End Property

        Public Property ClearCommand As ClearCommand
            Get
                Return Me._clearCommand
            End Get
            Set(ByVal value As ClearCommand)
                Me._clearCommand = value
            End Set
        End Property

        Public Shared Sub SetPanel(ByVal dependencyObject As DependencyObject, ByVal panel As FrameworkElement)
            dependencyObject.SetValue(PanelProperty, panel)
        End Sub

        Public Shared Function GetPanel(ByVal dependencyObject As DependencyObject) As FrameworkElement
            Return CType(dependencyObject.GetValue(PanelProperty), FrameworkElement)
        End Function

        Private Shared Sub OnPanelPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim grid As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim panel As FrameworkElement = TryCast(e.NewValue, FrameworkElement)

            If Not Object.Equals(grid, Nothing) AndAlso Not Object.Equals(panel, Nothing) Then
                Dim behavior As ControlPanelBehavior = New ControlPanelBehavior(grid, panel)
            End If
        End Sub

        Public Sub New(ByVal gridView As RadGridView, ByVal panel As FrameworkElement)
            Me.AddCommand = New UnboundMode.AddCommand(Me)
            Me.RemoveCommand = New UnboundMode.RemoveCommand(Me)
            Me.ClearCommand = New UnboundMode.ClearCommand(Me)
            Me.gridView = gridView
            Me.panel = panel
            AddHandler Me.panel.LayoutUpdated, New EventHandler(AddressOf panel_LayoutUpdated)
            FillGrid()
        End Sub

        Private Sub panel_LayoutUpdated(ByVal sender As Object, ByVal e As EventArgs)
            If Not Object.Equals(Me.panel, Nothing) AndAlso Not Object.Equals(Me.panel.DataContext, Me) Then
                Me.panel.DataContext = Me
            End If
        End Sub

        Private Sub FillGrid()
            For i As Integer = 0 To 10 - 1
                Dim randomDataItem As MyBusinessObject = MyBusinessObjects.GenerateRandomBusinessObject(Me.random)
                Me.gridView.Items.Add(randomDataItem)
            Next
        End Sub

        Public Sub AddItem()
            Dim randomDataItem As MyBusinessObject = MyBusinessObjects.GenerateRandomBusinessObject(Me.random)
            Me.gridView.Items.Add(randomDataItem)
        End Sub

        Public Sub RemoveItem()
            If Me.gridView.Items.Count > 0 Then
                Me.gridView.Items.RemoveAt(Me.gridView.Items.Count - 1)
            End If
        End Sub

        Public Sub ClearItems()
            Me.gridView.Items.Clear()
            Me.gridView.FilterDescriptors.Clear()
            Me.gridView.GroupDescriptors.Clear()
            Me.gridView.SortDescriptors.Clear()
        End Sub
    End Class
End Namespace

EndOf_UnboundMode\ControlPanelBehavior.vb
StartOf_UnboundMode\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.UnboundMode
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_UnboundMode\Example.xaml.vb
StartOf_Validation\Example.xaml.vb
Namespace Telerik.Windows.Examples.GridView.Validation
    Public Partial Class Example
        Public Sub New()
            InitializeComponent()
        End Sub
    End Class
End Namespace

EndOf_Validation\Example.xaml.vb
StartOf_Validation\ValidationBehavior.vb
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports Telerik.Windows.Controls
Imports System.Collections.Generic
Imports Telerik.Windows.Controls.GridView
Imports System.Linq
Imports System.Text.RegularExpressions

Namespace Telerik.Windows.Examples.GridView.Validation
    Public Class ValidationBehavior
        Private ReadOnly gridView As RadGridView = Nothing
        Private ReadOnly isValidationEnabled As Boolean = False
        Private allCountries As List(Of String)
        Public Shared ReadOnly IsValidationEnabledProperty As DependencyProperty = DependencyProperty.RegisterAttached("IsValidationEnabled", GetType(Boolean), GetType(ValidationBehavior), New PropertyMetadata(New PropertyChangedCallback(AddressOf OnValidationSummaryPropertyChanged)))

        Public Shared Sub SetIsValidationEnabled(ByVal dependencyObject As DependencyObject, ByVal isEnabled As Boolean)
            dependencyObject.SetValue(IsValidationEnabledProperty, isEnabled)
        End Sub

        Public Shared Function GetIsValidationEnabled(ByVal dependencyObject As DependencyObject) As Boolean
            Return CBool(dependencyObject.GetValue(IsValidationEnabledProperty))
        End Function

        Public Shared Sub OnValidationSummaryPropertyChanged(ByVal dependencyObject As DependencyObject, ByVal e As DependencyPropertyChangedEventArgs)
            Dim gridView As RadGridView = TryCast(dependencyObject, RadGridView)
            Dim isEnabled As Boolean = CBool(e.NewValue)

            If gridView IsNot Nothing AndAlso isEnabled Then
                Dim behavior As ValidationBehavior = New ValidationBehavior(gridView, isEnabled)
            End If
        End Sub

        Public Sub New(ByVal gridView As RadGridView, ByVal isEnabled As Boolean)
            Me.gridView = gridView
            Me.isValidationEnabled = isEnabled
            Me.gridView.CellValidating += AddressOf Me.GridView_CellValidating
        End Sub

        Private Sub GridView_CellValidating(ByVal sender As Object, ByVal e As GridViewCellValidatingEventArgs)
            Dim isValid As Boolean = True
            Dim validationText As String = "Validation failed. "
            Dim cell As GridViewCell = e.Cell

            Select Case cell.Column.UniqueName
                Case "ContactName"
                    isValid = ValidateName(CStr(e.NewValue))

                    If Not isValid Then
                        validationText += "The name of the customer may contain only Latin letters" & Environment.NewLine & "and empty spaces and must start with a letter."
                    End If

                Case "Country"
                    isValid = Me.ValidateCountry(CStr(e.NewValue))

                    If Not isValid Then
                        validationText += "The name of the country must match the name of an existing one."
                    End If

                Case "Phone"
                    isValid = ValidatePhone(CStr(e.NewValue))

                    If Not isValid Then
                        validationText += "The phone must be in one of the formats X.X.X.X, Y or (X) Y, where " & Environment.NewLine & "X is a random sequence of numerals and Y is a random sequence of numerals, " & Environment.NewLine & "empty spaces and '-', which starts and ends with a numeral."
                    End If

                Case "PostalCode"
                    isValid = ValidatePostalCode(e.NewValue)

                    If Not isValid Then
                        validationText += "The postal code of the customer must not be empty."
                    End If
            End Select

            If Not isValid Then
                Me.MarkCell(cell, validationText)
            Else
                Me.RestoreCell(cell)
            End If

            e.ErrorMessage = validationText
            e.IsValid = isValid
        End Sub

        Private Shared Function GetAllCountries() As List(Of String)
            Dim allCountries As List(Of String) = New List(Of String)(1)
            Dim customerCountries As IEnumerable(Of String) = From customer In New Northwind().CustomersCollection Select customer.Country

            For Each country As String In customerCountries
                allCountries.Add(country)
            Next

            allCountries.Add("UK")
            allCountries.Sort()
            Return allCountries
        End Function

        Private Shared Function ValidatePostalCode(ByVal postalCode As Object) As Boolean
            If postalCode Is Nothing Then
                Return False
            End If

            Return Not String.IsNullOrEmpty(postalCode.ToString())
        End Function

        Private Function ValidateCountry(ByVal country As String) As Boolean
            If Me.allCountries Is Nothing Then
                Me.allCountries = GetAllCountries()
            End If

            Return Me.allCountries.Contains(country)
        End Function

        Private Shared Function ValidateName(ByVal name As String) As Boolean
            If name Is Nothing Then
                Return False
            End If

            Return Regex.IsMatch(name, "^([A-Za-z]+\s*)+$")
        End Function

        Private Shared Function ValidatePhone(ByVal phone As String) As Boolean
            Return String.IsNullOrEmpty(phone) OrElse Regex.IsMatch(phone, "^([0-9]+\.){3}[0-9]+$") OrElse Regex.IsMatch(phone, "^(\([0-9]+\))?\s?([0-9]+(-|\s)*)*[0-9]+\s*$")
        End Function

        Private Sub MarkCell(ByVal cell As Control, ByVal validationText As String)
            ToolTipService.SetToolTip(cell, validationText)
        End Sub

        Private Sub RestoreCell(ByVal cell As Control)
            ToolTipService.SetToolTip(cell, Nothing)
        End Sub
    End Class
End Namespace

EndOf_Validation\ValidationBehavior.vb
StartOf_WPF\IQueryable\Example.xaml.vb
Imports QuickStart.DataBase
Imports System.Linq

Namespace Telerik.Windows.Examples.GridView.WPF.IQueryable
    Public Partial Class Example
        Public Sub New()
            Me.InitializeComponent()

            Try
                Dim context = New NorthwindEntities(DataBaseHelper.GetConnectionString())
                Me.DataContext = context.Customers.OrderBy(Function(c) c.Customer_ID)
            Catch
            End Try
        End Sub
    End Class
End Namespace

EndOf_WPF\IQueryable\Example.xaml.vb
