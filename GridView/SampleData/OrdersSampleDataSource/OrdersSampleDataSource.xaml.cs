//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Telerik.Windows.Examples
{
	using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.ComponentModel; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class Northwind { }
#else

	public partial class Northwind
	{
		private OrdersCollection _OrdersCollection;
		public OrdersCollection OrdersCollection
		{
			get
			{
                if(this._OrdersCollection == null)
                {
                    this._OrdersCollection = new OrdersCollection();

                    System.Uri resourceUri = new System.Uri("/GridView;component/SampleData/OrdersSampleDataSource/OrdersSampleDataSource.xaml", System.UriKind.Relative);
				    if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				    {
					    System.Windows.Application.LoadComponent(this, resourceUri);
				    }
                }

				return this._OrdersCollection;
			}
		}
	}

	public partial class Order : System.ComponentModel.INotifyPropertyChanged
    {
        static Northwind _Northwind;
        public static Northwind Northwind
        {
            get
            {
                if (_Northwind == null)
                {
                    _Northwind = new Northwind();
                }

                return _Northwind;
            }
        }

        IEnumerable<Order_Detail> details;

        [System.ComponentModel.Browsable(false)]
        public IEnumerable<Order_Detail> Details
        {
            get
            {
                if (details == null)
                {
                    details = from o in Northwind.Order_DetailsCollection
                              where o.OrderID == OrderID
                              select o;
                }

                return details;
            }
        }

        Employee employee;

        [System.ComponentModel.Browsable(false)]
        public Employee Employee
        {
            get
            {
                if (employee == null)
                {
                    employee = (from o in Northwind.EmployeesCollection
                                where o.EmployeeID == EmployeeID
                                select o).FirstOrDefault();
                }

                return employee;
            }
        }

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _OrderID = 0;

		public double OrderID
		{
			get
			{
				return this._OrderID;
			}

			set
			{
				if (this._OrderID != value)
				{
					this._OrderID = value;
					this.OnPropertyChanged("OrderID");
				}
			}
		}

		private string _CustomerID = string.Empty;

		public string CustomerID
		{
			get
			{
				return this._CustomerID;
			}

			set
			{
				if (this._CustomerID != value)
				{
					this._CustomerID = value;
					this.OnPropertyChanged("CustomerID");
				}
			}
		}

		private double _EmployeeID = 0;

		public double EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}

			set
			{
				if (this._EmployeeID != value)
				{
					this._EmployeeID = value;
					this.OnPropertyChanged("EmployeeID");
				}
			}
		}

		private DateTime _OrderDate;

        public DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}

			set
			{
				if (this._OrderDate != value)
				{
					this._OrderDate = value;
					this.OnPropertyChanged("OrderDate");
				}
			}
		}

        private DateTime _RequiredDate;

        public DateTime RequiredDate
		{
			get
			{
				return this._RequiredDate;
			}

			set
			{
				if (this._RequiredDate != value)
				{
					this._RequiredDate = value;
					this.OnPropertyChanged("RequiredDate");
				}
			}
		}

        private DateTime _ShippedDate;

        public DateTime ShippedDate
		{
			get
			{
				return this._ShippedDate;
			}

			set
			{
				if (this._ShippedDate != value)
				{
					this._ShippedDate = value;
					this.OnPropertyChanged("ShippedDate");
				}
			}
		}

		private double _ShipVia = 0;

		public double ShipVia
		{
			get
			{
				return this._ShipVia;
			}

			set
			{
				if (this._ShipVia != value)
				{
					this._ShipVia = value;
					this.OnPropertyChanged("ShipVia");
				}
			}
		}

		private double _Freight = 0;

		public double Freight
		{
			get
			{
				return this._Freight;
			}

			set
			{
				if (this._Freight != value)
				{
					this._Freight = value;
					this.OnPropertyChanged("Freight");
				}
			}
		}

		private string _ShipName = string.Empty;

		public string ShipName
		{
			get
			{
				return this._ShipName;
			}

			set
			{
				if (this._ShipName != value)
				{
					this._ShipName = value;
					this.OnPropertyChanged("ShipName");
				}
			}
		}

		private string _ShipAddress = string.Empty;

		public string ShipAddress
		{
			get
			{
				return this._ShipAddress;
			}

			set
			{
				if (this._ShipAddress != value)
				{
					this._ShipAddress = value;
					this.OnPropertyChanged("ShipAddress");
				}
			}
		}

		private string _ShipCity = string.Empty;

		public string ShipCity
		{
			get
			{
				return this._ShipCity;
			}

			set
			{
				if (this._ShipCity != value)
				{
					this._ShipCity = value;
					this.OnPropertyChanged("ShipCity");
				}
			}
		}

		private string _ShipPostalCode = string.Empty;

		public string ShipPostalCode
		{
			get
			{
				return this._ShipPostalCode;
			}

			set
			{
				if (this._ShipPostalCode != value)
				{
					this._ShipPostalCode = value;
					this.OnPropertyChanged("ShipPostalCode");
				}
			}
		}

		private string _ShipCountry = string.Empty;

		public string ShipCountry
		{
			get
			{
				return this._ShipCountry;
			}

			set
			{
				if (this._ShipCountry != value)
				{
					this._ShipCountry = value;
					this.OnPropertyChanged("ShipCountry");
				}
			}
		}

		private string _ShipRegion = string.Empty;

		public string ShipRegion
		{
			get
			{
				return this._ShipRegion;
			}

			set
			{
				if (this._ShipRegion != value)
				{
					this._ShipRegion = value;
					this.OnPropertyChanged("ShipRegion");
				}
			}
		}
	}

	public class OrdersCollection : System.Collections.ObjectModel.ObservableCollection<Order>
	{ 
	}
#endif
}
